# ALERTAS DE CI/CD - Jenkins, SonarQube y Drone
# Monitorea builds, deployments y calidad de c√≥digo

groups:
  - name: jenkins_availability_alerts
    interval: 30s
    rules:
      # ALERTA 41: Jenkins Down
      - alert: JenkinsDown
        expr: up{job="jenkins"} == 0
        for: 2m
        labels:
          severity: critical
          service: jenkins-ci
          component: server
        annotations:
          summary: "üî¥ Jenkins CA√çDO - Sistema CI/CD detenido"
          description: "¬°CR√çTICO! Jenkins no responde. Sin Jenkins, TODO el proceso de CI/CD est√° detenido: no se pueden ejecutar builds, deployments est√°n bloqueados, tests autom√°ticos no corren, pipelines en espera. Desarrollo y operaciones completamente bloqueados. No hay forma de desplegar c√≥digo nuevo."
          dashboard: "http://localhost:8080/jenkins"
          action: "üö® URGENTE: 1) Ver contenedor: 'docker ps | grep jenkins'. 2) Ver logs: 'docker logs ensurance-jenkins-full --tail 100'. 3) Reiniciar: 'docker restart ensurance-jenkins-full'. 4) Verificar espacio en disco (Jenkins falla sin espacio). 5) Verificar puerto 8080. 6) Acceso: http://localhost:8080/jenkins."
      
      # ALERTA 42: Pushgateway Down
      - alert: PushgatewayDown
        expr: up{job="pushgateway"} == 0
        for: 2m
        labels:
          severity: warning
          service: pushgateway
          component: metrics
        annotations:
          summary: "‚ö†Ô∏è Pushgateway CA√çDO - M√©tricas batch perdidas"
          description: "Pushgateway no responde. Pushgateway recibe m√©tricas de jobs batch y tests de K6. Sin √©l, perdemos visibilidad de: resultados de stress tests, m√©tricas de jobs programados, estad√≠sticas de builds. No afecta aplicaciones en vivo, solo m√©tricas temporales."
          dashboard: "http://localhost:9093"
          action: "üîç Recuperar: 1) Ver contenedor: 'docker ps | grep pushgateway'. 2) Ver logs: 'docker logs ensurance-pushgateway-full'. 3) Reiniciar: 'docker restart ensurance-pushgateway-full'. 4) Verificar que K6 pueda conectar. 5) Re-ejecutar tests si es necesario."

  - name: jenkins_build_alerts
    interval: 30s
    rules:
      # ALERTA 43: Build fallido
      - alert: JenkinsBuildFailed
        expr: jenkins_build_result{result="FAILURE"} > 0
        for: 1m
        labels:
          severity: warning
          service: jenkins-ci
          component: build
        annotations:
          summary: "‚ö†Ô∏è Build {{ $labels.job_name }} #{{ $labels.build_number }} FALLIDO"
          description: "El build {{ $labels.job_name }} #{{ $labels.build_number }} ha fallado. Posibles causas: tests unitarios fallando, error de compilaci√≥n, lint errors, dependency issues, timeout. El c√≥digo NO puede desplegarse. Developers deben corregir antes de merge/deploy."
          dashboard: "http://localhost:8080/jenkins/job/{{ $labels.job_name }}/{{ $labels.build_number }}"
          action: "üîç Depurar build: 1) Ver logs en Jenkins. 2) Identificar step que fall√≥. 3) Tests? Fix c√≥digo. 4) Compilaci√≥n? Revisar dependencias. 5) Lint? Corregir estilo. 6) Re-ejecutar build despu√©s de fix. 7) Notificar a developer responsable."
      
      # ALERTA 44: Build muy lento
      - alert: JenkinsSlowBuild
        expr: jenkins_build_duration_seconds > 1800
        for: 1m
        labels:
          severity: warning
          service: jenkins-ci
          component: performance
        annotations:
          summary: "‚ö†Ô∏è Build {{ $labels.job_name }} muy lento - {{ $value | humanizeDuration }}"
          description: "El build {{ $labels.job_name }} est√° tardando {{ $value | humanizeDuration }} (umbral: 30 minutos). Builds lentos afectan productividad: developers esperan mucho por feedback, deploys se retrasan, CI/CD pipeline bloqueado. Puede indicar: tests ineficientes, compilaci√≥n pesada, recursos insuficientes."
          dashboard: "http://localhost:8080/jenkins"
          action: "üîç Optimizar build: 1) Identificar step lento en logs. 2) Paralelizar tests si es posible. 3) Usar cach√© de dependencias. 4) Optimizar tests lentos. 5) Aumentar executors de Jenkins. 6) Considerar split del pipeline. Target: <10 minutos."
      
      # ALERTA 45: Cola de builds larga
      - alert: JenkinsLongQueue
        expr: jenkins_queue_size > 5
        for: 5m
        labels:
          severity: warning
          service: jenkins-ci
          component: queue
        annotations:
          summary: "‚ö†Ô∏è Cola de Jenkins saturada - {{ $value }} builds esperando"
          description: "Hay {{ $value }} builds en cola esperando ejecutarse (umbral: 5). Cola larga significa: developers esperan mucho por builds, feedback loop lento, productividad reducida. Causas: pocos executors, builds lentos, muchos commits concurrentes."
          dashboard: "http://localhost:8080/jenkins/queue"
          action: "üîç Reducir cola: 1) Ver cola en Jenkins. 2) Cancelar builds obsoletos. 3) Aumentar n√∫mero de executors. 4) Optimizar builds lentos. 5) Priorizar builds cr√≠ticos. 6) Considerar Jenkins horizontal scaling."
      
      # ALERTA 46: M√∫ltiples builds fallidos consecutivos
      - alert: JenkinsMultipleBuildFailures
        expr: increase(jenkins_build_result{result="FAILURE"}[15m]) > 3
        for: 1m
        labels:
          severity: critical
          service: jenkins-ci
          component: build
        annotations:
          summary: "üî¥ M√∫ltiples builds fallando - {{ $value }} en 15 min - Problema sist√©mico"
          description: "¬°CR√çTICO! {{ $value }} builds han fallado en los √∫ltimos 15 minutos. M√∫ltiples fallos indican problema sist√©mico, NO errores aislados. Posibles causas: bug introducido en main/master, servicio externo ca√≠do (DB, API), Jenkins mal configurado, infraestructura con problemas. TODO el equipo afectado."
          dashboard: "http://localhost:8080/jenkins"
          action: "üö® URGENTE: 1) Identificar commit que rompi√≥ builds. 2) Revert si es necesario. 3) Verificar servicios externos (DB, APIs). 4) Revisar cambios en Jenkins/pipeline. 5) Comunicar al equipo. 6) Bloquear merges hasta resolver. 7) Hotfix prioritario."

  - name: jenkins_executor_alerts
    interval: 30s
    rules:
      # ALERTA 47: Todos los executors ocupados
      - alert: JenkinsAllExecutorsBusy
        expr: jenkins_executor_busy / jenkins_executor_total > 0.9
        for: 10m
        labels:
          severity: warning
          service: jenkins-ci
          component: executors
        annotations:
          summary: "‚ö†Ô∏è Jenkins saturado - {{ $value | humanizePercentage }} executors ocupados"
          description: "{{ $value | humanizePercentage }} de executors de Jenkins est√°n ocupados (umbral: 90%). Jenkins est√° a m√°xima capacidad. Nuevos builds se quedar√°n en cola esperando. Developers experimentan delays largos. Sistema CI/CD operando al l√≠mite."
          dashboard: "http://localhost:8080/jenkins/computer"
          action: "üîç Escalar Jenkins: 1) Ver executors: Jenkins > Manage Jenkins > Nodes. 2) Aumentar executors por node. 3) Agregar nuevos agents/nodes. 4) Optimizar builds para liberar executors m√°s r√°pido. 5) Cancelar builds stuck. 6) Considerar cloud executors (AWS/GCP)."
      
      # ALERTA 48: Executor desconectado
      - alert: JenkinsExecutorOffline
        expr: jenkins_executor_offline > 0
        for: 5m
        labels:
          severity: warning
          service: jenkins-ci
          component: executors
        annotations:
          summary: "‚ö†Ô∏è Jenkins Executor offline - {{ $value }} agents no disponibles"
          description: "{{ $value }} executors/agents de Jenkins est√°n offline. Executors offline reducen capacidad de Jenkins. Builds se encolan m√°s. Puede indicar: agent crasheado, conectividad de red perdida, agent suspendido manualmente, problema de autenticaci√≥n."
          dashboard: "http://localhost:8080/jenkins/computer"
          action: "üîç Reconectar: 1) Ver agents offline en Jenkins. 2) Intentar reconectar desde UI. 3) SSH al agent y verificar proceso. 4) Reiniciar agent: 'java -jar agent.jar'. 5) Revisar conectividad de red. 6) Ver logs del agent. 7) Eliminar y re-agregar si est√° corrupto."

  - name: sonarqube_alerts
    interval: 30s
    rules:
      # ALERTA 49: SonarQube Down
      - alert: SonarQubeDown
        expr: up{job="sonarqube"} == 0
        for: 2m
        labels:
          severity: warning
          service: sonarqube
          component: quality
        annotations:
          summary: "‚ö†Ô∏è SonarQube CA√çDO - Sin an√°lisis de calidad"
          description: "SonarQube no responde. Sin SonarQube: no hay an√°lisis de calidad de c√≥digo, code coverage no se calcula, security vulnerabilities no se detectan, code smells no se reportan. Builds pueden continuar, pero sin quality gates. Deuda t√©cnica no se monitorea."
          dashboard: "http://localhost:9000/sonar"
          action: "üîç Recuperar SonarQube: 1) Ver contenedor: 'docker ps | grep sonarqube'. 2) Ver logs: 'docker logs ensurance-sonarqube-full --tail 100'. 3) Reiniciar: 'docker restart ensurance-sonarqube-full'. 4) SonarQube requiere mucha RAM, verificar memoria. 5) Acceso: http://localhost:9000/sonar."
      
      # ALERTA 50: Quality Gate fallido
      - alert: SonarQubeQualityGateFailed
        expr: sonarqube_quality_gate_status{status="ERROR"} > 0
        for: 1m
        labels:
          severity: warning
          service: sonarqube
          component: quality
        annotations:
          summary: "‚ö†Ô∏è Quality Gate FALLIDO en {{ $labels.project }} - C√≥digo no cumple est√°ndares"
          description: "El proyecto {{ $labels.project }} NO pasa el Quality Gate de SonarQube. Esto significa: demasiados bugs, security vulnerabilities detectadas, code coverage bajo, c√≥digo duplicado excesivo, o code smells cr√≠ticos. El c√≥digo necesita mejoras antes de merge/deploy."
          dashboard: "http://localhost:9000/sonar/dashboard?id={{ $labels.project }}"
          action: "üîç Mejorar calidad: 1) Ver detalles en SonarQube. 2) Priorizar security issues. 3) Fix bugs cr√≠ticos. 4) Aumentar test coverage. 5) Refactorizar code smells. 6) Eliminar c√≥digo duplicado. 7) Re-analizar despu√©s de fixes. 8) Considerar ajustar quality gate si es muy estricto."

  - name: drone_alerts
    interval: 30s
    rules:
      # ALERTA 51: Drone Server Down
      - alert: DroneServerDown
        expr: up{job="drone"} == 0
        for: 2m
        labels:
          severity: warning
          service: drone-ci
          component: server
        annotations:
          summary: "‚ö†Ô∏è Drone CI CA√çDO - Pipeline alternativo detenido"
          description: "Drone Server no responde. Drone es un sistema CI/CD alternativo/complementario a Jenkins. Si se usa: pipelines de Drone detenidos, deployments automatizados de Drone bloqueados, webhooks de Git no procesados. Si no se usa activamente, impacto menor."
          dashboard: "http://localhost:8002"
          action: "üîç Recuperar Drone: 1) Ver contenedor: 'docker ps | grep drone'. 2) Ver logs: 'docker logs ensurance-drone-full'. 3) Reiniciar: 'docker restart ensurance-drone-full'. 4) Verificar integraci√≥n con Git. 5) Acceso: http://localhost:8002."
      
      # ALERTA 52: Drone Runner Down
      - alert: DroneRunnerDown
        expr: up{job="drone-runner"} == 0
        for: 2m
        labels:
          severity: warning
          service: drone-ci
          component: runner
        annotations:
          summary: "‚ö†Ô∏è Drone Runner CA√çDO - Ejecutor de pipelines detenido"
          description: "Drone Runner no responde. El Runner ejecuta los steps de los pipelines de Drone. Sin Runner: pipelines no pueden ejecutarse, builds en cola indefinidamente, Drone Server funciona pero no puede procesar trabajo. Similar a Jenkins executors offline."
          dashboard: "http://localhost:8002"
          action: "üîç Recuperar Runner: 1) Ver contenedor: 'docker ps | grep drone-runner'. 2) Ver logs: 'docker logs ensurance-drone-runner-full'. 3) Reiniciar: 'docker restart ensurance-drone-runner-full'. 4) Verificar conectividad con Drone Server. 5) Revisar configuraci√≥n de runner."
