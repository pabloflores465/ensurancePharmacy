# ALERTAS DE APLICACIONES - Backends y Frontends
# Monitorea m칠tricas de las aplicaciones Node.js y Vue.js

groups:
  - name: application_availability_alerts
    interval: 30s
    rules:
      # ALERTA 12: Backend v5 (Pharmacy) Down
      - alert: PharmacyBackendDown
        expr: up{job="backv5-pharmacy"} == 0
        for: 1m
        labels:
          severity: critical
          service: pharmacy-backend
          component: backv5
        annotations:
          summary: "游댮 Backend Pharmacy CA칈DO - Sistema de farmacia FUERA DE L칈NEA"
          description: "춰EMERGENCIA! El backend de Pharmacy (backv5) no responde. Los usuarios NO PUEDEN: crear recetas, consultar medicamentos, procesar ventas, gestionar inventario. El sistema de farmacia est치 completamente inoperativo. Esto afecta directamente a las operaciones de farmacia y atenci칩n a pacientes."
          dashboard: "http://localhost:3103"
          action: "游뚿 ACCI칍N INMEDIATA: 1) Ver logs: 'docker logs ensurance-pharmacy-apps --tail 100'. 2) Reiniciar: 'docker restart ensurance-pharmacy-apps'. 3) Verificar DB: revisar conexi칩n a base de datos. 4) Si persiste, revisar /logs/backv5.log. 5) Notificar al equipo de desarrollo."
      
      # ALERTA 13: Backend v4 (Ensurance) Down
      - alert: EnsuranceBackendDown
        expr: up{job="backv4-ensurance"} == 0
        for: 1m
        labels:
          severity: critical
          service: ensurance-backend
          component: backv4
        annotations:
          summary: "游댮 Backend Ensurance CA칈DO - Sistema de seguros FUERA DE L칈NEA"
          description: "춰EMERGENCIA! El backend de Ensurance (backv4) no responde. Los usuarios NO PUEDEN: gestionar p칩lizas de seguro, procesar reclamos, consultar coberturas, validar asegurados. El m칩dulo de seguros est치 ca칤do, bloqueando operaciones cr칤ticas de autorizaciones y pagos."
          dashboard: "http://localhost:3102"
          action: "游뚿 ACCI칍N INMEDIATA: 1) Ver logs: 'docker logs ensurance-pharmacy-apps --tail 100'. 2) Reiniciar: 'docker restart ensurance-pharmacy-apps'. 3) Revisar puerto 3102. 4) Verificar DB SQLite: databases/ensurance/. 5) Escalar a desarrollo si no se recupera."
      
      # ALERTA 14: Frontend Ensurance Down
      - alert: EnsuranceFrontendDown
        expr: up{job="ensurance-frontend"} == 0
        for: 2m
        labels:
          severity: critical
          service: ensurance-frontend
          component: vue-app
        annotations:
          summary: "游댮 Frontend Ensurance CA칈DO - Interfaz de seguros inaccesible"
          description: "춰CR칈TICO! El frontend de Ensurance (Vue.js) est치 ca칤do. Los usuarios no pueden acceder a la aplicaci칩n web de seguros. Pantalla en blanco o error 502/503. Aunque el backend funcione, nadie puede usar el sistema. Impacto total en operaciones de seguros."
          dashboard: "http://localhost:3100"
          action: "游뚿 URGENTE: 1) Verificar contenedor: 'docker ps | grep ensurance'. 2) Ver logs: 'docker logs ensurance-pharmacy-apps'. 3) Reiniciar: 'docker restart ensurance-pharmacy-apps'. 4) Probar acceso: 'curl http://localhost:3100'. 5) Revisar configuraci칩n de Nginx si aplica."
      
      # ALERTA 15: Frontend Pharmacy Down
      - alert: PharmacyFrontendDown
        expr: up{job="pharmacy-frontend"} == 0
        for: 2m
        labels:
          severity: critical
          service: pharmacy-frontend
          component: vue-app
        annotations:
          summary: "游댮 Frontend Pharmacy CA칈DO - Interfaz de farmacia inaccesible"
          description: "춰CR칈TICO! El frontend de Pharmacy (Vue.js) est치 ca칤do. Los usuarios no pueden acceder a la aplicaci칩n web de farmacia. Sin acceso a la interfaz, no pueden procesar recetas, ventas, o consultar inventario. Sistema completamente bloqueado para usuarios finales."
          dashboard: "http://localhost:3101"
          action: "游뚿 URGENTE: 1) Verificar contenedor: 'docker ps | grep pharmacy'. 2) Ver logs: 'docker logs ensurance-pharmacy-apps'. 3) Reiniciar: 'docker restart ensurance-pharmacy-apps'. 4) Probar acceso: 'curl http://localhost:3101'. 5) Verificar que Vue.js compil칩 correctamente."

  - name: application_performance_alerts
    interval: 30s
    rules:
      # ALERTA 16: Alta memoria en Node.js (Backend v5)
      - alert: HighNodeMemoryBackendV5
        expr: nodejs_heap_size_used_bytes{job="backv5-pharmacy"} / nodejs_heap_size_total_bytes > 0.85
        for: 5m
        labels:
          severity: warning
          service: pharmacy-backend
          component: nodejs
        annotations:
          summary: "丘멆잺 Memoria heap alta en Backend Pharmacy - Riesgo de crash"
          description: "El backend Pharmacy (Node.js) est치 usando {{ $value | humanizePercentage }} de su heap memory (umbral: 85%). La memoria JavaScript est치 casi llena. Si alcanza 100%, Node.js lanzar치 'JavaScript heap out of memory' y el proceso crashear치, dejando el sistema de farmacia fuera de l칤nea. Posible memory leak o carga excesiva."
          dashboard: "http://localhost:9470"
          action: "游댌 Investigar: 1) Ver m칠tricas Node.js en puerto 9470. 2) Heap dump si es posible. 3) Revisar logs por memory leaks. 4) Reiniciar temporalmente: 'docker restart ensurance-pharmacy-apps'. 5) Aumentar --max-old-space-size en NODE_OPTIONS. 6) Optimizar c칩digo si hay leaks."
      
      # ALERTA 17: Alta memoria en Node.js (Backend v4)
      - alert: HighNodeMemoryBackendV4
        expr: nodejs_heap_size_used_bytes{job="backv4-ensurance"} / nodejs_heap_size_total_bytes > 0.85
        for: 5m
        labels:
          severity: warning
          service: ensurance-backend
          component: nodejs
        annotations:
          summary: "丘멆잺 Memoria heap alta en Backend Ensurance - Riesgo de crash"
          description: "El backend Ensurance (Node.js) est치 usando {{ $value | humanizePercentage }} de su heap memory (umbral: 85%). La memoria JavaScript est치 casi llena. Si alcanza 100%, Node.js lanzar치 'JavaScript heap out of memory' y el proceso crashear치, dejando el sistema de seguros fuera de l칤nea. Posible memory leak o carga excesiva."
          dashboard: "http://localhost:9471"
          action: "游댌 Investigar: 1) Ver m칠tricas Node.js en puerto 9471. 2) Heap dump si es posible. 3) Revisar logs por memory leaks. 4) Reiniciar temporalmente: 'docker restart ensurance-pharmacy-apps'. 5) Aumentar --max-old-space-size en NODE_OPTIONS. 6) Optimizar c칩digo si hay leaks."
      
      # ALERTA 18: Event Loop Lag alto
      - alert: HighEventLoopLag
        expr: nodejs_eventloop_lag_seconds > 0.5
        for: 3m
        labels:
          severity: warning
          service: backend
          component: nodejs
        annotations:
          summary: "丘멆잺 Event Loop bloqueado en {{ $labels.job }} - Aplicaci칩n lenta"
          description: "El Event Loop de Node.js en {{ $labels.job }} tiene un lag de {{ $value | humanize }} segundos (umbral: 0.5s). Esto significa que hay operaciones s칤ncronas bloqueando el hilo principal. Los usuarios experimentan lentitud extrema en todas las operaciones. Cada request tarda segundos en responder."
          dashboard: "http://localhost:9090"
          action: "游댌 Identificar bloqueos: 1) Revisar logs por operaciones lentas. 2) Buscar: lecturas de archivos s칤ncronas, loops pesados, c치lculos complejos. 3) Usar async/await correctamente. 4) Implementar workers para operaciones pesadas. 5) Perfilar c칩digo con clinic.js o --inspect."
      
      # ALERTA 19: Garbage Collection frecuente
      - alert: FrequentGarbageCollection
        expr: rate(nodejs_gc_duration_seconds_count[5m]) > 10
        for: 5m
        labels:
          severity: warning
          service: backend
          component: nodejs
        annotations:
          summary: "丘멆잺 Garbage Collection excesivo en {{ $labels.job }} - Degradaci칩n de performance"
          description: "El Garbage Collector de Node.js en {{ $labels.job }} se est치 ejecutando {{ $value | humanize }} veces por segundo (umbral: 10/s). GC demasiado frecuente indica que la aplicaci칩n est치 creando y destruyendo muchos objetos. Esto causa pausas constantes (stop-the-world) y degrada el rendimiento significativamente."
          dashboard: "http://localhost:9090"
          action: "游댌 Optimizar memoria: 1) Revisar uso de objetos temporales. 2) Implementar object pooling. 3) Reducir creaci칩n de closures en loops. 4) Aumentar heap si es necesario: NODE_OPTIONS='--max-old-space-size=2048'. 5) Perfilar con heap snapshots."

  - name: application_errors_alerts
    interval: 30s
    rules:
      # ALERTA 20: Tasa de errores HTTP alta (si las apps exponen esta m칠trica)
      - alert: HighHTTPErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.05
        for: 2m
        labels:
          severity: warning
          service: application
          component: http
        annotations:
          summary: "丘멆잺 Errores HTTP 5xx altos en {{ $labels.job }} - Usuarios afectados"
          description: "La aplicaci칩n {{ $labels.job }} est치 generando {{ $value | humanizePercentage }} de errores HTTP 5xx (umbral: 5%). M치s del 5% de las peticiones est치n fallando con errores de servidor. Esto afecta directamente a los usuarios - funcionalidades no funcionan, datos no se guardan, operaciones fallan. Posibles causas: bugs en c칩digo, DB ca칤da, timeout en servicios externos."
          dashboard: "http://localhost:9090"
          action: "游뚿 Investigar urgente: 1) Ver logs: 'docker logs ensurance-pharmacy-apps --tail 200 | grep ERROR'. 2) Identificar endpoint que falla. 3) Revisar stack traces. 4) Verificar conexi칩n a DB. 5) Revisar servicios externos. 6) Rollback si es deploy reciente."
