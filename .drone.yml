kind: pipeline
type: docker
name: ensurance-pharmacy-pipeline
platform:
  os: linux
  arch: arm64

trigger:
  event:
    - push
  branch:
    - main
    - master
    - dev
    - qa

clone:
  disable: false

environment:
  EMAIL_TO: pablopolis2016@gmail.com,jflores@unis.edu.gt
  SONAR_HOST_URL: http://localhost:9000/sonar

steps:
  - name: unit-tests
    image: maven:3.9-eclipse-temurin-23
    environment:
      MAVEN_OPTS: -Dmaven.repo.local=/tmp/.m2
    commands:
      - echo "Running unit tests and generating coverage reports..."
      - mvn -B clean test jacoco:report -f backv4/pom.xml
      - mvn -B clean test jacoco:report -f backv5/pom.xml
    volumes:
      - name: maven-cache
        path: /tmp/.m2
    when:
      branch:
        - main
        - master
        - dev
        - qa

  - name: sonarqube-ensurance-backend-analysis-dev
    image: sonarsource/sonar-scanner-cli:latest
    network_mode: host
    environment:
      SONAR_TOKEN:
        from_secret: ensurance_back_dev
    commands:
      - echo "SonarQube Ensurance Backend analysis for DEV environment"
      - sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.token=${SONAR_TOKEN} -Dsonar.projectKey=ensurance-backend-dev -Dsonar.projectName="Ensurance Backend DEV" -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} -Dsonar.sources=backv4/src/main -Dsonar.tests=backv4/src/test -Dsonar.java.binaries=backv4/target/classes -Dsonar.coverage.jacoco.xmlReportPaths=backv4/target/site/jacoco/jacoco.xml -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300
    when:
      branch:
        - dev

  - name: sonarqube-ensurance-frontend-analysis-dev
    image: sonarsource/sonar-scanner-cli:latest
    network_mode: host
    environment:
      SONAR_TOKEN:
        from_secret: ensurance_front_dev
    commands:
      - echo "SonarQube Ensurance Frontend analysis for DEV environment"
      - cd ensurance && npm ci && npm run test:coverage || true && cd ..
      - sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.token=${SONAR_TOKEN} -Dsonar.projectKey=ensurance-frontend-dev -Dsonar.projectName="Ensurance Frontend DEV" -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} -Dsonar.sources=ensurance/src -Dsonar.tests=ensurance/tests -Dsonar.javascript.lcov.reportPaths=ensurance/coverage/lcov.info -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300
    when:
      branch:
        - dev

  - name: sonarqube-pharmacy-backend-analysis-dev
    image: sonarsource/sonar-scanner-cli:latest
    network_mode: host
    environment:
      SONAR_TOKEN:
        from_secret: pharmacy_back_dev
    commands:
      - echo "SonarQube Pharmacy Backend analysis for DEV environment"
      - sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.token=${SONAR_TOKEN} -Dsonar.projectKey=pharmacy-backend-dev -Dsonar.projectName="Pharmacy Backend DEV" -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} -Dsonar.sources=backv5/src/main -Dsonar.tests=backv5/src/test -Dsonar.java.binaries=backv5/target/classes -Dsonar.coverage.jacoco.xmlReportPaths=backv5/target/site/jacoco/jacoco.xml -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300
    when:
      branch:
        - dev

  - name: sonarqube-pharmacy-frontend-analysis-dev
    image: sonarsource/sonar-scanner-cli:latest
    network_mode: host
    environment:
      SONAR_TOKEN:
        from_secret: pharmacy_front_dev
    commands:
      - echo "SonarQube Pharmacy Frontend analysis for DEV environment"
      - cd pharmacy && npm ci && npm run test:unit:coverage || true && cd ..
      - sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.token=${SONAR_TOKEN} -Dsonar.projectKey=pharmacy-frontend-dev -Dsonar.projectName="Pharmacy Frontend DEV" -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} -Dsonar.sources=pharmacy/src -Dsonar.tests=pharmacy/tests -Dsonar.javascript.lcov.reportPaths=pharmacy/coverage/lcov.info -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300
    when:
      branch:
        - dev

  - name: sonarqube-ensurance-backend-analysis-qa
    image: sonarsource/sonar-scanner-cli:latest
    network_mode: host
    environment:
      SONAR_TOKEN:
        from_secret: ensurance_back_qa
    commands:
      - echo "SonarQube Ensurance Backend analysis for QA environment"
      - sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.token=${SONAR_TOKEN} -Dsonar.projectKey=ensurance-backend-qa -Dsonar.projectName="Ensurance Backend QA" -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} -Dsonar.sources=backv4/src/main -Dsonar.tests=backv4/src/test -Dsonar.java.binaries=backv4/target/classes -Dsonar.coverage.jacoco.xmlReportPaths=backv4/target/site/jacoco/jacoco.xml -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300
    when:
      branch:
        - qa

  - name: sonarqube-ensurance-frontend-analysis-qa
    image: sonarsource/sonar-scanner-cli:latest
    network_mode: host
    environment:
      SONAR_TOKEN:
        from_secret: ensurance_front_qa
    commands:
      - echo "SonarQube Ensurance Frontend analysis for QA environment"
      - cd ensurance && npm ci && npm run test:coverage || true && cd ..
      - sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.token=${SONAR_TOKEN} -Dsonar.projectKey=ensurance-frontend-qa -Dsonar.projectName="Ensurance Frontend QA" -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} -Dsonar.sources=ensurance/src -Dsonar.tests=ensurance/tests -Dsonar.javascript.lcov.reportPaths=ensurance/coverage/lcov.info -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300
    when:
      branch:
        - qa

  - name: sonarqube-pharmacy-backend-analysis-qa
    image: sonarsource/sonar-scanner-cli:latest
    network_mode: host
    environment:
      SONAR_TOKEN:
        from_secret: pharmacy_back_qa
    commands:
      - echo "SonarQube Pharmacy Backend analysis for QA environment"
      - sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.token=${SONAR_TOKEN} -Dsonar.projectKey=pharmacy-backend-qa -Dsonar.projectName="Pharmacy Backend QA" -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} -Dsonar.sources=backv5/src/main -Dsonar.tests=backv5/src/test -Dsonar.java.binaries=backv5/target/classes -Dsonar.coverage.jacoco.xmlReportPaths=backv5/target/site/jacoco/jacoco.xml -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300
    when:
      branch:
        - qa

  - name: sonarqube-pharmacy-frontend-analysis-qa
    image: sonarsource/sonar-scanner-cli:latest
    network_mode: host
    environment:
      SONAR_TOKEN:
        from_secret: pharmacy_front_qa
    commands:
      - echo "SonarQube Pharmacy Frontend analysis for QA environment"
      - cd pharmacy && npm ci && npm run test:unit:coverage || true && cd ..
      - sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.token=${SONAR_TOKEN} -Dsonar.projectKey=pharmacy-frontend-qa -Dsonar.projectName="Pharmacy Frontend QA" -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} -Dsonar.sources=pharmacy/src -Dsonar.tests=pharmacy/tests -Dsonar.javascript.lcov.reportPaths=pharmacy/coverage/lcov.info -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300
    when:
      branch:
        - qa

  - name: sonarqube-ensurance-backend-analysis-main
    image: sonarsource/sonar-scanner-cli:latest
    network_mode: host
    environment:
      SONAR_TOKEN:
        from_secret: ensurance_back_main
    commands:
      - echo "SonarQube Ensurance Backend analysis for MAIN environment"
      - sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.token=${SONAR_TOKEN} -Dsonar.projectKey=ensurance-backend-main -Dsonar.projectName="Ensurance Backend MAIN" -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} -Dsonar.sources=backv4/src/main -Dsonar.tests=backv4/src/test -Dsonar.java.binaries=backv4/target/classes -Dsonar.coverage.jacoco.xmlReportPaths=backv4/target/site/jacoco/jacoco.xml -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300
    when:
      branch:
        - main
        - master

  - name: sonarqube-ensurance-frontend-analysis-main
    image: sonarsource/sonar-scanner-cli:latest
    network_mode: host
    environment:
      SONAR_TOKEN:
        from_secret: ensurance_front_main
    commands:
      - echo "SonarQube Ensurance Frontend analysis for MAIN environment"
      - cd ensurance && npm ci && npm run test:coverage || true && cd ..
      - sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.token=${SONAR_TOKEN} -Dsonar.projectKey=ensurance-frontend-main -Dsonar.projectName="Ensurance Frontend MAIN" -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} -Dsonar.sources=ensurance/src -Dsonar.tests=ensurance/tests -Dsonar.javascript.lcov.reportPaths=ensurance/coverage/lcov.info -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300
    when:
      branch:
        - main
        - master

  - name: sonarqube-pharmacy-backend-analysis-main
    image: sonarsource/sonar-scanner-cli:latest
    network_mode: host
    environment:
      SONAR_TOKEN:
        from_secret: pharmacy_back_main
    commands:
      - echo "SonarQube Pharmacy Backend analysis for MAIN environment"
      - sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.token=${SONAR_TOKEN} -Dsonar.projectKey=pharmacy-backend-main -Dsonar.projectName="Pharmacy Backend MAIN" -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} -Dsonar.sources=backv5/src/main -Dsonar.tests=backv5/src/test -Dsonar.java.binaries=backv5/target/classes -Dsonar.coverage.jacoco.xmlReportPaths=backv5/target/site/jacoco/jacoco.xml -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300
    when:
      branch:
        - main
        - master

  - name: sonarqube-pharmacy-frontend-analysis-main
    image: sonarsource/sonar-scanner-cli:latest
    network_mode: host
    environment:
      SONAR_TOKEN:
        from_secret: pharmacy_front_main
    commands:
      - echo "SonarQube Pharmacy Frontend analysis for MAIN environment"
      - cd pharmacy && npm ci && npm run test:unit:coverage || true && cd ..
      - sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.token=${SONAR_TOKEN} -Dsonar.projectKey=pharmacy-frontend-main -Dsonar.projectName="Pharmacy Frontend MAIN" -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} -Dsonar.sources=pharmacy/src -Dsonar.tests=pharmacy/tests -Dsonar.javascript.lcov.reportPaths=pharmacy/coverage/lcov.info -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300
    when:
      branch:
        - main
        - master

  - name: deploy-dev
    image: docker:27-cli
    environment:
      ENVIRONMENT: dev
    commands:
      - echo "Deploy DEV Environment (puertos 3000-3003)"
      - echo dev > .environment
      - docker compose -f docker-compose.dev.yml down || true
      - ENVIRONMENT=dev docker compose -f docker-compose.dev.yml up -d --build
      - sleep 30
      - docker compose -f docker-compose.dev.yml ps
      - echo "DEV desplegado en:"
      - 'echo "   - Ensurance Frontend: http://localhost:3000"'
      - 'echo "   - Pharmacy Frontend: http://localhost:3001"'
      - 'echo "   - Ensurance Backend: http://localhost:3002/api"'
      - 'echo "   - Pharmacy Backend: http://localhost:3003/api2"'
    volumes:
      - name: docker-sock
        path: /var/run/docker.sock
    when:
      event:
        - push
      branch:
        - dev

  - name: deploy-qa
    image: docker:27-cli
    environment:
      ENVIRONMENT: qa
    commands:
      - echo "Deploy QA Environment (puertos 4000-4003)"
      - echo qa > .environment
      - docker compose -f docker-compose.qa.yml down || true
      - ENVIRONMENT=qa docker compose -f docker-compose.qa.yml up -d --build
      - sleep 30
      - docker compose -f docker-compose.qa.yml ps
      - echo "QA desplegado en:"
      - 'echo "   - Ensurance Frontend: http://localhost:4000"'
      - 'echo "   - Pharmacy Frontend: http://localhost:4001"'
      - 'echo "   - Ensurance Backend: http://localhost:4002/api"'
      - 'echo "   - Pharmacy Backend: http://localhost:4003/api2"'
    volumes:
      - name: docker-sock
        path: /var/run/docker.sock
    when:
      event:
        - push
      branch:
        - qa

  - name: deploy-main
    image: docker:27-cli
    environment:
      ENVIRONMENT: main
    commands:
      - echo "Deploy MAIN Environment (puertos 5000-5003)"
      - echo main > .environment
      - docker compose -f docker-compose.main.yml down || true
      - ENVIRONMENT=main docker compose -f docker-compose.main.yml up -d --build
      - sleep 30
      - docker compose -f docker-compose.main.yml ps
      - echo "MAIN desplegado en:"
      - 'echo "   - Ensurance Frontend: http://localhost:5000"'
      - 'echo "   - Pharmacy Frontend: http://localhost:5001"'
      - 'echo "   - Ensurance Backend: http://localhost:5002/api"'
      - 'echo "   - Pharmacy Backend: http://localhost:5003/api2"'
    volumes:
      - name: docker-sock
        path: /var/run/docker.sock
    when:
      event:
        - push
      branch:
        - main
        - master

  # Verify only the environment that was deployed to avoid pending dependencies
  - name: verify-deployment-dev
    image: curlimages/curl:latest
    commands:
      - |
        echo 'Verificando deployment en ambiente: DEV'
        for i in 1 2 3 4 5; do
          if curl -fsS http://localhost:3000 > /dev/null; then echo 'Frontend DEV OK'; break; else echo "Frontend intento $i falló"; sleep 5; fi
        done
        for i in 1 2 3 4 5; do
          if curl -fsS http://localhost:3002/api > /dev/null; then echo 'Backend DEV OK'; break; else echo "Backend intento $i falló"; sleep 5; fi
        done
    when:
      event:
        - push
      branch:
        - dev
    depends_on:
      - deploy-dev

  - name: verify-deployment-qa
    image: curlimages/curl:latest
    commands:
      - |
        echo 'Verificando deployment en ambiente: QA'
        for i in 1 2 3 4 5; do
          if curl -fsS http://localhost:4000 > /dev/null; then echo 'Frontend QA OK'; break; else echo "Frontend intento $i falló"; sleep 5; fi
        done
        for i in 1 2 3 4 5; do
          if curl -fsS http://localhost:4002/api > /dev/null; then echo 'Backend QA OK'; break; else echo "Backend intento $i falló"; sleep 5; fi
        done
    when:
      event:
        - push
      branch:
        - qa
    depends_on:
      - deploy-qa

  - name: verify-deployment-main
    image: curlimages/curl:latest
    commands:
      - |
        echo 'Verificando deployment en ambiente: MAIN'
        for i in 1 2 3 4 5; do
          if curl -fsS http://localhost:5000 > /dev/null; then echo 'Frontend MAIN OK'; break; else echo "Frontend intento $i falló"; sleep 5; fi
        done
        for i in 1 2 3 4 5; do
          if curl -fsS http://localhost:5002/api > /dev/null; then echo 'Backend MAIN OK'; break; else echo "Backend intento $i falló"; sleep 5; fi
        done
    when:
      event:
        - push
      branch:
        - main
        - master
    depends_on:
      - deploy-main

  - name: email-notification
    image: drillster/drone-email
    settings:
      host: smtp.gmail.com
      port: 587
      username:
        from_secret: email_username
      password:
        from_secret: email_password
      from: drone@ensurance-pharmacy.com
      to:
        - pablopolis2016@gmail.com
        - jflores@unis.edu.gt
      subject: "{{#success build.status}}Deploy exitoso: {{repo.name}} #{{build.number}} [{{build.branch}}]{{else}}Pipeline fallido: {{repo.name}} #{{build.number}} [{{build.branch}}]{{/success}}"
      body: "{{#success build.status}}Deploy completado exitosamente en rama {{build.branch}}.\n\nQuality Gate: APROBADO\nTests: PASADOS\nDeploy: EXITOSO\n\nDetalles: {{build.link}}\n\nServicios disponibles:\n{{#equal build.branch \"dev\"}}- Ensurance Frontend: http://localhost:3000\n- Pharmacy Frontend: http://localhost:3001\n- Ensurance Backend: http://localhost:3002/api\n- Pharmacy Backend: http://localhost:3003/api2\n{{/equal}}{{#equal build.branch \"qa\"}}- Ensurance Frontend: http://localhost:4000\n- Pharmacy Frontend: http://localhost:4001\n- Ensurance Backend: http://localhost:4002/api\n- Pharmacy Backend: http://localhost:4003/api2\n{{/equal}}{{#equal build.branch \"main\"}}- Ensurance Frontend: http://localhost:5000\n- Pharmacy Frontend: http://localhost:5001\n- Ensurance Backend: http://localhost:5002/api\n- Pharmacy Backend: http://localhost:5003/api2\n{{/equal}}{{else}}Pipeline falló en rama {{build.branch}}.\n\nDetalle: {{build.link}}\n\nPara diagnosticar:\n1. Revisar logs en Drone UI\n2. Verificar Quality Gate en SonarQube\n3. Revisar estado de contenedores{{/success}}"
    when:
      status:
        - success
        - failure

volumes:
  - name: maven-cache
    host:
      path: /tmp/drone-maven-cache
  - name: node-cache
    host:
      path: /tmp/drone-node-cache
  - name: docker-sock
    host:
      path: /var/run/docker.sock
