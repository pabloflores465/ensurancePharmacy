kind: pipeline
type: docker
name: ensurance-pharmacy-pipeline
platform:
  os: linux
  arch: arm64

workspace:
  base: /drone
  path: src

trigger:
  event: [ push ]
  branch: [ main, master, dev, qa ]

clone:
  depth: 50


steps:
  - name: unit-tests
    image: maven:3.9-eclipse-temurin-23
    environment:
      MAVEN_OPTS: -Dmaven.repo.local=/tmp/.m2
    commands:
      - echo "Running unit tests and generating coverage reports..."
      - mvn -B clean test jacoco:report -f backv4/pom.xml
      - mvn -B clean test jacoco:report -f backv5/pom.xml
    volumes:
      - name: maven-cache
        path: /tmp/.m2
    when:
      branch:
        - main
        - master
        - dev
        - qa

  - name: wait-for-sonar
    image: curlimages/curl:8.9.1
    depends_on: [ unit-tests ]
    commands:
      - |
        set -eu
        SONAR_HOST_URL="${SONAR_HOST_URL:-http://localhost:9000/sonar}"
        echo "Esperando SonarQube en $SONAR_HOST_URL ..."
        for i in $(seq 1 60); do
          if curl -fsS "$SONAR_HOST_URL/api/system/status" | grep -q '"status":"UP"'; then
            echo "SonarQube listo (status=UP)"; exit 0
          fi
          sleep 5
        done
        echo "Timeout esperando SonarQube"; exit 8

  - name: sonarqube-ensurance-backend-analysis-dev
    image: sonarsource/sonar-scanner-cli:latest
    environment:
      SONAR_TOKEN:
        from_secret: ENSURANCE_BACK_DEV
    depends_on: [ wait-for-sonar ]
    commands:
      - |
        set -eu
        echo "SonarQube Ensurance Backend analysis for DEV environment"
        SONAR_HOST_URL="${SONAR_HOST_URL:-http://localhost:9000/sonar}"
        test -n "${SONAR_TOKEN:-}" || { echo "Falta SONAR_TOKEN"; exit 2; }
        sonar-scanner \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.projectKey=ensurance-backend-dev \
          -Dsonar.projectName="Ensurance Backend DEV" \
          -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} \
          -Dsonar.sources=backv4/src/main \
          -Dsonar.tests=backv4/src/test \
          -Dsonar.java.binaries=backv4/target/classes \
          -Dsonar.coverage.jacoco.xmlReportPaths=backv4/target/site/jacoco/jacoco.xml \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600
    when:
      branch:
        - dev

  - name: sonarqube-ensurance-frontend-analysis-dev
    image: sonarsource/sonar-scanner-cli:latest
    environment:
      SONAR_TOKEN:
        from_secret: ENSURANCE_FRONT_DEV
    depends_on: [ wait-for-sonar ]
    commands:
      - |
        set -eu
        echo "SonarQube Ensurance Frontend analysis for DEV environment"
        SONAR_HOST_URL="${SONAR_HOST_URL:-http://localhost:9000/sonar}"
        cd ensurance && npm ci && npm run test:coverage || true && cd ..
        sonar-scanner \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.projectKey=ensurance-frontend-dev \
          -Dsonar.projectName="Ensurance Frontend DEV" \
          -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} \
          -Dsonar.sources=ensurance/src \
          -Dsonar.tests=ensurance/tests \
          -Dsonar.javascript.lcov.reportPaths=ensurance/coverage/lcov.info \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600
    when:
      branch:
        - dev

  - name: sonarqube-pharmacy-backend-analysis-dev
    image: sonarsource/sonar-scanner-cli:latest
    environment:
      SONAR_TOKEN:
        from_secret: PHARMACY_BACK_DEV
    depends_on: [ wait-for-sonar ]
    commands:
      - |
        set -eu
        echo "SonarQube Pharmacy Backend analysis for DEV environment"
        SONAR_HOST_URL="${SONAR_HOST_URL:-http://localhost:9000/sonar}"
        sonar-scanner \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.projectKey=pharmacy-backend-dev \
          -Dsonar.projectName="Pharmacy Backend DEV" \
          -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} \
          -Dsonar.sources=backv5/src/main \
          -Dsonar.tests=backv5/src/test \
          -Dsonar.java.binaries=backv5/target/classes \
          -Dsonar.coverage.jacoco.xmlReportPaths=backv5/target/site/jacoco/jacoco.xml \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600
    when:
      branch:
        - dev

  - name: sonarqube-pharmacy-frontend-analysis-dev
    image: sonarsource/sonar-scanner-cli:latest
    environment:
      SONAR_TOKEN:
        from_secret: PHARMACY_FRONT_DEV
    depends_on: [ wait-for-sonar ]
    commands:
      - |
        set -eu
        echo "SonarQube Pharmacy Frontend analysis for DEV environment"
        SONAR_HOST_URL="${SONAR_HOST_URL:-http://localhost:9000/sonar}"
        cd pharmacy && npm ci && npm run test:unit:coverage || true && cd ..
        sonar-scanner \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.projectKey=pharmacy-frontend-dev \
          -Dsonar.projectName="Pharmacy Frontend DEV" \
          -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} \
          -Dsonar.sources=pharmacy/src \
          -Dsonar.tests=pharmacy/tests \
          -Dsonar.javascript.lcov.reportPaths=pharmacy/coverage/lcov.info \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600
    when:
      branch:
        - dev

  - name: sonarqube-ensurance-backend-analysis-qa
    image: sonarsource/sonar-scanner-cli:latest
    environment:
      SONAR_TOKEN:
        from_secret: ENSURANCE_BACK_QA
    depends_on: [ wait-for-sonar ]
    commands:
      - |
        set -eu
        echo "SonarQube Ensurance Backend analysis for QA environment"
        SONAR_HOST_URL="${SONAR_HOST_URL:-http://localhost:9000/sonar}"
        sonar-scanner \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.projectKey=ensurance-backend-qa \
          -Dsonar.projectName="Ensurance Backend QA" \
          -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} \
          -Dsonar.sources=backv4/src/main \
          -Dsonar.tests=backv4/src/test \
          -Dsonar.java.binaries=backv4/target/classes \
          -Dsonar.coverage.jacoco.xmlReportPaths=backv4/target/site/jacoco/jacoco.xml \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600
    when:
      branch:
        - qa

  - name: sonarqube-ensurance-frontend-analysis-qa
    image: sonarsource/sonar-scanner-cli:latest
    environment:
      SONAR_TOKEN:
        from_secret: ENSURANCE_FRONT_QA
    depends_on: [ wait-for-sonar ]
    commands:
      - |
        set -eu
        echo "SonarQube Ensurance Frontend analysis for QA environment"
        SONAR_HOST_URL="${SONAR_HOST_URL:-http://localhost:9000/sonar}"
        cd ensurance && npm ci && npm run test:coverage || true && cd ..
        sonar-scanner \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.projectKey=ensurance-frontend-qa \
          -Dsonar.projectName="Ensurance Frontend QA" \
          -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} \
          -Dsonar.sources=ensurance/src \
          -Dsonar.tests=ensurance/tests \
          -Dsonar.javascript.lcov.reportPaths=ensurance/coverage/lcov.info \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600
    when:
      branch:
        - qa

  - name: sonarqube-pharmacy-backend-analysis-qa
    image: sonarsource/sonar-scanner-cli:latest
    environment:
      SONAR_TOKEN:
        from_secret: PHARMACY_BACK_QA
    depends_on: [ wait-for-sonar ]
    commands:
      - |
        set -eu
        echo "SonarQube Pharmacy Backend analysis for QA environment"
        SONAR_HOST_URL="${SONAR_HOST_URL:-http://localhost:9000/sonar}"
        sonar-scanner \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.projectKey=pharmacy-backend-qa \
          -Dsonar.projectName="Pharmacy Backend QA" \
          -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} \
          -Dsonar.sources=backv5/src/main \
          -Dsonar.tests=backv5/src/test \
          -Dsonar.java.binaries=backv5/target/classes \
          -Dsonar.coverage.jacoco.xmlReportPaths=backv5/target/site/jacoco/jacoco.xml \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600
    when:
      branch:
        - qa

  - name: sonarqube-pharmacy-frontend-analysis-qa
    image: sonarsource/sonar-scanner-cli:latest
    environment:
      SONAR_TOKEN:
        from_secret: PHARMACY_FRONT_QA
    depends_on: [ wait-for-sonar ]
    commands:
      - |
        set -eu
        echo "SonarQube Pharmacy Frontend analysis for QA environment"
        SONAR_HOST_URL="${SONAR_HOST_URL:-http://localhost:9000/sonar}"
        cd pharmacy && npm ci && npm run test:unit:coverage || true && cd ..
        sonar-scanner \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.projectKey=pharmacy-frontend-qa \
          -Dsonar.projectName="Pharmacy Frontend QA" \
          -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} \
          -Dsonar.sources=pharmacy/src \
          -Dsonar.tests=pharmacy/tests \
          -Dsonar.javascript.lcov.reportPaths=pharmacy/coverage/lcov.info \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600
    when:
      branch:
        - qa

  - name: sonarqube-ensurance-backend-analysis-main
    image: sonarsource/sonar-scanner-cli:latest
    environment:
      SONAR_TOKEN:
        from_secret: ENSURANCE_BACK_MAIN
    depends_on: [ wait-for-sonar ]
    commands:
      - |
        set -eu
        echo "SonarQube Ensurance Backend analysis for MAIN environment"
        SONAR_HOST_URL="${SONAR_HOST_URL:-http://localhost:9000/sonar}"
        sonar-scanner \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.projectKey=ensurance-backend-main \
          -Dsonar.projectName="Ensurance Backend MAIN" \
          -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} \
          -Dsonar.sources=backv4/src/main \
          -Dsonar.tests=backv4/src/test \
          -Dsonar.java.binaries=backv4/target/classes \
          -Dsonar.coverage.jacoco.xmlReportPaths=backv4/target/site/jacoco/jacoco.xml \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600
    when:
      branch:
        - main
        - master

  - name: sonarqube-ensurance-frontend-analysis-main
    image: sonarsource/sonar-scanner-cli:latest
    environment:
      SONAR_TOKEN:
        from_secret: ENSURANCE_FRONT_MAIN
    depends_on: [ wait-for-sonar ]
    commands:
      - |
        set -eu
        echo "SonarQube Ensurance Frontend analysis for MAIN environment"
        SONAR_HOST_URL="${SONAR_HOST_URL:-http://localhost:9000/sonar}"
        cd ensurance && npm ci && npm run test:coverage || true && cd ..
        sonar-scanner \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.projectKey=ensurance-frontend-main \
          -Dsonar.projectName="Ensurance Frontend MAIN" \
          -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} \
          -Dsonar.sources=ensurance/src \
          -Dsonar.tests=ensurance/tests \
          -Dsonar.javascript.lcov.reportPaths=ensurance/coverage/lcov.info \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600
    when:
      branch:
        - main
        - master

  - name: sonarqube-pharmacy-backend-analysis-main
    image: sonarsource/sonar-scanner-cli:latest
    environment:
      SONAR_TOKEN:
        from_secret: PHARMACY_BACK_MAIN
    depends_on: [ wait-for-sonar ]
    commands:
      - |
        set -eu
        echo "SonarQube Pharmacy Backend analysis for MAIN environment"
        SONAR_HOST_URL="${SONAR_HOST_URL:-http://localhost:9000/sonar}"
        sonar-scanner \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.projectKey=pharmacy-backend-main \
          -Dsonar.projectName="Pharmacy Backend MAIN" \
          -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} \
          -Dsonar.sources=backv5/src/main \
          -Dsonar.tests=backv5/src/test \
          -Dsonar.java.binaries=backv5/target/classes \
          -Dsonar.coverage.jacoco.xmlReportPaths=backv5/target/site/jacoco/jacoco.xml \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600
    when:
      branch:
        - main
        - master

  - name: sonarqube-pharmacy-frontend-analysis-main
    image: sonarsource/sonar-scanner-cli:latest
    environment:
      SONAR_TOKEN:
        from_secret: PHARMACY_FRONT_MAIN
    depends_on: [ wait-for-sonar ]
    commands:
      - |
        set -eu
        echo "SonarQube Pharmacy Frontend analysis for MAIN environment"
        SONAR_HOST_URL="${SONAR_HOST_URL:-http://localhost:9000/sonar}"
        cd pharmacy && npm ci && npm run test:unit:coverage || true && cd ..
        sonar-scanner \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.projectKey=pharmacy-frontend-main \
          -Dsonar.projectName="Pharmacy Frontend MAIN" \
          -Dsonar.projectVersion=${DRONE_BUILD_NUMBER} \
          -Dsonar.sources=pharmacy/src \
          -Dsonar.tests=pharmacy/tests \
          -Dsonar.javascript.lcov.reportPaths=pharmacy/coverage/lcov.info \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600
    when:
      branch:
        - main
        - master

  - name: deploy-dev
    image: docker:27-cli
    environment:
      ENVIRONMENT: dev
    depends_on:
      - sonarqube-ensurance-backend-analysis-dev
      - sonarqube-ensurance-frontend-analysis-dev
      - sonarqube-pharmacy-backend-analysis-dev
      - sonarqube-pharmacy-frontend-analysis-dev
    commands:
      - echo "Deploy DEV Environment (puertos 3000-3003)"
      - echo dev > .environment
      - docker compose -f docker-compose.dev.yml down || true
      - ENVIRONMENT=dev docker compose -f docker-compose.dev.yml up -d --build
      - sleep 30
      - docker compose -f docker-compose.dev.yml ps
      - echo "DEV desplegado en:"
      - 'echo "   - Ensurance Frontend: http://localhost:3000"'
      - 'echo "   - Pharmacy Frontend: http://localhost:3001"'
      - 'echo "   - Ensurance Backend: http://localhost:3002/api"'
      - 'echo "   - Pharmacy Backend: http://localhost:3003/api2"'
    volumes:
      - name: docker-sock
        path: /var/run/docker.sock
    when:
      event:
        - push
      branch:
        - dev

  - name: deploy-qa
    image: docker:27-cli
    environment:
      ENVIRONMENT: qa
    depends_on:
      - sonarqube-ensurance-backend-analysis-qa
      - sonarqube-ensurance-frontend-analysis-qa
      - sonarqube-pharmacy-backend-analysis-qa
      - sonarqube-pharmacy-frontend-analysis-qa
    commands:
      - echo "Deploy QA Environment (puertos 4000-4003)"
      - echo qa > .environment
      - docker compose -f docker-compose.qa.yml down || true
      - ENVIRONMENT=qa docker compose -f docker-compose.qa.yml up -d --build
      - sleep 30
      - docker compose -f docker-compose.qa.yml ps
      - echo "QA desplegado en:"
      - 'echo "   - Ensurance Frontend: http://localhost:4000"'
      - 'echo "   - Pharmacy Frontend: http://localhost:4001"'
      - 'echo "   - Ensurance Backend: http://localhost:4002/api"'
      - 'echo "   - Pharmacy Backend: http://localhost:4003/api2"'
    volumes:
      - name: docker-sock
        path: /var/run/docker.sock
    when:
      event:
        - push
      branch:
        - qa

  - name: deploy-main
    image: docker:27-cli
    environment:
      ENVIRONMENT: main
    depends_on:
      - sonarqube-ensurance-backend-analysis-main
      - sonarqube-ensurance-frontend-analysis-main
      - sonarqube-pharmacy-backend-analysis-main
      - sonarqube-pharmacy-frontend-analysis-main
    commands:
      - echo "Deploy MAIN Environment (puertos 5175, 8089, 8081, 8082)"
      - echo main > .environment
      - docker compose -f docker-compose.main.yml down || true
      - ENVIRONMENT=main docker compose -f docker-compose.main.yml up -d --build
      - sleep 30
      - docker compose -f docker-compose.main.yml ps
      - echo "MAIN desplegado en:"
      - 'echo "   - Ensurance Frontend: http://localhost:5175"'
      - 'echo "   - Pharmacy Frontend: http://localhost:8089"'
      - 'echo "   - Ensurance Backend: http://localhost:8081/api"'
      - 'echo "   - Pharmacy Backend: http://localhost:8082/api2"'
    volumes:
      - name: docker-sock
        path: /var/run/docker.sock
    when:
      event:
        - push
      branch:
        - main
        - master

  # Verify only the environment that was deployed to avoid pending dependencies
  - name: verify-deployment-dev
    image: curlimages/curl:latest
    commands:
      - |
        echo 'Verificando deployment en ambiente: DEV'
        for i in 1 2 3 4 5; do
          if curl -fsS http://localhost:3000 > /dev/null; then echo 'Frontend DEV OK'; break; else echo "Frontend intento $i falló"; sleep 5; fi
        done
        for i in 1 2 3 4 5; do
          if curl -fsS http://localhost:3002/api > /dev/null; then echo 'Backend DEV OK'; break; else echo "Backend intento $i falló"; sleep 5; fi
        done
    when:
      event:
        - push
      branch:
        - dev
    depends_on:
      - deploy-dev

  - name: verify-deployment-qa
    image: curlimages/curl:latest
    commands:
      - |
        echo 'Verificando deployment en ambiente: QA'
        for i in 1 2 3 4 5; do
          if curl -fsS http://localhost:4000 > /dev/null; then echo 'Frontend QA OK'; break; else echo "Frontend intento $i falló"; sleep 5; fi
        done
        for i in 1 2 3 4 5; do
          if curl -fsS http://localhost:4002/api > /dev/null; then echo 'Backend QA OK'; break; else echo "Backend intento $i falló"; sleep 5; fi
        done
    when:
      event:
        - push
      branch:
        - qa
    depends_on:
      - deploy-qa

  - name: verify-deployment-main
    image: curlimages/curl:latest
    commands:
      - |
        echo 'Verificando deployment en ambiente: MAIN'
        for i in 1 2 3 4 5; do
          if curl -fsS http://localhost:5175 > /dev/null; then echo 'Frontend MAIN OK'; break; else echo "Frontend intento $i falló"; sleep 5; fi
        done
        for i in 1 2 3 4 5; do
          if curl -fsS http://localhost:8081/api > /dev/null; then echo 'Backend MAIN OK'; break; else echo "Backend intento $i falló"; sleep 5; fi
        done
    when:
      event:
        - push
      branch:
        - main
        - master
    depends_on:
      - deploy-main

  - name: smtp-smoke-test
    image: alpine:3.20
    when:
      event:
        - push
      status:
        - success
        - failure
    environment:
      SMTP_SERVER:
        from_secret: SMTP_SERVER
      SMTP_PORT:
        from_secret: SMTP_PORT
    commands:
      - |
        set -eu
        apk add --no-cache openssl >/dev/null
        if [ -z "${SMTP_SERVER:-}" ] || [ -z "${SMTP_PORT:-}" ]; then
          echo "SMTP secrets not set; skipping smoke test"
          exit 0
        fi
        echo "Probing SMTP ${SMTP_SERVER}:${SMTP_PORT} ..."
        if [ "$SMTP_PORT" = "465" ]; then
          echo QUIT | openssl s_client -connect ${SMTP_SERVER}:${SMTP_PORT} -servername ${SMTP_SERVER} -quiet || {
            echo "SMTP SSL probe failed (465)"; exit 9; }
        else
          echo QUIT | openssl s_client -starttls smtp -connect ${SMTP_SERVER}:${SMTP_PORT} -servername ${SMTP_SERVER} -quiet || {
            echo "SMTP STARTTLS probe failed (587)"; exit 9; }
        fi

  - name: email-notification
    image: drillster/drone-email
    settings:
      host:
        from_secret: SMTP_SERVER
      port:
        from_secret: SMTP_PORT
      secure: true
      username:
        from_secret: SMTP_USERNAME
      password:
        from_secret: SMTP_PASSWORD
      from:
        from_secret: SMTP_FROM_EMAIL
      to:
        from_secret: NOTIFICATION_EMAIL
      starttls: true
      skip_verify: true
      subject: "{{#success build.status}}Deploy exitoso: {{repo.name}} #{{build.number}} [{{build.branch}}]{{else}}Pipeline fallido: {{repo.name}} #{{build.number}} [{{build.branch}}]{{/success}}"
      body: "{{#success build.status}}Deploy completado exitosamente en rama {{build.branch}}.\n\nQuality Gate: APROBADO\nTests: PASADOS\nDeploy: EXITOSO\n\nDetalles: {{build.link}}\n\nServicios disponibles:\n{{#equal build.branch \"dev\"}}- Ensurance Frontend: http://localhost:3000\n- Pharmacy Frontend: http://localhost:3001\n- Ensurance Backend: http://localhost:3002/api\n- Pharmacy Backend: http://localhost:3003/api2\n{{/equal}}{{#equal build.branch \"qa\"}}- Ensurance Frontend: http://localhost:4000\n- Pharmacy Frontend: http://localhost:4001\n- Ensurance Backend: http://localhost:4002/api\n- Pharmacy Backend: http://localhost:4003/api2\n{{/equal}}{{#equal build.branch \"main\"}}- Ensurance Frontend: http://localhost:5175\n- Pharmacy Frontend: http://localhost:8089\n- Ensurance Backend: http://localhost:8081/api\n- Pharmacy Backend: http://localhost:8082/api2\n{{/equal}}{{else}}Pipeline falló en rama {{build.branch}}.\n\nDetalle: {{build.link}}\n\nPara diagnosticar:\n1. Revisar logs en Drone UI\n2. Verificar Quality Gate en SonarQube\n3. Revisar estado de contenedores{{/success}}"
    when:
      event:
        - push
      status:
        - success
        - failure

volumes:
  - name: maven-cache
    host:
      path: /tmp/drone-maven-cache
  - name: node-cache
    host:
      path: /tmp/drone-node-cache
  - name: docker-sock
    host:
      path: /var/run/docker.sock
