name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, qa, dev]
  pull_request:
    branches: [main, develop, qa, dev]

jobs:
  test-backend-v4:
    runs-on: ubuntu-latest
    name: Test Backend V4
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: "23"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Tests with Coverage
        run: mvn -B clean test jacoco:report
        working-directory: ./backv4

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backv4/target/site/jacoco/jacoco.xml

  test-backend-v5:
    runs-on: ubuntu-latest
    name: Test Backend V5
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: "23"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Tests with Coverage
        run: mvn -B clean test jacoco:report
        working-directory: ./backv5

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backv5/target/site/jacoco/jacoco.xml

  test-ensurance-frontend:
    runs-on: ubuntu-latest
    name: Test Ensurance Frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ./ensurance/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./ensurance

      - name: Run Tests with Coverage
        run: npm run test:coverage
        working-directory: ./ensurance

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./ensurance/coverage/lcov.info

  test-pharmacy-frontend:
    runs-on: ubuntu-latest
    name: Test Pharmacy Frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ./pharmacy/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./pharmacy

      - name: Run Tests with Coverage
        run: npm run test:unit:coverage
        working-directory: ./pharmacy

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./pharmacy/coverage/lcov.info

  sonarqube-ensurance-backend-analysis:
    runs-on: ubuntu-latest
    name: SonarQube Ensurance Backend Analysis
    if: github.event_name == 'push'
    needs: [test-backend-v4]
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: "23"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Generate Jacoco Reports
        run: mvn -B clean test jacoco:report -f backv4/pom.xml

      - name: Run SonarQube Analysis - Ensurance Backend
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.GLOBAL_SONAR }}
        with:
          args: >
            -Dsonar.projectKey=${{ github.ref == 'refs/heads/main' && 'ensurance-backend-main' || github.ref == 'refs/heads/qa' && 'ensurance-backend-qa' || 'ensurance-backend-dev' }}
            -Dsonar.sources=backv4/src/main
            -Dsonar.tests=backv4/src/test
            -Dsonar.java.binaries=backv4/target/classes
            -Dsonar.coverage.jacoco.xmlReportPaths=backv4/target/site/jacoco/jacoco.xml
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=300

  sonarqube-ensurance-frontend-analysis:
    runs-on: ubuntu-latest
    name: SonarQube Ensurance Frontend Analysis
    if: github.event_name == 'push'
    needs: [test-ensurance-frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js for Ensurance Frontend
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ./ensurance/package-lock.json

      - name: Generate Coverage for Ensurance Frontend
        run: |
          cd ensurance
          npm ci
          npm run test:coverage

      - name: Run SonarQube Analysis - Ensurance Frontend
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.GLOBAL_SONAR }}
        with:
          projectBaseDir: ./ensurance
          args: >
            -Dsonar.projectKey=${{ github.ref == 'refs/heads/main' && 'ensurance-frontend-main' || github.ref == 'refs/heads/qa' && 'ensurance-frontend-qa' || 'ensurance-frontend-dev' }}
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=300

  sonarqube-pharmacy-backend-analysis:
    runs-on: ubuntu-latest
    name: SonarQube Pharmacy Backend Analysis
    if: github.event_name == 'push'
    needs: [test-backend-v5]
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: "23"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Generate Jacoco Reports
        run: mvn -B clean test jacoco:report -f backv5/pom.xml

      - name: Run SonarQube Analysis - Pharmacy Backend
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.GLOBAL_SONAR }}
        with:
          args: >
            -Dsonar.projectKey=${{ github.ref == 'refs/heads/main' && 'pharmacy-backend-main' || github.ref == 'refs/heads/qa' && 'pharmacy-backend-qa' || 'pharmacy-backend-dev' }}
            -Dsonar.sources=backv5/src/main
            -Dsonar.tests=backv5/src/test
            -Dsonar.java.binaries=backv5/target/classes
            -Dsonar.coverage.jacoco.xmlReportPaths=backv5/target/site/jacoco/jacoco.xml
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=300

  sonarqube-pharmacy-frontend-analysis:
    runs-on: ubuntu-latest
    name: SonarQube Pharmacy Frontend Analysis
    if: github.event_name == 'push'
    needs: [test-pharmacy-frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js for Pharmacy Frontend
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ./pharmacy/package-lock.json

      - name: Generate Coverage for Pharmacy Frontend
        run: |
          cd pharmacy
          npm ci
          npm run test:unit:coverage

      - name: Run SonarQube Analysis - Pharmacy Frontend
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.GLOBAL_SONAR }}
        with:
          projectBaseDir: ./pharmacy
          args: >
            -Dsonar.projectKey=${{ github.ref == 'refs/heads/main' && 'pharmacy-frontend-main' || github.ref == 'refs/heads/qa' && 'pharmacy-frontend-qa' || 'pharmacy-frontend-dev' }}
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=300

  deploy-dev:
    runs-on: ubuntu-latest
    name: Deploy to Development
    needs:
      [
        sonarqube-ensurance-backend-analysis,
        sonarqube-ensurance-frontend-analysis,
        sonarqube-pharmacy-backend-analysis,
        sonarqube-pharmacy-frontend-analysis,
      ]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Development Environment
        run: |
          echo "Deploying to Development..."
          # Aquí puedes agregar los comandos específicos de deploy
        env:
          ENSURANCE_BACK_DEV: ${{ secrets.ensurance_back_dev }}
          ENSURANCE_FRONT_DEV: ${{ secrets.ensurance_front_dev }}
          PHARMACY_BACK_DEV: ${{ secrets.pharmacy_back_dev }}
          PHARMACY_FRONT_DEV: ${{ secrets.pharmacy_front_dev }}

  deploy-qa:
    runs-on: ubuntu-latest
    name: Deploy to QA
    needs:
      [
        sonarqube-ensurance-backend-analysis,
        sonarqube-ensurance-frontend-analysis,
        sonarqube-pharmacy-backend-analysis,
        sonarqube-pharmacy-frontend-analysis,
      ]
    if: github.ref == 'refs/heads/qa' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to QA Environment
        run: |
          echo "Deploying to QA..."
          # Aquí puedes agregar los comandos específicos de deploy
        env:
          ENSURANCE_BACK_QA: ${{ secrets.ensurance_back_qa }}
          ENSURANCE_FRONT_QA: ${{ secrets.ensurance_front_qa }}
          PHARMACY_BACK_QA: ${{ secrets.pharmacy_back_qa }}
          PHARMACY_FRONT_QA: ${{ secrets.pharmacy_front_qa }}

  deploy-main:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs:
      [
        sonarqube-ensurance-backend-analysis,
        sonarqube-ensurance-frontend-analysis,
        sonarqube-pharmacy-backend-analysis,
        sonarqube-pharmacy-frontend-analysis,
      ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Production Environment
        run: |
          echo "Deploying to Production..."
          # Aquí puedes agregar los comandos específicos de deploy
        env:
          ENSURANCE_BACK_MAIN: ${{ secrets.ensurance_back_main }}
          ENSURANCE_FRONT_MAIN: ${{ secrets.ensurance_front_main }}
          PHARMACY_BACK_MAIN: ${{ secrets.pharmacy_back_main }}
          PHARMACY_FRONT_MAIN: ${{ secrets.pharmacy_front_main }}

  notify-status:
    runs-on: ubuntu-latest
    name: Send Email Notification
    needs:
      [
        test-backend-v4,
        test-backend-v5,
        test-ensurance-frontend,
        test-pharmacy-frontend,
        sonarqube-ensurance-backend-analysis,
        sonarqube-ensurance-frontend-analysis,
        sonarqube-pharmacy-backend-analysis,
        sonarqube-pharmacy-frontend-analysis,
      ]
    if: always()

    steps:
      - name: Determine Status
        id: status
        run: |
          if [[ "${{ needs.test-backend-v4.result }}" == "success" && \
                "${{ needs.test-backend-v5.result }}" == "success" && \
                "${{ needs.test-ensurance-frontend.result }}" == "success" && \
                "${{ needs.test-pharmacy-frontend.result }}" == "success" && \
                "${{ needs.sonarqube-ensurance-backend-analysis.result }}" == "success" && \
                "${{ needs.sonarqube-ensurance-frontend-analysis.result }}" == "success" && \
                "${{ needs.sonarqube-pharmacy-backend-analysis.result }}" == "success" && \
                "${{ needs.sonarqube-pharmacy-frontend-analysis.result }}" == "success" ]]; then
            echo "status=✅ SUCCESS" >> $GITHUB_OUTPUT
            echo "color=green" >> $GITHUB_OUTPUT
            echo "summary=All tests passed and SonarQube analysis completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=❌ FAILED" >> $GITHUB_OUTPUT
            echo "color=red" >> $GITHUB_OUTPUT
            echo "summary=One or more jobs failed. Check the workflow for details" >> $GITHUB_OUTPUT
          fi

          # Environment detection
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=PRODUCTION" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/qa" ]]; then
            echo "environment=QA" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "environment=DEVELOPMENT" >> $GITHUB_OUTPUT
          else
            echo "environment=FEATURE" >> $GITHUB_OUTPUT
          fi

      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "[${{ steps.status.outputs.status }}] EnsurancePharmacy CI/CD - ${{ steps.status.outputs.environment }}"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: ${{ secrets.SMTP_FROM_EMAIL }}
          html_body: |
            <html>
            <body style="font-family: Arial, sans-serif; margin: 20px;">
              <div style="border-left: 4px solid ${{ steps.status.outputs.color }}; padding-left: 20px;">
                <h2 style="color: ${{ steps.status.outputs.color }};">🏥 EnsurancePharmacy CI/CD Pipeline</h2>
                <p><strong>Status:</strong> ${{ steps.status.outputs.status }}</p>
                <p><strong>Environment:</strong> ${{ steps.status.outputs.environment }}</p>
                <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
                <p><strong>Commit:</strong> ${{ github.sha }}</p>
                <p><strong>Author:</strong> ${{ github.actor }}</p>
                <p><strong>Summary:</strong> ${{ steps.status.outputs.summary }}</p>
              </div>
              
              <h3>📊 Job Results:</h3>
              <ul>
                <li>Backend V4 Tests: ${{ needs.test-backend-v4.result == 'success' && '✅' || '❌' }} ${{ needs.test-backend-v4.result }}</li>
                <li>Backend V5 Tests: ${{ needs.test-backend-v5.result == 'success' && '✅' || '❌' }} ${{ needs.test-backend-v5.result }}</li>
                <li>Ensurance Frontend Tests: ${{ needs.test-ensurance-frontend.result == 'success' && '✅' || '❌' }} ${{ needs.test-ensurance-frontend.result }}</li>
                <li>Pharmacy Frontend Tests: ${{ needs.test-pharmacy-frontend.result == 'success' && '✅' || '❌' }} ${{ needs.test-pharmacy-frontend.result }}</li>
                <li>SonarQube Ensurance Backend: ${{ needs.sonarqube-ensurance-backend-analysis.result == 'success' && '✅' || '❌' }} ${{ needs.sonarqube-ensurance-backend-analysis.result }}</li>
                <li>SonarQube Ensurance Frontend: ${{ needs.sonarqube-ensurance-frontend-analysis.result == 'success' && '✅' || '❌' }} ${{ needs.sonarqube-ensurance-frontend-analysis.result }}</li>
                <li>SonarQube Pharmacy Backend: ${{ needs.sonarqube-pharmacy-backend-analysis.result == 'success' && '✅' || '❌' }} ${{ needs.sonarqube-pharmacy-backend-analysis.result }}</li>
                <li>SonarQube Pharmacy Frontend: ${{ needs.sonarqube-pharmacy-frontend-analysis.result == 'success' && '✅' || '❌' }} ${{ needs.sonarqube-pharmacy-frontend-analysis.result }}</li>
              </ul>
              
              <p><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" style="background-color: #0366d6; color: white; padding: 10px 15px; text-decoration: none; border-radius: 5px;">View Workflow Run</a></p>
              
              <hr style="margin: 20px 0;">
              <p style="color: #666; font-size: 12px;">Generated by GitHub Actions at ${{ github.event.head_commit.timestamp }}</p>
            </body>
            </html>
