name: CI/CD Pipeline with SonarQube Code Review

on:
  push:
    branches: [main, develop, qa]
  pull_request:
    branches: [main, develop, qa]

jobs:
  test-backend-v4:
    runs-on: ubuntu-latest
    name: Test Backend V4

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: "23"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Backend V4 Tests with Coverage
        run: mvn clean verify
        working-directory: ./backv4

      - name: Upload Backend V4 Coverage
        uses: actions/upload-artifact@v4
        with:
          name: backv4-coverage
          path: backv4/target/site/jacoco/

  test-backend-v5:
    runs-on: ubuntu-latest
    name: Test Backend V5

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: "23"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Backend V5 Tests with Coverage
        run: mvn clean verify
        working-directory: ./backv5

      - name: Upload Backend V5 Coverage
        uses: actions/upload-artifact@v4
        with:
          name: backv5-coverage
          path: backv5/target/site/jacoco/

  test-ensurance-frontend:
    runs-on: ubuntu-latest
    name: Test Ensurance Frontend

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./ensurance/package-lock.json"

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --progress=false
        working-directory: ./ensurance

      - name: Run tests with coverage
        run: |
          npm ci --prefer-offline --no-audit --progress=false
          npm run test:coverage -- --passWithNoTests
        working-directory: ./ensurance
        
      - name: Verify coverage report
        run: |
          ls -la coverage/
          cat coverage/lcov.info | head -20
        working-directory: ./ensurance

      - name: Upload Ensurance Coverage
        uses: actions/upload-artifact@v4
        with:
          name: ensurance-coverage
          path: ensurance/coverage/

  test-pharmacy-frontend:
    runs-on: ubuntu-latest
    name: Test Pharmacy Frontend

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./pharmacy/package-lock.json"

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --progress=false
        working-directory: ./pharmacy

      - name: Run tests with coverage
        run: |
          npm ci --prefer-offline --no-audit --progress=false
          npm install --save-dev jest-junit
          npm run test:unit:coverage -- --passWithNoTests
        working-directory: ./pharmacy
        
      - name: Verify coverage report
        run: |
          ls -la coverage/
          cat coverage/lcov.info | head -20
        working-directory: ./pharmacy

      - name: Upload Pharmacy Coverage
        uses: actions/upload-artifact@v4
        with:
          name: pharmacy-coverage
          path: pharmacy/coverage/

  sonarqube-ensurance-analysis:
    runs-on: ubuntu-latest
    name: SonarQube Ensurance Analysis
    permissions:
      contents: read
      pull-requests: write
    needs: [test-backend-v4, test-backend-v5, test-ensurance-frontend]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Disable shallow clone for better analysis

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: "23"
          distribution: "temurin"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./ensurance/package-lock.json"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Download Ensurance coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: "ensurance-coverage"

      - name: Download Backend coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: "backv5-coverage"

      - name: Install Ensurance Frontend Dependencies
        run: |
          cd ensurance && npm ci --prefer-offline --no-audit --progress=false

      - name: Build and Test Ensurance for Coverage
        run: |
          cd backv4 && mvn clean verify
          cd ../backv5 && mvn clean verify
          cd ../ensurance && npm run test:coverage

      - name: Run SonarQube Analysis - Ensurance Backend DEV
        if: github.ref == 'refs/heads/develop'
        run: |
          cd backv4 && mvn sonar:sonar \
            -Dsonar.projectKey=ensurance-backend-dev \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.ENSURANCE_BACK_DEV }} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=300
          cd ../backv5 && mvn sonar:sonar \
            -Dsonar.projectKey=ensurance-backend-dev \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.ENSURANCE_BACK_DEV }} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=300

      - name: Run SonarQube Analysis - Ensurance Backend QA
        if: github.ref == 'refs/heads/qa'
        run: |
          cd backv4 && mvn sonar:sonar \
            -Dsonar.projectKey=ensurance-backend-qa \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.ENSURANCE_BACK_QA }} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=300
          cd ../backv5 && mvn sonar:sonar \
            -Dsonar.projectKey=ensurance-backend-qa \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.ENSURANCE_BACK_QA }} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=300

      - name: Run SonarQube Analysis - Ensurance Backend MAIN
        if: github.ref == 'refs/heads/main'
        run: |
          cd backv4 && mvn sonar:sonar \
            -Dsonar.projectKey=ensurance-backend-main \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.ENSURANCE_BACK_MAIN }} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=300
          cd ../backv5 && mvn sonar:sonar \
            -Dsonar.projectKey=ensurance-backend-main \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.ENSURANCE_BACK_MAIN }} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=300

      - name: Run SonarQube Analysis - Ensurance Frontend
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ./ensurance
          args: >
            -Dsonar.projectKey=${{ github.ref == 'refs/heads/main' && 'ensurance-frontend-main' || github.ref == 'refs/heads/qa' && 'ensurance-frontend-qa' || 'ensurance-frontend-dev' }}
            -Dsonar.login=${{ github.ref == 'refs/heads/main' && secrets.ENSURANCE_FRONT_MAIN || github.ref == 'refs/heads/qa' && secrets.ENSURANCE_FRONT_QA || secrets.ENSURANCE_FRONT_DEV }}
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=300

  sonarqube-pharmacy-analysis:
    runs-on: ubuntu-latest
    name: SonarQube Pharmacy Analysis
    permissions:
      contents: read
      pull-requests: write
    needs: [test-pharmacy-frontend]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Disable shallow clone for better analysis

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./pharmacy/package-lock.json"

      - name: Download Pharmacy coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: "pharmacy-coverage"

      - name: Install Pharmacy Frontend Dependencies
        run: |
          cd pharmacy && npm ci --prefer-offline --no-audit --progress=false

      - name: Build and Test Pharmacy for Coverage
        run: |
          cd pharmacy && npm run test:unit:coverage

      - name: Run SonarQube Analysis - Pharmacy DEV
        if: github.ref == 'refs/heads/develop'
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.PHARMACY_FRONT_DEV }}
        with:
          projectBaseDir: ./pharmacy
          args: >
            -Dsonar.projectKey=pharmacy-frontend-dev
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=300

      - name: Run SonarQube Analysis - Pharmacy QA
        if: github.ref == 'refs/heads/qa'
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.PHARMACY_FRONT_QA }}
        with:
          projectBaseDir: ./pharmacy
          args: >
            -Dsonar.projectKey=pharmacy-frontend-qa
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=300

      - name: Run SonarQube Analysis - Pharmacy MAIN
        if: github.ref == 'refs/heads/main'
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.PHARMACY_FRONT_MAIN }}
        with:
          projectBaseDir: ./pharmacy
          args: >
            -Dsonar.projectKey=pharmacy-frontend-main
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=300

  deploy-dev:
    runs-on: ubuntu-latest
    name: Deploy to Development
    needs: [sonarqube-ensurance-analysis, sonarqube-pharmacy-analysis]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Development Environment
        run: |
          echo "Deploying to Development..."
          # Aquí puedes agregar los comandos específicos de deploy
        env:
          ENSURANCE_BACK_DEV: ${{ secrets.ENSURANCE_BACK_DEV }}
          ENSURANCE_FRONT_DEV: ${{ secrets.ENSURANCE_FRONT_DEV }}
          PHARMACY_BACK_DEV: ${{ secrets.PHARMACY_BACK_DEV }}
          PHARMACY_FRONT_DEV: ${{ secrets.PHARMACY_FRONT_DEV }}

  deploy-qa:
    runs-on: ubuntu-latest
    name: Deploy to QA
    needs: [sonarqube-ensurance-analysis, sonarqube-pharmacy-analysis]
    if: github.ref == 'refs/heads/qa' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to QA Environment
        run: |
          echo "Deploying to QA..."
          # Aquí puedes agregar los comandos específicos de deploy
        env:
          ENSURANCE_BACK_QA: ${{ secrets.ENSURANCE_BACK_QA }}
          ENSURANCE_FRONT_QA: ${{ secrets.ENSURANCE_FRONT_QA }}
          PHARMACY_BACK_QA: ${{ secrets.PHARMACY_BACK_QA }}
          PHARMACY_FRONT_QA: ${{ secrets.PHARMACY_FRONT_QA }}

  deploy-main:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [sonarqube-ensurance-analysis, sonarqube-pharmacy-analysis]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Production Environment
        run: |
          echo "Deploying to Production..."
          # Aquí puedes agregar los comandos específicos de deploy
        env:
          ENSURANCE_BACK_MAIN: ${{ secrets.ENSURANCE_BACK_MAIN }}
          ENSURANCE_FRONT_MAIN: ${{ secrets.ENSURANCE_FRONT_MAIN }}
          PHARMACY_BACK_MAIN: ${{ secrets.PHARMACY_BACK_MAIN }}
          PHARMACY_FRONT_MAIN: ${{ secrets.PHARMACY_FRONT_MAIN }}

  notify-status:
    runs-on: ubuntu-latest
    name: Send Email Notification
    needs:
      [
        test-backend-v4,
        test-backend-v5,
        test-ensurance-frontend,
        test-pharmacy-frontend,
        sonarqube-ensurance-analysis,
        sonarqube-pharmacy-analysis,
      ]
    if: always()

    steps:
      - name: Determine Status
        id: status
        run: |
          if [[ "${{ needs.test-backend-v4.result }}" == "success" && \
                "${{ needs.test-backend-v5.result }}" == "success" && \
                "${{ needs.test-ensurance-frontend.result }}" == "success" && \
                "${{ needs.test-pharmacy-frontend.result }}" == "success" && \
                "${{ needs.sonarqube-ensurance-analysis.result }}" == "success" && \
                "${{ needs.sonarqube-pharmacy-analysis.result }}" == "success" ]]; then
            echo "status=✅ SUCCESS" >> $GITHUB_OUTPUT
            echo "color=green" >> $GITHUB_OUTPUT
            echo "summary=All tests passed and SonarQube analysis completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=❌ FAILED" >> $GITHUB_OUTPUT
            echo "color=red" >> $GITHUB_OUTPUT
            echo "summary=One or more jobs failed. Check the workflow for details" >> $GITHUB_OUTPUT
          fi

          # Environment detection
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=PRODUCTION" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/qa" ]]; then
            echo "environment=QA" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=DEVELOPMENT" >> $GITHUB_OUTPUT
          else
            echo "environment=FEATURE" >> $GITHUB_OUTPUT
          fi

      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "[${{ steps.status.outputs.status }}] EnsurancePharmacy CI/CD - ${{ steps.status.outputs.environment }}"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: ${{ secrets.SMTP_FROM_EMAIL }}
          html_body: |
            <html>
            <body style="font-family: Arial, sans-serif; margin: 20px;">
              <div style="border-left: 4px solid ${{ steps.status.outputs.color }}; padding-left: 20px;">
                <h2 style="color: ${{ steps.status.outputs.color }};">🏥 EnsurancePharmacy CI/CD Pipeline</h2>
                <p><strong>Status:</strong> ${{ steps.status.outputs.status }}</p>
                <p><strong>Environment:</strong> ${{ steps.status.outputs.environment }}</p>
                <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
                <p><strong>Commit:</strong> ${{ github.sha }}</p>
                <p><strong>Author:</strong> ${{ github.actor }}</p>
                <p><strong>Summary:</strong> ${{ steps.status.outputs.summary }}</p>
              </div>
              
              <h3>📊 Job Results:</h3>
              <ul>
                <li>Backend V4 Tests: ${{ needs.test-backend-v4.result == 'success' && '✅' || '❌' }} ${{ needs.test-backend-v4.result }}</li>
                <li>Backend V5 Tests: ${{ needs.test-backend-v5.result == 'success' && '✅' || '❌' }} ${{ needs.test-backend-v5.result }}</li>
                <li>Ensurance Frontend Tests: ${{ needs.test-ensurance-frontend.result == 'success' && '✅' || '❌' }} ${{ needs.test-ensurance-frontend.result }}</li>
                <li>Pharmacy Frontend Tests: ${{ needs.test-pharmacy-frontend.result == 'success' && '✅' || '❌' }} ${{ needs.test-pharmacy-frontend.result }}</li>
                <li>SonarQube Ensurance Analysis: ${{ needs.sonarqube-ensurance-analysis.result == 'success' && '✅' || '❌' }} ${{ needs.sonarqube-ensurance-analysis.result }}</li>
                <li>SonarQube Pharmacy Analysis: ${{ needs.sonarqube-pharmacy-analysis.result == 'success' && '✅' || '❌' }} ${{ needs.sonarqube-pharmacy-analysis.result }}</li>
              </ul>
              
              <p><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" style="background-color: #0366d6; color: white; padding: 10px 15px; text-decoration: none; border-radius: 5px;">View Workflow Run</a></p>
              
              <hr style="margin: 20px 0;">
              <p style="color: #666; font-size: 12px;">Generated by GitHub Actions at ${{ github.event.head_commit.timestamp }}</p>
            </body>
            </html>
