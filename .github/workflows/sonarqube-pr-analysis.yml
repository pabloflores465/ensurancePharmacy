name: SonarQube PR Analysis

on:
  pull_request:
    branches: [main, develop, qa]

jobs:
  sonarqube-ensurance-pr-analysis:
    runs-on: ubuntu-latest
    name: SonarQube Ensurance PR Analysis
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Disable shallow clone for better analysis

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: "23"
          distribution: "temurin"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Ensurance Frontend Dependencies
        run: |
          cd ensurance && npm ci --prefer-offline --no-audit --progress=false

      - name: Run Backend Tests with Coverage
        run: |
          cd backv4 && mvn clean verify
          cd ../backv5 && mvn clean verify

      - name: Run Ensurance Frontend Tests with Coverage
        run: |
          cd ensurance && npm run test:coverage

      - name: Run SonarQube Scanner for PR - Ensurance Backend DEV
        if: github.base_ref == 'develop'
        run: |
          cd backv4 && mvn sonar:sonar \
            -Dsonar.projectKey=ensurance-backend-dev \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.ENSURANCE_BACK_DEV }} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=300
          cd ../backv5 && mvn sonar:sonar \
            -Dsonar.projectKey=ensurance-backend-dev \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.ENSURANCE_BACK_DEV }} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=300

      - name: Run SonarQube Scanner for PR - Ensurance Backend QA
        if: github.base_ref == 'qa'
        run: |
          cd backv4 && mvn sonar:sonar \
            -Dsonar.projectKey=ensurance-backend-qa \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.ENSURANCE_BACK_QA }} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=300
          cd ../backv5 && mvn sonar:sonar \
            -Dsonar.projectKey=ensurance-backend-qa \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.ENSURANCE_BACK_QA }} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=300

      - name: Run SonarQube Scanner for PR - Ensurance Backend MAIN
        if: github.base_ref == 'main'
        run: |
          cd backv4 && mvn sonar:sonar \
            -Dsonar.projectKey=ensurance-backend-main \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.ENSURANCE_BACK_MAIN }} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=300
          cd ../backv5 && mvn sonar:sonar \
            -Dsonar.projectKey=ensurance-backend-main \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.ENSURANCE_BACK_MAIN }} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=300

      - name: Run SonarQube Analysis - Ensurance Frontend PR
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ./ensurance
          args: >
            -Dsonar.projectKey=${{ github.base_ref == 'main' && 'ensurance-frontend-main' || github.base_ref == 'qa' && 'ensurance-frontend-qa' || 'ensurance-frontend-dev' }}
            -Dsonar.login=${{ github.base_ref == 'main' && secrets.ENSURANCE_FRONT_MAIN || github.base_ref == 'qa' && secrets.ENSURANCE_FRONT_QA || secrets.ENSURANCE_FRONT_DEV }}
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=300

  sonarqube-pharmacy-pr-analysis:
    runs-on: ubuntu-latest
    name: SonarQube Pharmacy PR Analysis
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Disable shallow clone for better analysis

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Pharmacy Frontend Dependencies
        run: |
          cd pharmacy && npm ci --prefer-offline --no-audit --progress=false

      - name: Run Pharmacy Frontend Tests with Coverage
        run: |
          cd pharmacy && npm run test:unit:coverage

      - name: Run SonarQube Scanner for PR - Pharmacy Backend DEV
        if: github.base_ref == 'develop'
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ./pharmacy
          args: >
            -Dsonar.projectKey=pharmacy-backend-dev
            -Dsonar.login=${{ secrets.PHARMACY_BACK_DEV }}
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=300

      - name: Run SonarQube Scanner for PR - Pharmacy Backend QA
        if: github.base_ref == 'qa'
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ./pharmacy
          args: >
            -Dsonar.projectKey=pharmacy-backend-qa
            -Dsonar.login=${{ secrets.PHARMACY_BACK_QA }}
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=300

      - name: Run SonarQube Scanner for PR - Pharmacy Backend MAIN
        if: github.base_ref == 'main'
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ./pharmacy
          args: >
            -Dsonar.projectKey=pharmacy-backend-main
            -Dsonar.login=${{ secrets.PHARMACY_BACK_MAIN }}
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=300

      - name: Run SonarQube Analysis - Pharmacy Frontend PR
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ./pharmacy
          args: >
            -Dsonar.projectKey=${{ github.base_ref == 'main' && 'pharmacy-frontend-main' || github.base_ref == 'qa' && 'pharmacy-frontend-qa' || 'pharmacy-frontend-dev' }}
            -Dsonar.login=${{ github.base_ref == 'main' && secrets.PHARMACY_FRONT_MAIN || github.base_ref == 'qa' && secrets.PHARMACY_FRONT_QA || secrets.PHARMACY_FRONT_DEV }}
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=300

  notify-pr-status:
    runs-on: ubuntu-latest
    name: Send PR Email Notification
    needs: [sonarqube-ensurance-pr-analysis, sonarqube-pharmacy-pr-analysis]
    if: always()

    steps:
      - name: Determine PR Status
        id: status
        run: |
          if [[ "${{ needs.sonarqube-ensurance-pr-analysis.result }}" == "success" && "${{ needs.sonarqube-pharmacy-pr-analysis.result }}" == "success" ]]; then
            echo "status=✅ SUCCESS" >> $GITHUB_OUTPUT
            echo "color=green" >> $GITHUB_OUTPUT
            echo "summary=SonarQube analysis passed. PR is ready for review" >> $GITHUB_OUTPUT
          else
            echo "status=❌ FAILED" >> $GITHUB_OUTPUT
            echo "color=red" >> $GITHUB_OUTPUT
            echo "summary=SonarQube analysis failed. Please fix issues before merging" >> $GITHUB_OUTPUT
          fi
          
          # Target environment detection
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            echo "target_env=PRODUCTION" >> $GITHUB_OUTPUT
          elif [[ "${{ github.base_ref }}" == "qa" ]]; then
            echo "target_env=QA" >> $GITHUB_OUTPUT
          elif [[ "${{ github.base_ref }}" == "develop" ]]; then
            echo "target_env=DEVELOPMENT" >> $GITHUB_OUTPUT
          else
            echo "target_env=FEATURE" >> $GITHUB_OUTPUT
          fi

      - name: Send PR Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "[${{ steps.status.outputs.status }}] PR #${{ github.event.number }} - SonarQube Analysis (${{ steps.status.outputs.target_env }})"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: ${{ secrets.SMTP_FROM_EMAIL }}
          html_body: |
            <html>
            <body style="font-family: Arial, sans-serif; margin: 20px;">
              <div style="border-left: 4px solid ${{ steps.status.outputs.color }}; padding-left: 20px;">
                <h2 style="color: ${{ steps.status.outputs.color }};">🔍 Pull Request SonarQube Analysis</h2>
                <p><strong>Status:</strong> ${{ steps.status.outputs.status }}</p>
                <p><strong>PR Number:</strong> #${{ github.event.number }}</p>
                <p><strong>Title:</strong> ${{ github.event.pull_request.title }}</p>
                <p><strong>Target Branch:</strong> ${{ github.base_ref }} (${{ steps.status.outputs.target_env }})</p>
                <p><strong>Source Branch:</strong> ${{ github.head_ref }}</p>
                <p><strong>Author:</strong> ${{ github.event.pull_request.user.login }}</p>
                <p><strong>Summary:</strong> ${{ steps.status.outputs.summary }}</p>
              </div>
              
              <h3>📋 Analysis Details:</h3>
              <ul>
                <li>SonarQube Ensurance Analysis: ${{ needs.sonarqube-ensurance-pr-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }}</li>
                <li>SonarQube Pharmacy Analysis: ${{ needs.sonarqube-pharmacy-pr-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }}</li>
                <li>Quality Gate: ${{ (needs.sonarqube-ensurance-pr-analysis.result == 'success' && needs.sonarqube-pharmacy-pr-analysis.result == 'success') && '✅ Passed' || '❌ Failed' }}</li>
              </ul>
              
              <div style="margin: 20px 0;">
                <a href="${{ github.event.pull_request.html_url }}" style="background-color: #0366d6; color: white; padding: 10px 15px; text-decoration: none; border-radius: 5px; margin-right: 10px;">View Pull Request</a>
                <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" style="background-color: #28a745; color: white; padding: 10px 15px; text-decoration: none; border-radius: 5px;">View Analysis Run</a>
              </div>
              
              <hr style="margin: 20px 0;">
              <p style="color: #666; font-size: 12px;">Generated by GitHub Actions at ${{ github.event.pull_request.updated_at }}</p>
            </body>
            </html>
