<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.sources.app.dao.ServiceApprovalDAOTest" time="0.676" tests="5" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="24"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/gp/Documents/ensurancePharmacy/backv5/target/test-classes:/Users/gp/Documents/ensurancePharmacy/backv5/target/classes:/Users/gp/.m2/repository/com/h2database/h2/2.1.214/h2-2.1.214.jar:/Users/gp/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/Users/gp/.m2/repository/org/xerial/sqlite-jdbc/3.44.1.0/sqlite-jdbc-3.44.1.0.jar:/Users/gp/.m2/repository/org/hibernate/orm/hibernate-community-dialects/6.6.6.Final/hibernate-community-dialects-6.6.6.Final.jar:/Users/gp/.m2/repository/org/jboss/logging/jboss-logging/3.5.0.Final/jboss-logging-3.5.0.Final.jar:/Users/gp/.m2/repository/org/hibernate/orm/hibernate-core/6.6.6.Final/hibernate-core-6.6.6.Final.jar:/Users/gp/.m2/repository/org/hibernate/common/hibernate-commons-annotations/7.0.3.Final/hibernate-commons-annotations-7.0.3.Final.jar:/Users/gp/.m2/repository/io/smallrye/jandex/3.2.0/jandex-3.2.0.jar:/Users/gp/.m2/repository/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar:/Users/gp/.m2/repository/net/bytebuddy/byte-buddy/1.15.11/byte-buddy-1.15.11.jar:/Users/gp/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.0/jakarta.xml.bind-api-4.0.0.jar:/Users/gp/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.0/jakarta.activation-api-2.1.0.jar:/Users/gp/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.2/jaxb-runtime-4.0.2.jar:/Users/gp/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.2/jaxb-core-4.0.2.jar:/Users/gp/.m2/repository/org/eclipse/angus/angus-activation/2.0.0/angus-activation-2.0.0.jar:/Users/gp/.m2/repository/org/glassfish/jaxb/txw2/4.0.2/txw2-4.0.2.jar:/Users/gp/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.1/istack-commons-runtime-4.1.1.jar:/Users/gp/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/gp/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/Users/gp/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/gp/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/gp/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.2/jackson-databind-2.15.2.jar:/Users/gp/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.2/jackson-annotations-2.15.2.jar:/Users/gp/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.2/jackson-core-2.15.2.jar:/Users/gp/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.8.1/junit-jupiter-api-5.8.1.jar:/Users/gp/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/Users/gp/.m2/repository/org/junit/platform/junit-platform-commons/1.8.1/junit-platform-commons-1.8.1.jar:/Users/gp/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/gp/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.8.1/junit-jupiter-engine-5.8.1.jar:/Users/gp/.m2/repository/org/junit/platform/junit-platform-engine/1.8.1/junit-platform-engine-1.8.1.jar:/Users/gp/.m2/repository/javax/ws/rs/javax.ws.rs-api/2.1.1/javax.ws.rs-api-2.1.1.jar:/Users/gp/.m2/repository/org/glassfish/jersey/core/jersey-server/2.35/jersey-server-2.35.jar:/Users/gp/.m2/repository/org/glassfish/jersey/core/jersey-common/2.35/jersey-common-2.35.jar:/Users/gp/.m2/repository/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.jar:/Users/gp/.m2/repository/org/glassfish/jersey/core/jersey-client/2.35/jersey-client-2.35.jar:/Users/gp/.m2/repository/jakarta/ws/rs/jakarta.ws.rs-api/2.1.6/jakarta.ws.rs-api-2.1.6.jar:/Users/gp/.m2/repository/jakarta/annotation/jakarta.annotation-api/1.3.5/jakarta.annotation-api-1.3.5.jar:/Users/gp/.m2/repository/org/glassfish/hk2/external/jakarta.inject/2.6.1/jakarta.inject-2.6.1.jar:/Users/gp/.m2/repository/jakarta/validation/jakarta.validation-api/2.0.2/jakarta.validation-api-2.0.2.jar:/Users/gp/.m2/repository/org/glassfish/jersey/containers/jersey-container-servlet/2.35/jersey-container-servlet-2.35.jar:/Users/gp/.m2/repository/org/glassfish/jersey/containers/jersey-container-servlet-core/2.35/jersey-container-servlet-core-2.35.jar:/Users/gp/.m2/repository/org/glassfish/jersey/inject/jersey-hk2/2.35/jersey-hk2-2.35.jar:/Users/gp/.m2/repository/org/glassfish/hk2/hk2-locator/2.6.1/hk2-locator-2.6.1.jar:/Users/gp/.m2/repository/org/glassfish/hk2/external/aopalliance-repackaged/2.6.1/aopalliance-repackaged-2.6.1.jar:/Users/gp/.m2/repository/org/glassfish/hk2/hk2-api/2.6.1/hk2-api-2.6.1.jar:/Users/gp/.m2/repository/org/glassfish/hk2/hk2-utils/2.6.1/hk2-utils-2.6.1.jar:/Users/gp/.m2/repository/org/javassist/javassist/3.25.0-GA/javassist-3.25.0-GA.jar:/Users/gp/.m2/repository/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar:/Users/gp/.m2/repository/org/mockito/mockito-core/5.12.0/mockito-core-5.12.0.jar:/Users/gp/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar:/Users/gp/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/gp/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/gp/.m2/repository/ch/qos/logback/logback-classic/1.4.14/logback-classic-1.4.14.jar:/Users/gp/.m2/repository/ch/qos/logback/logback-core/1.4.14/logback-core-1.4.14.jar:"/>
    <property name="java.vm.vendor" value="Homebrew"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://github.com/Homebrew/homebrew-core/issues"/>
    <property name="user.timezone" value="America/Guatemala"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="24"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="GT"/>
    <property name="sun.boot.library.path" value="/opt/homebrew/Cellar/openjdk/24.0.1/libexec/openjdk.jdk/Contents/Home/lib"/>
    <property name="sun.java.command" value="/Users/gp/Documents/ensurancePharmacy/backv5/target/surefire/surefirebooter13663480536549603424.jar /Users/gp/Documents/ensurancePharmacy/backv5/target/surefire 2025-09-03T22-57-41_727-jvmRun1 surefire18292284637056456128tmp surefire_011349716922504394796tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/gp/Documents/ensurancePharmacy/backv5/target/test-classes:/Users/gp/Documents/ensurancePharmacy/backv5/target/classes:/Users/gp/.m2/repository/com/h2database/h2/2.1.214/h2-2.1.214.jar:/Users/gp/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/Users/gp/.m2/repository/org/xerial/sqlite-jdbc/3.44.1.0/sqlite-jdbc-3.44.1.0.jar:/Users/gp/.m2/repository/org/hibernate/orm/hibernate-community-dialects/6.6.6.Final/hibernate-community-dialects-6.6.6.Final.jar:/Users/gp/.m2/repository/org/jboss/logging/jboss-logging/3.5.0.Final/jboss-logging-3.5.0.Final.jar:/Users/gp/.m2/repository/org/hibernate/orm/hibernate-core/6.6.6.Final/hibernate-core-6.6.6.Final.jar:/Users/gp/.m2/repository/org/hibernate/common/hibernate-commons-annotations/7.0.3.Final/hibernate-commons-annotations-7.0.3.Final.jar:/Users/gp/.m2/repository/io/smallrye/jandex/3.2.0/jandex-3.2.0.jar:/Users/gp/.m2/repository/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar:/Users/gp/.m2/repository/net/bytebuddy/byte-buddy/1.15.11/byte-buddy-1.15.11.jar:/Users/gp/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.0/jakarta.xml.bind-api-4.0.0.jar:/Users/gp/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.0/jakarta.activation-api-2.1.0.jar:/Users/gp/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.2/jaxb-runtime-4.0.2.jar:/Users/gp/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.2/jaxb-core-4.0.2.jar:/Users/gp/.m2/repository/org/eclipse/angus/angus-activation/2.0.0/angus-activation-2.0.0.jar:/Users/gp/.m2/repository/org/glassfish/jaxb/txw2/4.0.2/txw2-4.0.2.jar:/Users/gp/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.1/istack-commons-runtime-4.1.1.jar:/Users/gp/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/gp/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/Users/gp/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/gp/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/gp/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.2/jackson-databind-2.15.2.jar:/Users/gp/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.2/jackson-annotations-2.15.2.jar:/Users/gp/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.2/jackson-core-2.15.2.jar:/Users/gp/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.8.1/junit-jupiter-api-5.8.1.jar:/Users/gp/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/Users/gp/.m2/repository/org/junit/platform/junit-platform-commons/1.8.1/junit-platform-commons-1.8.1.jar:/Users/gp/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/gp/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.8.1/junit-jupiter-engine-5.8.1.jar:/Users/gp/.m2/repository/org/junit/platform/junit-platform-engine/1.8.1/junit-platform-engine-1.8.1.jar:/Users/gp/.m2/repository/javax/ws/rs/javax.ws.rs-api/2.1.1/javax.ws.rs-api-2.1.1.jar:/Users/gp/.m2/repository/org/glassfish/jersey/core/jersey-server/2.35/jersey-server-2.35.jar:/Users/gp/.m2/repository/org/glassfish/jersey/core/jersey-common/2.35/jersey-common-2.35.jar:/Users/gp/.m2/repository/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.jar:/Users/gp/.m2/repository/org/glassfish/jersey/core/jersey-client/2.35/jersey-client-2.35.jar:/Users/gp/.m2/repository/jakarta/ws/rs/jakarta.ws.rs-api/2.1.6/jakarta.ws.rs-api-2.1.6.jar:/Users/gp/.m2/repository/jakarta/annotation/jakarta.annotation-api/1.3.5/jakarta.annotation-api-1.3.5.jar:/Users/gp/.m2/repository/org/glassfish/hk2/external/jakarta.inject/2.6.1/jakarta.inject-2.6.1.jar:/Users/gp/.m2/repository/jakarta/validation/jakarta.validation-api/2.0.2/jakarta.validation-api-2.0.2.jar:/Users/gp/.m2/repository/org/glassfish/jersey/containers/jersey-container-servlet/2.35/jersey-container-servlet-2.35.jar:/Users/gp/.m2/repository/org/glassfish/jersey/containers/jersey-container-servlet-core/2.35/jersey-container-servlet-core-2.35.jar:/Users/gp/.m2/repository/org/glassfish/jersey/inject/jersey-hk2/2.35/jersey-hk2-2.35.jar:/Users/gp/.m2/repository/org/glassfish/hk2/hk2-locator/2.6.1/hk2-locator-2.6.1.jar:/Users/gp/.m2/repository/org/glassfish/hk2/external/aopalliance-repackaged/2.6.1/aopalliance-repackaged-2.6.1.jar:/Users/gp/.m2/repository/org/glassfish/hk2/hk2-api/2.6.1/hk2-api-2.6.1.jar:/Users/gp/.m2/repository/org/glassfish/hk2/hk2-utils/2.6.1/hk2-utils-2.6.1.jar:/Users/gp/.m2/repository/org/javassist/javassist/3.25.0-GA/javassist-3.25.0-GA.jar:/Users/gp/.m2/repository/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar:/Users/gp/.m2/repository/org/mockito/mockito-core/5.12.0/mockito-core-5.12.0.jar:/Users/gp/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar:/Users/gp/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/gp/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/Users/gp/.m2/repository/ch/qos/logback/logback-classic/1.4.14/logback-classic-1.4.14.jar:/Users/gp/.m2/repository/ch/qos/logback/logback-core/1.4.14/logback-core-1.4.14.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/gp"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-04-15"/>
    <property name="java.home" value="/opt/homebrew/Cellar/openjdk/24.0.1/libexec/openjdk.jdk/Contents/Home"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/gp/Documents/ensurancePharmacy/backv5"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="apple.awt.application.name" value="ForkedBooter"/>
    <property name="surefire.real.class.path" value="/Users/gp/Documents/ensurancePharmacy/backv5/target/surefire/surefirebooter13663480536549603424.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="24.0.1"/>
    <property name="user.name" value="gp"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="15.6.1"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Homebrew"/>
    <property name="localRepository" value="/Users/gp/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/Homebrew/homebrew-core/issues"/>
    <property name="java.io.tmpdir" value="/var/folders/gc/wvdkjn_d7277w5wbxhbz905m0000gn/T/"/>
    <property name="java.version" value="24.0.1"/>
    <property name="user.dir" value="/Users/gp/Documents/ensurancePharmacy/backv5"/>
    <property name="os.arch" value="aarch64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/gp/instant_client:/Users/gp/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Homebrew"/>
    <property name="java.vm.version" value="24.0.1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="68.0"/>
  </properties>
  <testcase name="testUpdateStatusRejectedAndCompleted" classname="com.sources.app.dao.ServiceApprovalDAOTest" time="0.046">
    <system-out><![CDATA[2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - insert into "USERS" (ADDRESS,BIRTHDATE,CUI,EMAIL,ENABLED,NAME,PASSWORD,PHONE,ID_POLICY,ROL,STATUS) values (?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into "USERS" (ADDRESS,BIRTHDATE,CUI,EMAIL,ENABLED,NAME,PASSWORD,PHONE,ID_POLICY,ROL,STATUS) values (?,?,?,?,?,?,?,?,?,?,?)
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select last_insert_rowid()
Hibernate: select last_insert_rowid()
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - insert into HOSPITAL (ADDRESS,EMAIL,ENABLED,NAME,PHONE) values (?,?,?,?,?)
Hibernate: insert into HOSPITAL (ADDRESS,EMAIL,ENABLED,NAME,PHONE) values (?,?,?,?,?)
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select last_insert_rowid()
Hibernate: select last_insert_rowid()
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - insert into SERVICE_APPROVALS (APPROVAL_CODE,APPROVAL_DATE,COMPLETED_DATE,COVERED_AMOUNT,CREATED_AT,ID_HOSPITAL,PATIENT_AMOUNT,PRESCRIPTION_ID,PRESCRIPTION_TOTAL,REJECTION_REASON,SERVICE_COST,SERVICE_DESCRIPTION,SERVICE_ID,SERVICE_NAME,STATUS,ID_USER) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into SERVICE_APPROVALS (APPROVAL_CODE,APPROVAL_DATE,COMPLETED_DATE,COVERED_AMOUNT,CREATED_AT,ID_HOSPITAL,PATIENT_AMOUNT,PRESCRIPTION_ID,PRESCRIPTION_TOTAL,REJECTION_REASON,SERVICE_COST,SERVICE_DESCRIPTION,SERVICE_ID,SERVICE_NAME,STATUS,ID_USER) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select last_insert_rowid()
Hibernate: select last_insert_rowid()
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select sa1_0.ID_APPROVAL,sa1_0.APPROVAL_CODE,sa1_0.APPROVAL_DATE,sa1_0.COMPLETED_DATE,sa1_0.COVERED_AMOUNT,sa1_0.CREATED_AT,sa1_0.ID_HOSPITAL,h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE,sa1_0.PATIENT_AMOUNT,sa1_0.PRESCRIPTION_ID,sa1_0.PRESCRIPTION_TOTAL,sa1_0.REJECTION_REASON,sa1_0.SERVICE_COST,sa1_0.SERVICE_DESCRIPTION,sa1_0.SERVICE_ID,sa1_0.SERVICE_NAME,sa1_0.STATUS,sa1_0.ID_USER,u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from SERVICE_APPROVALS sa1_0 join HOSPITAL h1_0 on h1_0.ID_HOSPITAL=sa1_0.ID_HOSPITAL join "USERS" u1_0 on u1_0.ID_USER=sa1_0.ID_USER left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where sa1_0.ID_APPROVAL=?
Hibernate: select sa1_0.ID_APPROVAL,sa1_0.APPROVAL_CODE,sa1_0.APPROVAL_DATE,sa1_0.COMPLETED_DATE,sa1_0.COVERED_AMOUNT,sa1_0.CREATED_AT,sa1_0.ID_HOSPITAL,h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE,sa1_0.PATIENT_AMOUNT,sa1_0.PRESCRIPTION_ID,sa1_0.PRESCRIPTION_TOTAL,sa1_0.REJECTION_REASON,sa1_0.SERVICE_COST,sa1_0.SERVICE_DESCRIPTION,sa1_0.SERVICE_ID,sa1_0.SERVICE_NAME,sa1_0.STATUS,sa1_0.ID_USER,u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from SERVICE_APPROVALS sa1_0 join HOSPITAL h1_0 on h1_0.ID_HOSPITAL=sa1_0.ID_HOSPITAL join "USERS" u1_0 on u1_0.ID_USER=sa1_0.ID_USER left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where sa1_0.ID_APPROVAL=?
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - update SERVICE_APPROVALS set APPROVAL_CODE=?,APPROVAL_DATE=?,COMPLETED_DATE=?,COVERED_AMOUNT=?,CREATED_AT=?,ID_HOSPITAL=?,PATIENT_AMOUNT=?,PRESCRIPTION_ID=?,PRESCRIPTION_TOTAL=?,REJECTION_REASON=?,SERVICE_COST=?,SERVICE_DESCRIPTION=?,SERVICE_ID=?,SERVICE_NAME=?,STATUS=?,ID_USER=? where ID_APPROVAL=?
Hibernate: update SERVICE_APPROVALS set APPROVAL_CODE=?,APPROVAL_DATE=?,COMPLETED_DATE=?,COVERED_AMOUNT=?,CREATED_AT=?,ID_HOSPITAL=?,PATIENT_AMOUNT=?,PRESCRIPTION_ID=?,PRESCRIPTION_TOTAL=?,REJECTION_REASON=?,SERVICE_COST=?,SERVICE_DESCRIPTION=?,SERVICE_ID=?,SERVICE_NAME=?,STATUS=?,ID_USER=? where ID_APPROVAL=?
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select sa1_0.ID_APPROVAL,sa1_0.APPROVAL_CODE,sa1_0.APPROVAL_DATE,sa1_0.COMPLETED_DATE,sa1_0.COVERED_AMOUNT,sa1_0.CREATED_AT,sa1_0.ID_HOSPITAL,h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE,sa1_0.PATIENT_AMOUNT,sa1_0.PRESCRIPTION_ID,sa1_0.PRESCRIPTION_TOTAL,sa1_0.REJECTION_REASON,sa1_0.SERVICE_COST,sa1_0.SERVICE_DESCRIPTION,sa1_0.SERVICE_ID,sa1_0.SERVICE_NAME,sa1_0.STATUS,sa1_0.ID_USER,u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from SERVICE_APPROVALS sa1_0 join HOSPITAL h1_0 on h1_0.ID_HOSPITAL=sa1_0.ID_HOSPITAL join "USERS" u1_0 on u1_0.ID_USER=sa1_0.ID_USER left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where sa1_0.ID_APPROVAL=?
Hibernate: select sa1_0.ID_APPROVAL,sa1_0.APPROVAL_CODE,sa1_0.APPROVAL_DATE,sa1_0.COMPLETED_DATE,sa1_0.COVERED_AMOUNT,sa1_0.CREATED_AT,sa1_0.ID_HOSPITAL,h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE,sa1_0.PATIENT_AMOUNT,sa1_0.PRESCRIPTION_ID,sa1_0.PRESCRIPTION_TOTAL,sa1_0.REJECTION_REASON,sa1_0.SERVICE_COST,sa1_0.SERVICE_DESCRIPTION,sa1_0.SERVICE_ID,sa1_0.SERVICE_NAME,sa1_0.STATUS,sa1_0.ID_USER,u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from SERVICE_APPROVALS sa1_0 join HOSPITAL h1_0 on h1_0.ID_HOSPITAL=sa1_0.ID_HOSPITAL join "USERS" u1_0 on u1_0.ID_USER=sa1_0.ID_USER left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where sa1_0.ID_APPROVAL=?
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - update SERVICE_APPROVALS set APPROVAL_CODE=?,APPROVAL_DATE=?,COMPLETED_DATE=?,COVERED_AMOUNT=?,CREATED_AT=?,ID_HOSPITAL=?,PATIENT_AMOUNT=?,PRESCRIPTION_ID=?,PRESCRIPTION_TOTAL=?,REJECTION_REASON=?,SERVICE_COST=?,SERVICE_DESCRIPTION=?,SERVICE_ID=?,SERVICE_NAME=?,STATUS=?,ID_USER=? where ID_APPROVAL=?
Hibernate: update SERVICE_APPROVALS set APPROVAL_CODE=?,APPROVAL_DATE=?,COMPLETED_DATE=?,COVERED_AMOUNT=?,CREATED_AT=?,ID_HOSPITAL=?,PATIENT_AMOUNT=?,PRESCRIPTION_ID=?,PRESCRIPTION_TOTAL=?,REJECTION_REASON=?,SERVICE_COST=?,SERVICE_DESCRIPTION=?,SERVICE_ID=?,SERVICE_NAME=?,STATUS=?,ID_USER=? where ID_APPROVAL=?
]]></system-out>
  </testcase>
  <testcase name="testServiceApprovalDAOInstantiation" classname="com.sources.app.dao.ServiceApprovalDAOTest" time="0.001"/>
  <testcase name="testCreateAndFetchByIdAndCode" classname="com.sources.app.dao.ServiceApprovalDAOTest" time="0.032">
    <system-out><![CDATA[2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - insert into "USERS" (ADDRESS,BIRTHDATE,CUI,EMAIL,ENABLED,NAME,PASSWORD,PHONE,ID_POLICY,ROL,STATUS) values (?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into "USERS" (ADDRESS,BIRTHDATE,CUI,EMAIL,ENABLED,NAME,PASSWORD,PHONE,ID_POLICY,ROL,STATUS) values (?,?,?,?,?,?,?,?,?,?,?)
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select last_insert_rowid()
Hibernate: select last_insert_rowid()
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - insert into HOSPITAL (ADDRESS,EMAIL,ENABLED,NAME,PHONE) values (?,?,?,?,?)
Hibernate: insert into HOSPITAL (ADDRESS,EMAIL,ENABLED,NAME,PHONE) values (?,?,?,?,?)
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select last_insert_rowid()
Hibernate: select last_insert_rowid()
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - insert into SERVICE_APPROVALS (APPROVAL_CODE,APPROVAL_DATE,COMPLETED_DATE,COVERED_AMOUNT,CREATED_AT,ID_HOSPITAL,PATIENT_AMOUNT,PRESCRIPTION_ID,PRESCRIPTION_TOTAL,REJECTION_REASON,SERVICE_COST,SERVICE_DESCRIPTION,SERVICE_ID,SERVICE_NAME,STATUS,ID_USER) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into SERVICE_APPROVALS (APPROVAL_CODE,APPROVAL_DATE,COMPLETED_DATE,COVERED_AMOUNT,CREATED_AT,ID_HOSPITAL,PATIENT_AMOUNT,PRESCRIPTION_ID,PRESCRIPTION_TOTAL,REJECTION_REASON,SERVICE_COST,SERVICE_DESCRIPTION,SERVICE_ID,SERVICE_NAME,STATUS,ID_USER) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select last_insert_rowid()
Hibernate: select last_insert_rowid()
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select sa1_0.ID_APPROVAL,sa1_0.APPROVAL_CODE,sa1_0.APPROVAL_DATE,sa1_0.COMPLETED_DATE,sa1_0.COVERED_AMOUNT,sa1_0.CREATED_AT,sa1_0.ID_HOSPITAL,h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE,sa1_0.PATIENT_AMOUNT,sa1_0.PRESCRIPTION_ID,sa1_0.PRESCRIPTION_TOTAL,sa1_0.REJECTION_REASON,sa1_0.SERVICE_COST,sa1_0.SERVICE_DESCRIPTION,sa1_0.SERVICE_ID,sa1_0.SERVICE_NAME,sa1_0.STATUS,sa1_0.ID_USER,u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from SERVICE_APPROVALS sa1_0 join HOSPITAL h1_0 on h1_0.ID_HOSPITAL=sa1_0.ID_HOSPITAL join "USERS" u1_0 on u1_0.ID_USER=sa1_0.ID_USER left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where sa1_0.ID_APPROVAL=?
Hibernate: select sa1_0.ID_APPROVAL,sa1_0.APPROVAL_CODE,sa1_0.APPROVAL_DATE,sa1_0.COMPLETED_DATE,sa1_0.COVERED_AMOUNT,sa1_0.CREATED_AT,sa1_0.ID_HOSPITAL,h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE,sa1_0.PATIENT_AMOUNT,sa1_0.PRESCRIPTION_ID,sa1_0.PRESCRIPTION_TOTAL,sa1_0.REJECTION_REASON,sa1_0.SERVICE_COST,sa1_0.SERVICE_DESCRIPTION,sa1_0.SERVICE_ID,sa1_0.SERVICE_NAME,sa1_0.STATUS,sa1_0.ID_USER,u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from SERVICE_APPROVALS sa1_0 join HOSPITAL h1_0 on h1_0.ID_HOSPITAL=sa1_0.ID_HOSPITAL join "USERS" u1_0 on u1_0.ID_USER=sa1_0.ID_USER left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where sa1_0.ID_APPROVAL=?
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select sa1_0.ID_APPROVAL,sa1_0.APPROVAL_CODE,sa1_0.APPROVAL_DATE,sa1_0.COMPLETED_DATE,sa1_0.COVERED_AMOUNT,sa1_0.CREATED_AT,sa1_0.ID_HOSPITAL,sa1_0.PATIENT_AMOUNT,sa1_0.PRESCRIPTION_ID,sa1_0.PRESCRIPTION_TOTAL,sa1_0.REJECTION_REASON,sa1_0.SERVICE_COST,sa1_0.SERVICE_DESCRIPTION,sa1_0.SERVICE_ID,sa1_0.SERVICE_NAME,sa1_0.STATUS,sa1_0.ID_USER from SERVICE_APPROVALS sa1_0 where sa1_0.APPROVAL_CODE=?
Hibernate: select sa1_0.ID_APPROVAL,sa1_0.APPROVAL_CODE,sa1_0.APPROVAL_DATE,sa1_0.COMPLETED_DATE,sa1_0.COVERED_AMOUNT,sa1_0.CREATED_AT,sa1_0.ID_HOSPITAL,sa1_0.PATIENT_AMOUNT,sa1_0.PRESCRIPTION_ID,sa1_0.PRESCRIPTION_TOTAL,sa1_0.REJECTION_REASON,sa1_0.SERVICE_COST,sa1_0.SERVICE_DESCRIPTION,sa1_0.SERVICE_ID,sa1_0.SERVICE_NAME,sa1_0.STATUS,sa1_0.ID_USER from SERVICE_APPROVALS sa1_0 where sa1_0.APPROVAL_CODE=?
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE from HOSPITAL h1_0 where h1_0.ID_HOSPITAL=?
Hibernate: select h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE from HOSPITAL h1_0 where h1_0.ID_HOSPITAL=?
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from "USERS" u1_0 left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where u1_0.ID_USER=?
Hibernate: select u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from "USERS" u1_0 left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where u1_0.ID_USER=?
]]></system-out>
  </testcase>
  <testcase name="testQueriesByUserHospitalAndAll" classname="com.sources.app.dao.ServiceApprovalDAOTest" time="0.361">
    <system-out><![CDATA[2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - insert into "USERS" (ADDRESS,BIRTHDATE,CUI,EMAIL,ENABLED,NAME,PASSWORD,PHONE,ID_POLICY,ROL,STATUS) values (?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into "USERS" (ADDRESS,BIRTHDATE,CUI,EMAIL,ENABLED,NAME,PASSWORD,PHONE,ID_POLICY,ROL,STATUS) values (?,?,?,?,?,?,?,?,?,?,?)
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select last_insert_rowid()
Hibernate: select last_insert_rowid()
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - insert into HOSPITAL (ADDRESS,EMAIL,ENABLED,NAME,PHONE) values (?,?,?,?,?)
Hibernate: insert into HOSPITAL (ADDRESS,EMAIL,ENABLED,NAME,PHONE) values (?,?,?,?,?)
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select last_insert_rowid()
Hibernate: select last_insert_rowid()
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - insert into SERVICE_APPROVALS (APPROVAL_CODE,APPROVAL_DATE,COMPLETED_DATE,COVERED_AMOUNT,CREATED_AT,ID_HOSPITAL,PATIENT_AMOUNT,PRESCRIPTION_ID,PRESCRIPTION_TOTAL,REJECTION_REASON,SERVICE_COST,SERVICE_DESCRIPTION,SERVICE_ID,SERVICE_NAME,STATUS,ID_USER) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into SERVICE_APPROVALS (APPROVAL_CODE,APPROVAL_DATE,COMPLETED_DATE,COVERED_AMOUNT,CREATED_AT,ID_HOSPITAL,PATIENT_AMOUNT,PRESCRIPTION_ID,PRESCRIPTION_TOTAL,REJECTION_REASON,SERVICE_COST,SERVICE_DESCRIPTION,SERVICE_ID,SERVICE_NAME,STATUS,ID_USER) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select last_insert_rowid()
Hibernate: select last_insert_rowid()
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - insert into SERVICE_APPROVALS (APPROVAL_CODE,APPROVAL_DATE,COMPLETED_DATE,COVERED_AMOUNT,CREATED_AT,ID_HOSPITAL,PATIENT_AMOUNT,PRESCRIPTION_ID,PRESCRIPTION_TOTAL,REJECTION_REASON,SERVICE_COST,SERVICE_DESCRIPTION,SERVICE_ID,SERVICE_NAME,STATUS,ID_USER) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into SERVICE_APPROVALS (APPROVAL_CODE,APPROVAL_DATE,COMPLETED_DATE,COVERED_AMOUNT,CREATED_AT,ID_HOSPITAL,PATIENT_AMOUNT,PRESCRIPTION_ID,PRESCRIPTION_TOTAL,REJECTION_REASON,SERVICE_COST,SERVICE_DESCRIPTION,SERVICE_ID,SERVICE_NAME,STATUS,ID_USER) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select last_insert_rowid()
Hibernate: select last_insert_rowid()
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select sa1_0.ID_APPROVAL,sa1_0.APPROVAL_CODE,sa1_0.APPROVAL_DATE,sa1_0.COMPLETED_DATE,sa1_0.COVERED_AMOUNT,sa1_0.CREATED_AT,sa1_0.ID_HOSPITAL,sa1_0.PATIENT_AMOUNT,sa1_0.PRESCRIPTION_ID,sa1_0.PRESCRIPTION_TOTAL,sa1_0.REJECTION_REASON,sa1_0.SERVICE_COST,sa1_0.SERVICE_DESCRIPTION,sa1_0.SERVICE_ID,sa1_0.SERVICE_NAME,sa1_0.STATUS,sa1_0.ID_USER from SERVICE_APPROVALS sa1_0 where sa1_0.ID_USER=? order by sa1_0.CREATED_AT desc
Hibernate: select sa1_0.ID_APPROVAL,sa1_0.APPROVAL_CODE,sa1_0.APPROVAL_DATE,sa1_0.COMPLETED_DATE,sa1_0.COVERED_AMOUNT,sa1_0.CREATED_AT,sa1_0.ID_HOSPITAL,sa1_0.PATIENT_AMOUNT,sa1_0.PRESCRIPTION_ID,sa1_0.PRESCRIPTION_TOTAL,sa1_0.REJECTION_REASON,sa1_0.SERVICE_COST,sa1_0.SERVICE_DESCRIPTION,sa1_0.SERVICE_ID,sa1_0.SERVICE_NAME,sa1_0.STATUS,sa1_0.ID_USER from SERVICE_APPROVALS sa1_0 where sa1_0.ID_USER=? order by sa1_0.CREATED_AT desc
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE from HOSPITAL h1_0 where h1_0.ID_HOSPITAL=?
Hibernate: select h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE from HOSPITAL h1_0 where h1_0.ID_HOSPITAL=?
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from "USERS" u1_0 left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where u1_0.ID_USER=?
Hibernate: select u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from "USERS" u1_0 left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where u1_0.ID_USER=?
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select sa1_0.ID_APPROVAL,sa1_0.APPROVAL_CODE,sa1_0.APPROVAL_DATE,sa1_0.COMPLETED_DATE,sa1_0.COVERED_AMOUNT,sa1_0.CREATED_AT,sa1_0.ID_HOSPITAL,sa1_0.PATIENT_AMOUNT,sa1_0.PRESCRIPTION_ID,sa1_0.PRESCRIPTION_TOTAL,sa1_0.REJECTION_REASON,sa1_0.SERVICE_COST,sa1_0.SERVICE_DESCRIPTION,sa1_0.SERVICE_ID,sa1_0.SERVICE_NAME,sa1_0.STATUS,sa1_0.ID_USER from SERVICE_APPROVALS sa1_0 where sa1_0.ID_HOSPITAL=? order by sa1_0.CREATED_AT desc
Hibernate: select sa1_0.ID_APPROVAL,sa1_0.APPROVAL_CODE,sa1_0.APPROVAL_DATE,sa1_0.COMPLETED_DATE,sa1_0.COVERED_AMOUNT,sa1_0.CREATED_AT,sa1_0.ID_HOSPITAL,sa1_0.PATIENT_AMOUNT,sa1_0.PRESCRIPTION_ID,sa1_0.PRESCRIPTION_TOTAL,sa1_0.REJECTION_REASON,sa1_0.SERVICE_COST,sa1_0.SERVICE_DESCRIPTION,sa1_0.SERVICE_ID,sa1_0.SERVICE_NAME,sa1_0.STATUS,sa1_0.ID_USER from SERVICE_APPROVALS sa1_0 where sa1_0.ID_HOSPITAL=? order by sa1_0.CREATED_AT desc
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE from HOSPITAL h1_0 where h1_0.ID_HOSPITAL=?
Hibernate: select h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE from HOSPITAL h1_0 where h1_0.ID_HOSPITAL=?
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from "USERS" u1_0 left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where u1_0.ID_USER=?
Hibernate: select u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from "USERS" u1_0 left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where u1_0.ID_USER=?
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select sa1_0.ID_APPROVAL,sa1_0.APPROVAL_CODE,sa1_0.APPROVAL_DATE,sa1_0.COMPLETED_DATE,sa1_0.COVERED_AMOUNT,sa1_0.CREATED_AT,sa1_0.ID_HOSPITAL,sa1_0.PATIENT_AMOUNT,sa1_0.PRESCRIPTION_ID,sa1_0.PRESCRIPTION_TOTAL,sa1_0.REJECTION_REASON,sa1_0.SERVICE_COST,sa1_0.SERVICE_DESCRIPTION,sa1_0.SERVICE_ID,sa1_0.SERVICE_NAME,sa1_0.STATUS,sa1_0.ID_USER from SERVICE_APPROVALS sa1_0 order by sa1_0.CREATED_AT desc
Hibernate: select sa1_0.ID_APPROVAL,sa1_0.APPROVAL_CODE,sa1_0.APPROVAL_DATE,sa1_0.COMPLETED_DATE,sa1_0.COVERED_AMOUNT,sa1_0.CREATED_AT,sa1_0.ID_HOSPITAL,sa1_0.PATIENT_AMOUNT,sa1_0.PRESCRIPTION_ID,sa1_0.PRESCRIPTION_TOTAL,sa1_0.REJECTION_REASON,sa1_0.SERVICE_COST,sa1_0.SERVICE_DESCRIPTION,sa1_0.SERVICE_ID,sa1_0.SERVICE_NAME,sa1_0.STATUS,sa1_0.ID_USER from SERVICE_APPROVALS sa1_0 order by sa1_0.CREATED_AT desc
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE from HOSPITAL h1_0 where h1_0.ID_HOSPITAL=?
Hibernate: select h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE from HOSPITAL h1_0 where h1_0.ID_HOSPITAL=?
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from "USERS" u1_0 left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where u1_0.ID_USER=?
Hibernate: select u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from "USERS" u1_0 left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where u1_0.ID_USER=?
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE from HOSPITAL h1_0 where h1_0.ID_HOSPITAL=?
Hibernate: select h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE from HOSPITAL h1_0 where h1_0.ID_HOSPITAL=?
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from "USERS" u1_0 left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where u1_0.ID_USER=?
Hibernate: select u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from "USERS" u1_0 left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where u1_0.ID_USER=?
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE from HOSPITAL h1_0 where h1_0.ID_HOSPITAL=?
Hibernate: select h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE from HOSPITAL h1_0 where h1_0.ID_HOSPITAL=?
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from "USERS" u1_0 left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where u1_0.ID_USER=?
Hibernate: select u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from "USERS" u1_0 left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where u1_0.ID_USER=?
]]></system-out>
  </testcase>
  <testcase name="testUpdatePrescription" classname="com.sources.app.dao.ServiceApprovalDAOTest" time="0.172">
    <system-out><![CDATA[2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - insert into "USERS" (ADDRESS,BIRTHDATE,CUI,EMAIL,ENABLED,NAME,PASSWORD,PHONE,ID_POLICY,ROL,STATUS) values (?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into "USERS" (ADDRESS,BIRTHDATE,CUI,EMAIL,ENABLED,NAME,PASSWORD,PHONE,ID_POLICY,ROL,STATUS) values (?,?,?,?,?,?,?,?,?,?,?)
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select last_insert_rowid()
Hibernate: select last_insert_rowid()
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - insert into HOSPITAL (ADDRESS,EMAIL,ENABLED,NAME,PHONE) values (?,?,?,?,?)
Hibernate: insert into HOSPITAL (ADDRESS,EMAIL,ENABLED,NAME,PHONE) values (?,?,?,?,?)
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select last_insert_rowid()
Hibernate: select last_insert_rowid()
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - insert into SERVICE_APPROVALS (APPROVAL_CODE,APPROVAL_DATE,COMPLETED_DATE,COVERED_AMOUNT,CREATED_AT,ID_HOSPITAL,PATIENT_AMOUNT,PRESCRIPTION_ID,PRESCRIPTION_TOTAL,REJECTION_REASON,SERVICE_COST,SERVICE_DESCRIPTION,SERVICE_ID,SERVICE_NAME,STATUS,ID_USER) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into SERVICE_APPROVALS (APPROVAL_CODE,APPROVAL_DATE,COMPLETED_DATE,COVERED_AMOUNT,CREATED_AT,ID_HOSPITAL,PATIENT_AMOUNT,PRESCRIPTION_ID,PRESCRIPTION_TOTAL,REJECTION_REASON,SERVICE_COST,SERVICE_DESCRIPTION,SERVICE_ID,SERVICE_NAME,STATUS,ID_USER) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select last_insert_rowid()
Hibernate: select last_insert_rowid()
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - select sa1_0.ID_APPROVAL,sa1_0.APPROVAL_CODE,sa1_0.APPROVAL_DATE,sa1_0.COMPLETED_DATE,sa1_0.COVERED_AMOUNT,sa1_0.CREATED_AT,sa1_0.ID_HOSPITAL,h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE,sa1_0.PATIENT_AMOUNT,sa1_0.PRESCRIPTION_ID,sa1_0.PRESCRIPTION_TOTAL,sa1_0.REJECTION_REASON,sa1_0.SERVICE_COST,sa1_0.SERVICE_DESCRIPTION,sa1_0.SERVICE_ID,sa1_0.SERVICE_NAME,sa1_0.STATUS,sa1_0.ID_USER,u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from SERVICE_APPROVALS sa1_0 join HOSPITAL h1_0 on h1_0.ID_HOSPITAL=sa1_0.ID_HOSPITAL join "USERS" u1_0 on u1_0.ID_USER=sa1_0.ID_USER left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where sa1_0.ID_APPROVAL=?
Hibernate: select sa1_0.ID_APPROVAL,sa1_0.APPROVAL_CODE,sa1_0.APPROVAL_DATE,sa1_0.COMPLETED_DATE,sa1_0.COVERED_AMOUNT,sa1_0.CREATED_AT,sa1_0.ID_HOSPITAL,h1_0.ID_HOSPITAL,h1_0.ADDRESS,h1_0.EMAIL,h1_0.ENABLED,h1_0.NAME,h1_0.PHONE,sa1_0.PATIENT_AMOUNT,sa1_0.PRESCRIPTION_ID,sa1_0.PRESCRIPTION_TOTAL,sa1_0.REJECTION_REASON,sa1_0.SERVICE_COST,sa1_0.SERVICE_DESCRIPTION,sa1_0.SERVICE_ID,sa1_0.SERVICE_NAME,sa1_0.STATUS,sa1_0.ID_USER,u1_0.ID_USER,u1_0.ADDRESS,u1_0.BIRTHDATE,u1_0.CUI,u1_0.EMAIL,u1_0.ENABLED,u1_0.NAME,u1_0.PASSWORD,u1_0.PHONE,p1_0.ID_POLICY,p1_0.ENABLED,p1_0.EXPIRATION_DATE,p1_0.PERCENTAGE,u1_0.ROL,u1_0.STATUS from SERVICE_APPROVALS sa1_0 join HOSPITAL h1_0 on h1_0.ID_HOSPITAL=sa1_0.ID_HOSPITAL join "USERS" u1_0 on u1_0.ID_USER=sa1_0.ID_USER left join POLICY p1_0 on p1_0.ID_POLICY=u1_0.ID_POLICY where sa1_0.ID_APPROVAL=?
2025-09-03 22:58:09 [main] DEBUG org.hibernate.SQL - update SERVICE_APPROVALS set APPROVAL_CODE=?,APPROVAL_DATE=?,COMPLETED_DATE=?,COVERED_AMOUNT=?,CREATED_AT=?,ID_HOSPITAL=?,PATIENT_AMOUNT=?,PRESCRIPTION_ID=?,PRESCRIPTION_TOTAL=?,REJECTION_REASON=?,SERVICE_COST=?,SERVICE_DESCRIPTION=?,SERVICE_ID=?,SERVICE_NAME=?,STATUS=?,ID_USER=? where ID_APPROVAL=?
Hibernate: update SERVICE_APPROVALS set APPROVAL_CODE=?,APPROVAL_DATE=?,COMPLETED_DATE=?,COVERED_AMOUNT=?,CREATED_AT=?,ID_HOSPITAL=?,PATIENT_AMOUNT=?,PRESCRIPTION_ID=?,PRESCRIPTION_TOTAL=?,REJECTION_REASON=?,SERVICE_COST=?,SERVICE_DESCRIPTION=?,SERVICE_ID=?,SERVICE_NAME=?,STATUS=?,ID_USER=? where ID_APPROVAL=?
]]></system-out>
  </testcase>
</testsuite>