{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport { useUserStore } from \"@/stores/userStore\";\nconst userStore = useUserStore();\nconst prescriptions = ref([]);\nconst errorMessage = ref('');\nconst ip = process.env.VUE_APP_API_IP || 'localhost';\nconst fetchPrescriptions = async () => {\n  try {\n    const response = await axios.get(`http://${ip}:8081/api2/prescription_medicines`);\n    const allPrescriptions = response.data;\n\n    // Filtrar recetas que pertenecen al usuario actual\n    const userPrescriptions = allPrescriptions.filter(p => p.prescription.user.idUser == userStore.user.idUser);\n\n    // Agrupar recetas por prescriptionId\n    const grouped = {};\n    userPrescriptions.forEach(p => {\n      const prescId = p.id.prescriptionId;\n      if (!grouped[prescId]) {\n        grouped[prescId] = {\n          prescription: p.prescription,\n          medicines: []\n        };\n      }\n      grouped[prescId].medicines.push({\n        medicine: p.medicine,\n        dosis: p.dosis,\n        frecuencia: p.frecuencia,\n        duracion: p.duracion\n      });\n    });\n\n    // Filtrar recetas que tienen una orden con status \"Completado\"\n    const groupsArray = Object.values(grouped);\n    const filteredGroups = [];\n    for (const group of groupsArray) {\n      try {\n        const orderResponse = await axios.get(`http://${ip}:8081/api2/orders?id=${group.prescription.idPrescription}`);\n        // Si se encuentra una orden y su status es \"Completado\", no incluirla\n        if (orderResponse.data && orderResponse.data.status === \"Completado\") {\n          continue;\n        } else {\n          filteredGroups.push(group);\n        }\n      } catch (error) {\n        // Si hay error al obtener la orden, incluir la receta\n        filteredGroups.push(group);\n      }\n    }\n    prescriptions.value = filteredGroups;\n    console.log(\"RECETAS AGRUPADAS:\", prescriptions.value, userStore.user.idUser);\n  } catch (error) {\n    console.error(\"Error al obtener las recetas:\", error);\n    errorMessage.value = 'Error al obtener las recetas. Por favor, inténtelo de nuevo.';\n  }\n};\nonMounted(() => {\n  fetchPrescriptions();\n});","map":{"version":3,"names":["ref","onMounted","axios","useUserStore","userStore","prescriptions","errorMessage","ip","process","env","VUE_APP_API_IP","fetchPrescriptions","response","get","allPrescriptions","data","userPrescriptions","filter","p","prescription","user","idUser","grouped","forEach","prescId","id","prescriptionId","medicines","push","medicine","dosis","frecuencia","duracion","groupsArray","Object","values","filteredGroups","group","orderResponse","idPrescription","status","error","value","console","log"],"sources":["/Users/nohelestradap/Documents/VsCode/ensurancePharmacy/pharmacy/src/pages/Prescriptions.vue"],"sourcesContent":["<template>\n  <div class=\"prescriptions-container\">\n    <h2 class=\"text-2xl font-bold text-center text-blue-800 mb-4\">\n      Todas las Recetas\n    </h2>\n\n    <!-- Mensaje de error si lo hay -->\n    <div v-if=\"errorMessage\" class=\"mb-4 text-red-600 text-center\">\n      {{ errorMessage }}\n    </div>\n\n    <!-- Lista de recetas -->\n    <div v-if=\"prescriptions.length > 0\" class=\"prescriptions-list\">\n      <div v-for=\"group in prescriptions\" :key=\"group.prescription.idPrescription\" class=\"prescription-item\">\n        <h3 class=\"text-xl font-bold\">{{ group.prescription.user.name }}</h3>\n        <p><strong>ID Receta:</strong> {{ group.prescription.idPrescription }}</p>\n        <p><strong>Diagnóstico:</strong> {{ group.prescription.diagnosis || 'No especificado' }}</p>\n        <p><strong>Fecha:</strong> {{ group.prescription.date || 'No disponible' }}</p>\n\n        <!-- Tabla de Medicinas -->\n        <table class=\"medicine-table\">\n          <thead>\n            <tr>\n              <th>Nombre</th>\n              <th>Concentración</th>\n              <th>Presentación</th>\n              <th>Dosis</th>\n              <th>Frecuencia</th>\n              <th>Duración</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"medicineEntry in group.medicines\" :key=\"medicineEntry.medicine.idMedicine\">\n              <td>{{ medicineEntry.medicine.name }}</td>\n              <td>{{ medicineEntry.medicine.concentration }}</td>\n              <td>{{ medicineEntry.medicine.presentacion }}</td>\n              <td>{{ medicineEntry.dosis }}</td>\n              <td>{{ medicineEntry.frecuencia }}</td>\n              <td>{{ medicineEntry.duracion }} días</td>\n            </tr>\n          </tbody>\n        </table>\n        <button @click=\"$router.push({ name: 'PrescriptionPay', params: { id: group.prescription.idPrescription } })\">Comprar</button>\n      </div>\n    </div>\n\n    <!-- Mensaje si no hay recetas -->\n    <div v-else class=\"text-center text-gray-600\">\n      No hay recetas disponibles.\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport { useUserStore } from \"@/stores/userStore\";\nconst userStore = useUserStore();\n\nconst prescriptions = ref([]);\nconst errorMessage = ref('');\nconst ip = process.env.VUE_APP_API_IP || 'localhost';\n\nconst fetchPrescriptions = async () => {\n  try {\n    const response = await axios.get(`http://${ip}:8081/api2/prescription_medicines`);\n    const allPrescriptions = response.data;\n\n    // Filtrar recetas que pertenecen al usuario actual\n    const userPrescriptions = allPrescriptions.filter(p => p.prescription.user.idUser == userStore.user.idUser);\n\n    // Agrupar recetas por prescriptionId\n    const grouped = {};\n    userPrescriptions.forEach(p => {\n      const prescId = p.id.prescriptionId;\n      if (!grouped[prescId]) {\n        grouped[prescId] = {\n          prescription: p.prescription,\n          medicines: []\n        };\n      }\n      grouped[prescId].medicines.push({\n        medicine: p.medicine,\n        dosis: p.dosis,\n        frecuencia: p.frecuencia,\n        duracion: p.duracion\n      });\n    });\n\n    // Filtrar recetas que tienen una orden con status \"Completado\"\n    const groupsArray = Object.values(grouped);\n    const filteredGroups = [];\n\n    for (const group of groupsArray) {\n      try {\n        const orderResponse = await axios.get(`http://${ip}:8081/api2/orders?id=${group.prescription.idPrescription}`);\n        // Si se encuentra una orden y su status es \"Completado\", no incluirla\n        if (orderResponse.data && orderResponse.data.status === \"Completado\") {\n          continue;\n        } else {\n          filteredGroups.push(group);\n        }\n      } catch (error) {\n        // Si hay error al obtener la orden, incluir la receta\n        filteredGroups.push(group);\n      }\n    }\n\n    prescriptions.value = filteredGroups;\n\n    console.log(\"RECETAS AGRUPADAS:\", prescriptions.value, userStore.user.idUser);\n  } catch (error) {\n    console.error(\"Error al obtener las recetas:\", error);\n    errorMessage.value = 'Error al obtener las recetas. Por favor, inténtelo de nuevo.';\n  }\n};\n\nonMounted(() => {\n  fetchPrescriptions();\n});\n</script>\n\n<style scoped>\n.prescriptions-container {\n  padding: 50px;\n  background-color: #f8f9fa;\n}\n\n.prescriptions-list {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.prescription-item {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.medicine-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 10px;\n}\n\n.medicine-table th, .medicine-table td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: center;\n}\n\n.medicine-table th {\n  background-color: #f4f4f4;\n  font-weight: bold;\n}\n</style>\n\n"],"mappings":";;;;AAsDA,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,OAAOC,KAAI,MAAO,OAAO;AACzB,SAASC,YAAW,QAAS,oBAAoB;AACjD,MAAMC,SAAQ,GAAID,YAAY,CAAC,CAAC;AAEhC,MAAME,aAAY,GAAIL,GAAG,CAAC,EAAE,CAAC;AAC7B,MAAMM,YAAW,GAAIN,GAAG,CAAC,EAAE,CAAC;AAC5B,MAAMO,EAAC,GAAIC,OAAO,CAACC,GAAG,CAACC,cAAa,IAAK,WAAW;AAEpD,MAAMC,kBAAiB,GAAI,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMC,QAAO,GAAI,MAAMV,KAAK,CAACW,GAAG,CAAC,UAAUN,EAAE,mCAAmC,CAAC;IACjF,MAAMO,gBAAe,GAAIF,QAAQ,CAACG,IAAI;;IAEtC;IACA,MAAMC,iBAAgB,GAAIF,gBAAgB,CAACG,MAAM,CAACC,CAAA,IAAKA,CAAC,CAACC,YAAY,CAACC,IAAI,CAACC,MAAK,IAAKjB,SAAS,CAACgB,IAAI,CAACC,MAAM,CAAC;;IAE3G;IACA,MAAMC,OAAM,GAAI,CAAC,CAAC;IAClBN,iBAAiB,CAACO,OAAO,CAACL,CAAA,IAAK;MAC7B,MAAMM,OAAM,GAAIN,CAAC,CAACO,EAAE,CAACC,cAAc;MACnC,IAAI,CAACJ,OAAO,CAACE,OAAO,CAAC,EAAE;QACrBF,OAAO,CAACE,OAAO,IAAI;UACjBL,YAAY,EAAED,CAAC,CAACC,YAAY;UAC5BQ,SAAS,EAAE;QACb,CAAC;MACH;MACAL,OAAO,CAACE,OAAO,CAAC,CAACG,SAAS,CAACC,IAAI,CAAC;QAC9BC,QAAQ,EAAEX,CAAC,CAACW,QAAQ;QACpBC,KAAK,EAAEZ,CAAC,CAACY,KAAK;QACdC,UAAU,EAAEb,CAAC,CAACa,UAAU;QACxBC,QAAQ,EAAEd,CAAC,CAACc;MACd,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,MAAMC,WAAU,GAAIC,MAAM,CAACC,MAAM,CAACb,OAAO,CAAC;IAC1C,MAAMc,cAAa,GAAI,EAAE;IAEzB,KAAK,MAAMC,KAAI,IAAKJ,WAAW,EAAE;MAC/B,IAAI;QACF,MAAMK,aAAY,GAAI,MAAMpC,KAAK,CAACW,GAAG,CAAC,UAAUN,EAAE,wBAAwB8B,KAAK,CAAClB,YAAY,CAACoB,cAAc,EAAE,CAAC;QAC9G;QACA,IAAID,aAAa,CAACvB,IAAG,IAAKuB,aAAa,CAACvB,IAAI,CAACyB,MAAK,KAAM,YAAY,EAAE;UACpE;QACF,OAAO;UACLJ,cAAc,CAACR,IAAI,CAACS,KAAK,CAAC;QAC5B;MACF,EAAE,OAAOI,KAAK,EAAE;QACd;QACAL,cAAc,CAACR,IAAI,CAACS,KAAK,CAAC;MAC5B;IACF;IAEAhC,aAAa,CAACqC,KAAI,GAAIN,cAAc;IAEpCO,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEvC,aAAa,CAACqC,KAAK,EAAEtC,SAAS,CAACgB,IAAI,CAACC,MAAM,CAAC;EAC/E,EAAE,OAAOoB,KAAK,EAAE;IACdE,OAAO,CAACF,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrDnC,YAAY,CAACoC,KAAI,GAAI,8DAA8D;EACrF;AACF,CAAC;AAEDzC,SAAS,CAAC,MAAM;EACdU,kBAAkB,CAAC,CAAC;AACtB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}