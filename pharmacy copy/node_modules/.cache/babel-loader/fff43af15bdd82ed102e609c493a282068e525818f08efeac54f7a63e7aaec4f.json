{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport axios from 'axios';\nexport default {\n  __name: 'Prescriptions',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const recipes = ref([]);\n    const errorMessage = ref('');\n    const fetchPrescriptions = async () => {\n      try {\n        // Obtener el nombre de usuario (mel) del localStorage\n        let username = 'mel'; // Valor por defecto\n        try {\n          const userData = JSON.parse(localStorage.getItem('user'));\n          if (userData && userData.name) {\n            username = userData.name; // Tomar el valor \"mel\" del campo name\n            console.log(\"Nombre de usuario obtenido:\", username);\n          } else {\n            // Intentar obtener desde session\n            const sessionData = JSON.parse(localStorage.getItem('session'));\n            if (sessionData && sessionData.name) {\n              username = sessionData.name;\n              console.log(\"Nombre de usuario obtenido de session:\", username);\n            } else {\n              console.warn(\"No se encontró el nombre de usuario en localStorage\");\n            }\n          }\n        } catch (err) {\n          console.error(\"Error al obtener el usuario del localStorage:\", err);\n        }\n\n        // Consumir el API con el parámetro username (mel)\n        console.log(`Consultando recetas para el usuario: ${username}`);\n        const response = await axios.get(`http://127.0.0.1:5051/recipes?username=${username}`);\n        if (response.data && response.data.recipes) {\n          recipes.value = response.data.recipes;\n          console.log(\"RECETAS OBTENIDAS:\", recipes.value);\n        } else {\n          console.warn(\"La respuesta del API no tiene el formato esperado\", response.data);\n          recipes.value = [];\n          errorMessage.value = 'No se encontraron recetas para este usuario.';\n        }\n      } catch (error) {\n        console.error(\"Error al obtener las recetas:\", error);\n        recipes.value = [];\n        errorMessage.value = 'Error al obtener las recetas. Por favor, inténtelo de nuevo.';\n      }\n    };\n    onMounted(() => {\n      fetchPrescriptions();\n    });\n    const __returned__ = {\n      recipes,\n      errorMessage,\n      fetchPrescriptions,\n      ref,\n      onMounted,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","recipes","errorMessage","fetchPrescriptions","username","userData","JSON","parse","localStorage","getItem","name","console","log","sessionData","warn","err","error","response","get","data","value"],"sources":["/Users/nohelestradap/Documents/VsCode/ensurancePharmacy/pharmacy/src/pages/Prescriptions.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n  <div class=\"prescriptions-container\">\n    <h2 class=\"text-2xl font-bold text-center text-blue-800 mb-4\">\n      Todas las Recetas\n    </h2>\n\n    <!-- Mensaje de error si lo hay -->\n    <div v-if=\"errorMessage\" class=\"mb-4 text-red-600 text-center\">\n      {{ errorMessage }}\n    </div>\n    <!-- Lista de recetas -->\n    <div v-if=\"recipes && recipes.length > 0\" class=\"prescriptions-list\">\n      <div v-for=\"recipe in recipes\" :key=\"recipe._id\" class=\"prescription-item\">\n        <h3 class=\"text-xl font-bold\">{{ recipe.patient && recipe.patient.username }}</h3>\n        <p v-if=\"recipe.patient && recipe.patient.email\"><strong>Email:</strong> {{ recipe.patient.email }}</p>\n        <p><strong>ID Receta:</strong> {{ recipe._id }}</p>\n        <p><strong>Diagnóstico:</strong> {{ recipe.diagnostic || 'No especificado' }}</p>\n        <p v-if=\"recipe.created_at\"><strong>Fecha:</strong> {{ recipe.created_at }}</p>\n\n        <!-- Tabla de Medicinas -->\n        <table class=\"medicine-table\" v-if=\"recipe.medicines && recipe.medicines.length > 0\">\n          <thead>\n          <tr>\n            <th>Nombre</th>\n            <th>Concentración</th>\n            <th>Presentación</th>\n            <th>Dosis</th>\n            <th>Frecuencia</th>\n            <th>Duración</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr v-for=\"medicine in recipe.medicines\" :key=\"medicine._id\">\n            <td>{{ medicine.principioActivo }}</td>\n            <td>{{ medicine.concentracion }}</td>\n            <td>{{ medicine.presentacion }}</td>\n            <td>{{ medicine.dosis }}</td>\n            <td>{{ medicine.frecuencia }}</td>\n            <td>{{ medicine.duracion }}</td>\n          </tr>\n          </tbody>\n        </table>\n        <p v-if=\"recipe.has_insurance\" class=\"insurance-info\">Con seguro médico</p>\n        <button class=\"buy-button\" @click=\"$router.push({ name: 'PrescriptionPay', params: { id: recipe._id } })\">Comprar</button>\n      </div>\n    </div>\n\n    <!-- Mensaje si no hay recetas -->\n    <div v-else class=\"text-center text-gray-600\">\n      No hay recetas disponibles.\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\n\nconst recipes = ref([]);\nconst errorMessage = ref('');\n\nconst fetchPrescriptions = async () => {\n  try {\n    // Obtener el nombre de usuario (mel) del localStorage\n    let username = 'mel'; // Valor por defecto\n    try {\n      const userData = JSON.parse(localStorage.getItem('user'));\n      if (userData && userData.name) {\n        username = userData.name; // Tomar el valor \"mel\" del campo name\n        console.log(\"Nombre de usuario obtenido:\", username);\n      } else {\n        // Intentar obtener desde session\n        const sessionData = JSON.parse(localStorage.getItem('session'));\n        if (sessionData && sessionData.name) {\n          username = sessionData.name;\n          console.log(\"Nombre de usuario obtenido de session:\", username);\n        } else {\n          console.warn(\"No se encontró el nombre de usuario en localStorage\");\n        }\n      }\n    } catch (err) {\n      console.error(\"Error al obtener el usuario del localStorage:\", err);\n    }\n\n    // Consumir el API con el parámetro username (mel)\n    console.log(`Consultando recetas para el usuario: ${username}`);\n    const response = await axios.get(`http://127.0.0.1:5051/recipes?username=${username}`);\n    \n    if (response.data && response.data.recipes) {\n      recipes.value = response.data.recipes;\n      console.log(\"RECETAS OBTENIDAS:\", recipes.value);\n    } else {\n      console.warn(\"La respuesta del API no tiene el formato esperado\", response.data);\n      recipes.value = [];\n      errorMessage.value = 'No se encontraron recetas para este usuario.';\n    }\n  } catch (error) {\n    console.error(\"Error al obtener las recetas:\", error);\n    recipes.value = [];\n    errorMessage.value = 'Error al obtener las recetas. Por favor, inténtelo de nuevo.';\n  }\n};\n\nonMounted(() => {\n  fetchPrescriptions();\n});\n</script>\n\n<style scoped>\n.prescriptions-container {\n  padding: 50px;\n  background-color: #f8f9fa;\n}\n\n.prescriptions-list {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.prescription-item {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.medicine-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 10px;\n  margin-bottom: 15px;\n}\n\n.medicine-table th, .medicine-table td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: center;\n}\n\n.medicine-table th {\n  background-color: #f4f4f4;\n  font-weight: bold;\n}\n\n.insurance-info {\n  color: #4caf50;\n  font-weight: bold;\n  margin: 10px 0;\n}\n\n.buy-button {\n  background-color: #4caf50;\n  color: white;\n  padding: 8px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  border: none;\n  font-weight: bold;\n}\n\n.buy-button:hover {\n  background-color: #45a049;\n}\n</style>"],"mappings":"AAwDA,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,OAAOC,KAAK,MAAM,OAAO;;;;;;;IAEzB,MAAMC,OAAO,GAAGH,GAAG,CAAC,EAAE,CAAC;IACvB,MAAMI,YAAY,GAAGJ,GAAG,CAAC,EAAE,CAAC;IAE5B,MAAMK,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF;QACA,IAAIC,QAAQ,GAAG,KAAK,CAAC,CAAC;QACtB,IAAI;UACF,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;UACzD,IAAIJ,QAAQ,IAAIA,QAAQ,CAACK,IAAI,EAAE;YAC7BN,QAAQ,GAAGC,QAAQ,CAACK,IAAI,CAAC,CAAC;YAC1BC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAER,QAAQ,CAAC;UACtD,CAAC,MAAM;YACL;YACA,MAAMS,WAAW,GAAGP,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;YAC/D,IAAII,WAAW,IAAIA,WAAW,CAACH,IAAI,EAAE;cACnCN,QAAQ,GAAGS,WAAW,CAACH,IAAI;cAC3BC,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAER,QAAQ,CAAC;YACjE,CAAC,MAAM;cACLO,OAAO,CAACG,IAAI,CAAC,qDAAqD,CAAC;YACrE;UACF;QACF,CAAC,CAAC,OAAOC,GAAG,EAAE;UACZJ,OAAO,CAACK,KAAK,CAAC,+CAA+C,EAAED,GAAG,CAAC;QACrE;;QAEA;QACAJ,OAAO,CAACC,GAAG,CAAC,wCAAwCR,QAAQ,EAAE,CAAC;QAC/D,MAAMa,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,0CAA0Cd,QAAQ,EAAE,CAAC;QAEtF,IAAIa,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAAClB,OAAO,EAAE;UAC1CA,OAAO,CAACmB,KAAK,GAAGH,QAAQ,CAACE,IAAI,CAAClB,OAAO;UACrCU,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEX,OAAO,CAACmB,KAAK,CAAC;QAClD,CAAC,MAAM;UACLT,OAAO,CAACG,IAAI,CAAC,mDAAmD,EAAEG,QAAQ,CAACE,IAAI,CAAC;UAChFlB,OAAO,CAACmB,KAAK,GAAG,EAAE;UAClBlB,YAAY,CAACkB,KAAK,GAAG,8CAA8C;QACrE;MACF,CAAC,CAAC,OAAOJ,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrDf,OAAO,CAACmB,KAAK,GAAG,EAAE;QAClBlB,YAAY,CAACkB,KAAK,GAAG,8DAA8D;MACrF;IACF,CAAC;IAEDrB,SAAS,CAAC,MAAM;MACdI,kBAAkB,CAAC,CAAC;IACtB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}