{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { createRouter, createWebHistory } from 'vue-router';\nimport Home from '../pages/Home.vue'; // Ajustar rutas relativas\nimport Login from '../pages/Login.vue';\nimport Dashboard from '../pages/Dashboard.vue';\nimport Register from '../pages/Register.vue';\nimport Catalogo from '../pages/Catalogo.vue';\nimport Aseguradoras from '@/pages/Aseguradoras.vue';\nimport Ofertas from '@/pages/Ofertas.vue';\nimport ProductoDetalle from '@/pages/ProductoDetalle.vue'; // new import\nimport VerificarCompra from '@/pages/VerificarCompra.vue'; // nueva página de verificación\nimport Receta from '@/components/Receta.vue';\nimport CreateProduct from '@/pages/CreateProduct.vue';\nimport Prescriptions from '@/pages/Prescriptions.vue';\nimport { authService } from '@/services/authService';\nimport Cart from \"@/components/Cart.vue\";\nimport AdminDash from '@/pages/AdminDash.vue'; // Importar el dashboard administrativo\nimport DetalleReceta from '@/pages/DetalleReceta.vue';\n\n// Rutas para usuarios públicos y autenticados\nconst userRoutes = [{\n  path: '/',\n  component: Home\n}, {\n  path: '/login',\n  component: Login\n}, {\n  path: '/register',\n  component: Register\n}, {\n  path: '/catalogo',\n  component: Catalogo\n}, {\n  path: '/aseguradoras',\n  component: Aseguradoras\n}, {\n  path: '/ofertas',\n  component: Ofertas\n}, {\n  path: '/producto/:id',\n  name: 'ProductoDetalle',\n  component: ProductoDetalle\n}, {\n  path: '/verificar-compra/:id',\n  name: 'VerificarCompra',\n  component: VerificarCompra,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/receta',\n  component: Receta\n}, {\n  path: '/create-product',\n  name: 'CreateProduct',\n  component: CreateProduct\n}, {\n  path: '/prescriptions',\n  name: 'Prescriptions',\n  component: Prescriptions\n}, {\n  path: '/dashboard',\n  component: Dashboard,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/cart',\n  name: 'Cart',\n  component: Cart\n}, {\n  path: '/detalle-receta/:id',\n  name: 'DetalleReceta',\n  component: DetalleReceta,\n  meta: {\n    requiresAuth: true\n  }\n}];\n\n// Rutas exclusivas para administradores\nconst adminRoutes = [{\n  path: '/admin/create-product',\n  name: 'AdminCreateProduct',\n  component: CreateProduct,\n  meta: {\n    admin: true\n  }\n}, {\n  path: '/admindash',\n  name: 'AdminDash',\n  component: AdminDash,\n  meta: {\n    admin: true\n  }\n}];\nconst routes = [...userRoutes, ...adminRoutes];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n  const adminOnly = to.matched.some(record => record.meta.admin);\n\n  // Intentar obtener el usuario del servicio de autenticación\n  const currentUser = authService.getCurrentUser();\n  console.log(\"Router: Usuario actual:\", currentUser);\n\n  // Para rutas administrativas, verificar también en localStorage\n  if (adminOnly) {\n    console.log(\"Ruta protegida para admin:\", to.path);\n\n    // Verificar en el servicio de autenticación\n    if (currentUser && currentUser.role === 'admin') {\n      console.log(\"Acceso permitido por authService\");\n      return next();\n    }\n\n    // Verificar en localStorage como respaldo\n    try {\n      // Verificar por el campo role directamente\n      const storedRole = localStorage.getItem('role');\n      if (storedRole === 'admin') {\n        console.log(\"Acceso permitido por localStorage.role\");\n        return next();\n      }\n\n      // Verificar en el objeto user\n      const storedUser = localStorage.getItem('user');\n      if (storedUser) {\n        const user = JSON.parse(storedUser);\n        if (user.role === 'admin') {\n          console.log(\"Acceso permitido por localStorage.user\");\n          return next();\n        }\n      }\n\n      // Verificar en session\n      const storedSession = localStorage.getItem('session');\n      if (storedSession) {\n        const session = JSON.parse(storedSession);\n        if (session.role === 'admin') {\n          console.log(\"Acceso permitido por localStorage.session\");\n          return next();\n        }\n      }\n    } catch (e) {\n      console.error(\"Error verificando el rol en localStorage:\", e);\n    }\n\n    // Si ninguna verificación funcionó, redirigir\n    console.log(\"Acceso denegado a ruta admin\");\n    return next('/');\n  }\n\n  // Para rutas que requieren autenticación (no admin)\n  if (requiresAuth && !currentUser) {\n    console.log(\"Ruta requiere autenticación - redirigiendo a login\");\n    return next('/login');\n  }\n\n  // Acceso permitido para otras rutas\n  return next();\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","Home","Login","Dashboard","Register","Catalogo","Aseguradoras","Ofertas","ProductoDetalle","VerificarCompra","Receta","CreateProduct","Prescriptions","authService","Cart","AdminDash","DetalleReceta","userRoutes","path","component","name","meta","requiresAuth","adminRoutes","admin","routes","router","history","process","env","BASE_URL","beforeEach","to","from","next","matched","some","record","adminOnly","currentUser","getCurrentUser","console","log","role","storedRole","localStorage","getItem","storedUser","user","JSON","parse","storedSession","session","e","error"],"sources":["/Users/nohelestradap/Documents/VsCode/ensurancePharmacy/pharmacy copy/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router';\nimport Home from '../pages/Home.vue'; // Ajustar rutas relativas\nimport Login from '../pages/Login.vue';\nimport Dashboard from '../pages/Dashboard.vue';\nimport Register from '../pages/Register.vue';\nimport Catalogo from '../pages/Catalogo.vue';\nimport Aseguradoras from '@/pages/Aseguradoras.vue';\nimport Ofertas from '@/pages/Ofertas.vue';\nimport ProductoDetalle from '@/pages/ProductoDetalle.vue'; // new import\nimport VerificarCompra from '@/pages/VerificarCompra.vue'; // nueva página de verificación\nimport Receta from '@/components/Receta.vue';\nimport CreateProduct from '@/pages/CreateProduct.vue';\nimport Prescriptions from '@/pages/Prescriptions.vue';\nimport { authService } from '@/services/authService';\nimport Cart from \"@/components/Cart.vue\";\nimport AdminDash from '@/pages/AdminDash.vue'; // Importar el dashboard administrativo\nimport DetalleReceta from '@/pages/DetalleReceta.vue'\n\n// Rutas para usuarios públicos y autenticados\nconst userRoutes = [\n  { path: '/', component: Home },\n  { path: '/login', component: Login },\n  { path: '/register', component: Register },\n  { path: '/catalogo', component: Catalogo },\n  { path: '/aseguradoras', component: Aseguradoras },\n  { path: '/ofertas', component: Ofertas },\n  { path: '/producto/:id', name: 'ProductoDetalle', component: ProductoDetalle },\n  { path: '/verificar-compra/:id', name: 'VerificarCompra', component: VerificarCompra, meta: { requiresAuth: true } },\n  { path: '/receta', component: Receta },\n  { path: '/create-product', name: 'CreateProduct', component: CreateProduct },\n  { path: '/prescriptions', name: 'Prescriptions', component: Prescriptions },\n  { path: '/dashboard', component: Dashboard, meta: { requiresAuth: true } },\n  {path: '/cart', name: 'Cart', component: Cart},\n  {\n    path: '/detalle-receta/:id',\n    name: 'DetalleReceta',\n    component: DetalleReceta,\n    meta: { requiresAuth: true }\n  },\n];\n\n// Rutas exclusivas para administradores\nconst adminRoutes = [\n  {\n    path: '/admin/create-product',\n    name: 'AdminCreateProduct',\n    component: CreateProduct,\n    meta: { admin: true }\n  },\n  {\n    path: '/admindash',\n    name: 'AdminDash',\n    component: AdminDash,\n    meta: { admin: true }\n  }\n];\n\nconst routes = [\n  ...userRoutes,\n  ...adminRoutes\n];\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes,\n});\n\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n  const adminOnly = to.matched.some(record => record.meta.admin);\n  \n  // Intentar obtener el usuario del servicio de autenticación\n  const currentUser = authService.getCurrentUser();\n  console.log(\"Router: Usuario actual:\", currentUser);\n  \n  // Para rutas administrativas, verificar también en localStorage\n  if (adminOnly) {\n    console.log(\"Ruta protegida para admin:\", to.path);\n    \n    // Verificar en el servicio de autenticación\n    if (currentUser && currentUser.role === 'admin') {\n      console.log(\"Acceso permitido por authService\");\n      return next();\n    }\n    \n    // Verificar en localStorage como respaldo\n    try {\n      // Verificar por el campo role directamente\n      const storedRole = localStorage.getItem('role');\n      if (storedRole === 'admin') {\n        console.log(\"Acceso permitido por localStorage.role\");\n        return next();\n      }\n      \n      // Verificar en el objeto user\n      const storedUser = localStorage.getItem('user');\n      if (storedUser) {\n        const user = JSON.parse(storedUser);\n        if (user.role === 'admin') {\n          console.log(\"Acceso permitido por localStorage.user\");\n          return next();\n        }\n      }\n      \n      // Verificar en session\n      const storedSession = localStorage.getItem('session');\n      if (storedSession) {\n        const session = JSON.parse(storedSession);\n        if (session.role === 'admin') {\n          console.log(\"Acceso permitido por localStorage.session\");\n          return next();\n        }\n      }\n    } catch (e) {\n      console.error(\"Error verificando el rol en localStorage:\", e);\n    }\n    \n    // Si ninguna verificación funcionó, redirigir\n    console.log(\"Acceso denegado a ruta admin\");\n    return next('/');\n  }\n  \n  // Para rutas que requieren autenticación (no admin)\n  if (requiresAuth && !currentUser) {\n    console.log(\"Ruta requiere autenticación - redirigiendo a login\");\n    return next('/login');\n  }\n  \n  // Acceso permitido para otras rutas\n  return next();\n});\n\nexport default router;"],"mappings":";;AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,IAAI,MAAM,mBAAmB,CAAC,CAAC;AACtC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,YAAY,MAAM,0BAA0B;AACnD,OAAOC,OAAO,MAAM,qBAAqB;AACzC,OAAOC,eAAe,MAAM,6BAA6B,CAAC,CAAC;AAC3D,OAAOC,eAAe,MAAM,6BAA6B,CAAC,CAAC;AAC3D,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,aAAa,MAAM,2BAA2B;AACrD,OAAOC,aAAa,MAAM,2BAA2B;AACrD,SAASC,WAAW,QAAQ,wBAAwB;AACpD,OAAOC,IAAI,MAAM,uBAAuB;AACxC,OAAOC,SAAS,MAAM,uBAAuB,CAAC,CAAC;AAC/C,OAAOC,aAAa,MAAM,2BAA2B;;AAErD;AACA,MAAMC,UAAU,GAAG,CACjB;EAAEC,IAAI,EAAE,GAAG;EAAEC,SAAS,EAAElB;AAAK,CAAC,EAC9B;EAAEiB,IAAI,EAAE,QAAQ;EAAEC,SAAS,EAAEjB;AAAM,CAAC,EACpC;EAAEgB,IAAI,EAAE,WAAW;EAAEC,SAAS,EAAEf;AAAS,CAAC,EAC1C;EAAEc,IAAI,EAAE,WAAW;EAAEC,SAAS,EAAEd;AAAS,CAAC,EAC1C;EAAEa,IAAI,EAAE,eAAe;EAAEC,SAAS,EAAEb;AAAa,CAAC,EAClD;EAAEY,IAAI,EAAE,UAAU;EAAEC,SAAS,EAAEZ;AAAQ,CAAC,EACxC;EAAEW,IAAI,EAAE,eAAe;EAAEE,IAAI,EAAE,iBAAiB;EAAED,SAAS,EAAEX;AAAgB,CAAC,EAC9E;EAAEU,IAAI,EAAE,uBAAuB;EAAEE,IAAI,EAAE,iBAAiB;EAAED,SAAS,EAAEV,eAAe;EAAEY,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAAE,CAAC,EACpH;EAAEJ,IAAI,EAAE,SAAS;EAAEC,SAAS,EAAET;AAAO,CAAC,EACtC;EAAEQ,IAAI,EAAE,iBAAiB;EAAEE,IAAI,EAAE,eAAe;EAAED,SAAS,EAAER;AAAc,CAAC,EAC5E;EAAEO,IAAI,EAAE,gBAAgB;EAAEE,IAAI,EAAE,eAAe;EAAED,SAAS,EAAEP;AAAc,CAAC,EAC3E;EAAEM,IAAI,EAAE,YAAY;EAAEC,SAAS,EAAEhB,SAAS;EAAEkB,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAAE,CAAC,EAC1E;EAACJ,IAAI,EAAE,OAAO;EAAEE,IAAI,EAAE,MAAM;EAAED,SAAS,EAAEL;AAAI,CAAC,EAC9C;EACEI,IAAI,EAAE,qBAAqB;EAC3BE,IAAI,EAAE,eAAe;EACrBD,SAAS,EAAEH,aAAa;EACxBK,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAC7B,CAAC,CACF;;AAED;AACA,MAAMC,WAAW,GAAG,CAClB;EACEL,IAAI,EAAE,uBAAuB;EAC7BE,IAAI,EAAE,oBAAoB;EAC1BD,SAAS,EAAER,aAAa;EACxBU,IAAI,EAAE;IAAEG,KAAK,EAAE;EAAK;AACtB,CAAC,EACD;EACEN,IAAI,EAAE,YAAY;EAClBE,IAAI,EAAE,WAAW;EACjBD,SAAS,EAAEJ,SAAS;EACpBM,IAAI,EAAE;IAAEG,KAAK,EAAE;EAAK;AACtB,CAAC,CACF;AAED,MAAMC,MAAM,GAAG,CACb,GAAGR,UAAU,EACb,GAAGM,WAAW,CACf;AAED,MAAMG,MAAM,GAAG3B,YAAY,CAAC;EAC1B4B,OAAO,EAAE3B,gBAAgB,CAAC4B,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAC/CL;AACF,CAAC,CAAC;AAEFC,MAAM,CAACK,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMZ,YAAY,GAAGU,EAAE,CAACG,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAAChB,IAAI,CAACC,YAAY,CAAC;EACxE,MAAMgB,SAAS,GAAGN,EAAE,CAACG,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAAChB,IAAI,CAACG,KAAK,CAAC;;EAE9D;EACA,MAAMe,WAAW,GAAG1B,WAAW,CAAC2B,cAAc,CAAC,CAAC;EAChDC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEH,WAAW,CAAC;;EAEnD;EACA,IAAID,SAAS,EAAE;IACbG,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEV,EAAE,CAACd,IAAI,CAAC;;IAElD;IACA,IAAIqB,WAAW,IAAIA,WAAW,CAACI,IAAI,KAAK,OAAO,EAAE;MAC/CF,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/C,OAAOR,IAAI,CAAC,CAAC;IACf;;IAEA;IACA,IAAI;MACF;MACA,MAAMU,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAC/C,IAAIF,UAAU,KAAK,OAAO,EAAE;QAC1BH,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;QACrD,OAAOR,IAAI,CAAC,CAAC;MACf;;MAEA;MACA,MAAMa,UAAU,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAC/C,IAAIC,UAAU,EAAE;QACd,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,UAAU,CAAC;QACnC,IAAIC,IAAI,CAACL,IAAI,KAAK,OAAO,EAAE;UACzBF,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;UACrD,OAAOR,IAAI,CAAC,CAAC;QACf;MACF;;MAEA;MACA,MAAMiB,aAAa,GAAGN,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;MACrD,IAAIK,aAAa,EAAE;QACjB,MAAMC,OAAO,GAAGH,IAAI,CAACC,KAAK,CAACC,aAAa,CAAC;QACzC,IAAIC,OAAO,CAACT,IAAI,KAAK,OAAO,EAAE;UAC5BF,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;UACxD,OAAOR,IAAI,CAAC,CAAC;QACf;MACF;IACF,CAAC,CAAC,OAAOmB,CAAC,EAAE;MACVZ,OAAO,CAACa,KAAK,CAAC,2CAA2C,EAAED,CAAC,CAAC;IAC/D;;IAEA;IACAZ,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3C,OAAOR,IAAI,CAAC,GAAG,CAAC;EAClB;;EAEA;EACA,IAAIZ,YAAY,IAAI,CAACiB,WAAW,EAAE;IAChCE,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;IACjE,OAAOR,IAAI,CAAC,QAAQ,CAAC;EACvB;;EAEA;EACA,OAAOA,IAAI,CAAC,CAAC;AACf,CAAC,CAAC;AAEF,eAAeR,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}