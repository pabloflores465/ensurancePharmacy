{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"cart-container\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 0,\n  class: \"modal\"\n};\nconst _hoisted_5 = {\n  class: \"modal-content\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[6] || (_cache[6] = _createElementVNode(\"h1\", null, \"Carrito de Compras\", -1 /* HOISTED */)), _createCommentVNode(\" Si no existe una orden en progreso \"), !$setup.currentOrder ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[3] || (_cache[3] = [_createElementVNode(\"p\", null, \"No tienes una orden en progreso.\", -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" Si existe una orden en progreso, se muestran los ítems \"), _createElementVNode(\"div\", null, [_createElementVNode(\"table\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Medicamento\"), _createElementVNode(\"th\", null, \"Cantidad\"), _createElementVNode(\"th\", null, \"Costo Unitario\"), _createElementVNode(\"th\", null, \"Total\"), _createElementVNode(\"th\", null, \"Eliminar\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.cartItems, item => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: item.medicine.idMedicine\n    }, [_createElementVNode(\"td\", null, _toDisplayString(item.medicine.name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.quantity), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.cost), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.total), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $setup.removeItem(item)\n    }, \"X\", 8 /* PROPS */, _hoisted_3)])]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"button\", {\n    onClick: $setup.openModal\n  }, \"Completar compra\"), $setup.isModalOpen ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Completar compra\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.cardNumber = $event),\n    placeholder: \"Número de tarjeta\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.cardNumber]]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.cardExpiry = $event),\n    onInput: $setup.handleExpiryInput,\n    placeholder: \"MM/YY\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.cardExpiry]]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.cardCvv = $event),\n    placeholder: \"CVV\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.cardCvv]]), _createElementVNode(\"button\", {\n    onClick: $setup.completePurchase\n  }, \"Confirmar Compra\"), _createElementVNode(\"button\", {\n    onClick: $setup.closeModal\n  }, \"Cancelar\")])])) : _createCommentVNode(\"v-if\", true)])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_createCommentVNode","$setup","currentOrder","_hoisted_2","_cache","_Fragment","_renderList","cartItems","item","medicine","idMedicine","_toDisplayString","name","quantity","cost","total","onClick","$event","removeItem","_hoisted_3","openModal","isModalOpen","_hoisted_4","_hoisted_5","cardNumber","placeholder","cardExpiry","onInput","handleExpiryInput","cardCvv","completePurchase","closeModal"],"sources":["/Users/nohelestradap/Documents/VsCode/ensurancePharmacy/pharmacy/src/components/Cart.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n  <div class=\"cart-container\">\n    <h1>Carrito de Compras</h1>\n\n    <!-- Si no existe una orden en progreso -->\n    <div v-if=\"!currentOrder\">\n      <p>No tienes una orden en progreso.</p>\n    </div>\n\n    <!-- Si existe una orden en progreso, se muestran los ítems -->\n    <div v-else>\n      <table>\n        <thead>\n        <tr>\n          <th>Medicamento</th>\n          <th>Cantidad</th>\n          <th>Costo Unitario</th>\n          <th>Total</th>\n          <th>Eliminar</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr v-for=\"item in cartItems\" :key=\"item.medicine.idMedicine\">\n          <td>{{ item.medicine.name }}</td>\n          <td>{{ item.quantity }}</td>\n          <td>{{ item.cost }}</td>\n          <td>{{ item.total }}</td>\n          <td>\n            <button @click=\"removeItem(item)\">X</button>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n      <button @click=\"openModal\">Completar compra</button>\n\n      <div v-if=\"isModalOpen\" class=\"modal\">\n        <div class=\"modal-content\">\n          <h2>Completar compra</h2>\n          <input v-model=\"cardNumber\" placeholder=\"Número de tarjeta\" />\n          <input v-model=\"cardExpiry\" @input=\"handleExpiryInput\" placeholder=\"MM/YY\" />\n          <input v-model=\"cardCvv\" placeholder=\"CVV\" />\n          <button @click=\"completePurchase\">Confirmar Compra</button>\n          <button @click=\"closeModal\">Cancelar</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup name=\"CartView\">\nimport { ref, onMounted, computed } from 'vue'\nimport axios from 'axios'\nimport { useUserStore } from '@/stores/userStore'\n\nconst userStore = useUserStore()\nconst ip = process.env.VUE_APP_API_IP || 'localhost'\n\nconst currentOrder = ref(null)\nconst cartItems = ref([])\n\n// Buscar la orden en progreso para el usuario actual\nconst fetchCurrentOrder = async () => {\n  try {\n    const ordersResponse = await axios.get(`http://${ip}:8081/api2/orders`)\n    const orders = ordersResponse.data\n    const userId = userStore.getUser().idUser\n    const inProgressOrder = orders.find(o => o.user.idUser === userId && o.status === 'En progreso')\n    currentOrder.value = inProgressOrder || null\n  } catch (error) {\n    console.error('Error fetching current order:', error)\n  }\n}\n\n// Obtener los ítems (OrderMedicine) de la orden en progreso\nconst fetchCartItems = async (orderId) => {\n  try {\n    const response = await axios.get(`http://${ip}:8081/api2/order_medicines`)\n    const allItems = response.data\n    // Filtrar solo los ítems que corresponden a la orden en progreso\n    cartItems.value = allItems.filter(item => item.orders.idOrder === orderId)\n  } catch (error) {\n    console.error('Error fetching cart items:', error)\n  }\n}\n\n// Eliminar un ítem del carrito (se elimina directamente de la DB)\nconst removeItem = async (item) => {\n  try {\n    const orderId = item.orders.idOrder\n    const medicineId = item.medicine.idMedicine\n    await axios.delete(`http://${ip}:8081/api2/order_medicines?id=${orderId},${medicineId}`)\n    // Actualizar la lista local eliminando el ítem borrado\n    cartItems.value = cartItems.value.filter(i => i.medicine.idMedicine !== medicineId)\n  } catch (error) {\n    console.error('Error removing item from cart:', error)\n  }\n}\n\n// Referencias y funciones para completar la compra\nconst isModalOpen = ref(false);\nconst cardNumber = ref('');\nconst cardExpiry = ref('');\nconst cardCvv = ref('');\n\nconst handleExpiryInput = () => {\n  let val = cardExpiry.value.replace(/[^0-9]/g, '');\n  if (val.length > 2) {\n    cardExpiry.value = val.slice(0, 2) + '/' + val.slice(2, 4);\n  } else {\n    cardExpiry.value = val;\n  }\n};\n\nconst isCardValid = computed(() => {\n  return cardNumber.value && cardExpiry.value && cardCvv.value;\n});\n\nconst openModal = () => {\n  isModalOpen.value = true;\n};\n\nconst closeModal = () => {\n  isModalOpen.value = false;\n};\n\nconst completePurchase = async () => {\n  if (!isCardValid.value) return;\n  try {\n    // Se asume que currentOrder es la orden en progreso\n    const order = currentOrder.value;\n    if (!order) return;\n\n    // Actualizar la orden existente con estado 'Completado'\n    await axios.put(`http://${ip}:8081/api2/orders?id=${order.idOrder}`, {\n      status: 'Completado'\n    });\n\n    closeModal();\n    alert('Gracias por tu compra');\n    window.location.href = '/';\n  } catch (error) {\n    console.error('Error completing purchase:', error);\n    alert('Error al completar la compra. Intente de nuevo.');\n  }\n}\n\nonMounted(async () => {\n  await fetchCurrentOrder()\n  if (currentOrder.value) {\n    await fetchCartItems(currentOrder.value.idOrder)\n  }\n})\n</script>\n\n<style scoped>\n.cart-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n}\n\nth, td {\n  padding: 8px;\n  border: 1px solid #ccc;\n  text-align: left;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.modal-content {\n  background: #fff;\n  padding: 20px;\n  border-radius: 4px;\n  width: 300px;\n}\n</style>"],"mappings":";;EAEOA,KAAK,EAAC;AAAgB;;EAF7BC,GAAA;AAAA;mBAAA;;EAAAA,GAAA;EAoC8BD,KAAK,EAAC;;;EACvBA,KAAK,EAAC;AAAe;;uBAnChCE,mBAAA,CA6CM,OA7CNC,UA6CM,G,0BA5CJC,mBAAA,CAA2B,YAAvB,oBAAkB,sBAEtBC,mBAAA,wCAA2C,E,CAC/BC,MAAA,CAAAC,YAAY,I,cAAxBL,mBAAA,CAEM,OARVM,UAAA,EAAAC,MAAA,QAAAA,MAAA,OAOML,mBAAA,CAAuC,WAApC,kCAAgC,oB,qBAIrCF,mBAAA,CAmCMQ,SAAA;IA9CVT,GAAA;EAAA,IAUII,mBAAA,4DAA+D,EAC/DD,mBAAA,CAmCM,cAlCJA,mBAAA,CAqBQ,gB,0BApBNA,mBAAA,CAQQ,gBAPRA,mBAAA,CAMK,aALHA,mBAAA,CAAoB,YAAhB,aAAW,GACfA,mBAAA,CAAiB,YAAb,UAAQ,GACZA,mBAAA,CAAuB,YAAnB,gBAAc,GAClBA,mBAAA,CAAc,YAAV,OAAK,GACTA,mBAAA,CAAiB,YAAb,UAAQ,E,wBAGdA,mBAAA,CAUQ,iB,kBATRF,mBAAA,CAQKQ,SAAA,QA/BbC,WAAA,CAuB2BL,MAAA,CAAAM,SAAS,EAAjBC,IAAI;yBAAfX,mBAAA,CAQK;MAR0BD,GAAG,EAAEY,IAAI,CAACC,QAAQ,CAACC;QAChDX,mBAAA,CAAiC,YAAAY,gBAAA,CAA1BH,IAAI,CAACC,QAAQ,CAACG,IAAI,kBACzBb,mBAAA,CAA4B,YAAAY,gBAAA,CAArBH,IAAI,CAACK,QAAQ,kBACpBd,mBAAA,CAAwB,YAAAY,gBAAA,CAAjBH,IAAI,CAACM,IAAI,kBAChBf,mBAAA,CAAyB,YAAAY,gBAAA,CAAlBH,IAAI,CAACO,KAAK,kBACjBhB,mBAAA,CAEK,aADHA,mBAAA,CAA4C;MAAnCiB,OAAK,EAAAC,MAAA,IAAEhB,MAAA,CAAAiB,UAAU,CAACV,IAAI;OAAG,GAAC,iBA7B/CW,UAAA,E;sCAkCMpB,mBAAA,CAAoD;IAA3CiB,OAAK,EAAEf,MAAA,CAAAmB;EAAS,GAAE,kBAAgB,GAEhCnB,MAAA,CAAAoB,WAAW,I,cAAtBxB,mBAAA,CASM,OATNyB,UASM,GARJvB,mBAAA,CAOM,OAPNwB,UAOM,G,0BANJxB,mBAAA,CAAyB,YAArB,kBAAgB,sB,gBACpBA,mBAAA,CAA8D;IAvCxE,uBAAAK,MAAA,QAAAA,MAAA,MAAAa,MAAA,IAuC0BhB,MAAA,CAAAuB,UAAU,GAAAP,MAAA;IAAEQ,WAAW,EAAC;iDAAxBxB,MAAA,CAAAuB,UAAU,E,mBAC1BzB,mBAAA,CAA6E;IAxCvF,uBAAAK,MAAA,QAAAA,MAAA,MAAAa,MAAA,IAwC0BhB,MAAA,CAAAyB,UAAU,GAAAT,MAAA;IAAGU,OAAK,EAAE1B,MAAA,CAAA2B,iBAAiB;IAAEH,WAAW,EAAC;iEAAnDxB,MAAA,CAAAyB,UAAU,E,mBAC1B3B,mBAAA,CAA6C;IAzCvD,uBAAAK,MAAA,QAAAA,MAAA,MAAAa,MAAA,IAyC0BhB,MAAA,CAAA4B,OAAO,GAAAZ,MAAA;IAAEQ,WAAW,EAAC;iDAArBxB,MAAA,CAAA4B,OAAO,E,GACvB9B,mBAAA,CAA2D;IAAlDiB,OAAK,EAAEf,MAAA,CAAA6B;EAAgB,GAAE,kBAAgB,GAClD/B,mBAAA,CAA6C;IAApCiB,OAAK,EAAEf,MAAA,CAAA8B;EAAU,GAAE,UAAQ,E,OA3C9C/B,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}