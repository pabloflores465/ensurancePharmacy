{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport axios from 'axios';\nexport default {\n  __name: 'PrescriptionPay',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const prescription = ref(null);\n    const errorMessage = ref('');\n    const ip = process.env.VUE_APP_API_IP || 'localhost';\n    const fetchMedicineDetails = async medicine => {\n      try {\n        const response = await axios.get(`http://${ip}:8081/api2/medicines/${medicine.idMedicine}`);\n        // Extract only specific fields: name, presentacion, concentration, image, and stock\n        const {\n          name,\n          presentacion,\n          concentration,\n          image,\n          stock\n        } = response.data;\n        medicine.details = {\n          name,\n          presentacion,\n          concentration,\n          image,\n          stock\n        };\n      } catch (error) {\n        console.error(`Error fetching details for medicine id ${medicine.idMedicine}:`, error);\n        medicine.details = null;\n      }\n    };\n    const fetchPrescription = async () => {\n      try {\n        const prescriptionId = route.params.id;\n        // Fetch all prescription medicines as in Prescriptions.vue\n        const response = await axios.get(`http://${ip}:8081/api2/prescription_medicines`);\n        const allData = response.data;\n        // Filtrar solo las recetas que coinciden con el id de la receta\n        const filtered = allData.filter(p => p.id.prescriptionId == prescriptionId);\n        if (filtered.length > 0) {\n          // Agrupar los datos por prescriptionId para consolidar las medicinas\n          const grouped = {};\n          filtered.forEach(p => {\n            const prescId = p.id.prescriptionId;\n            if (!grouped[prescId]) {\n              grouped[prescId] = {\n                ...p,\n                // Copy all properties of p (including idPrescription, approved, hospital, user, etc.)\n                medicines: []\n              };\n            }\n            grouped[prescId].medicines.push({\n              ...p.medicine,\n              dosis: p.dosis,\n              frecuencia: p.frecuencia,\n              duracion: p.duracion\n            });\n          });\n          prescription.value = grouped[prescriptionId];\n          if (prescription.value && prescription.value.medicines) {\n            prescription.value.medicines.forEach(med => {\n              fetchMedicineDetails(med);\n            });\n          }\n          console.log(prescription.value);\n        } else {\n          errorMessage.value = 'No se encontró la receta.';\n        }\n      } catch (error) {\n        console.error('Error al obtener la receta:', error);\n        errorMessage.value = 'Error al obtener la receta. Por favor, inténtelo de nuevo.';\n      }\n    };\n    onMounted(() => {\n      fetchPrescription();\n    });\n    const __returned__ = {\n      route,\n      prescription,\n      errorMessage,\n      ip,\n      fetchMedicineDetails,\n      fetchPrescription,\n      ref,\n      onMounted,\n      get useRoute() {\n        return useRoute;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","axios","route","prescription","errorMessage","ip","process","env","VUE_APP_API_IP","fetchMedicineDetails","medicine","response","get","idMedicine","name","presentacion","concentration","image","stock","data","details","error","console","fetchPrescription","prescriptionId","params","id","allData","filtered","filter","p","length","grouped","forEach","prescId","medicines","push","dosis","frecuencia","duracion","value","med","log"],"sources":["/Users/nohelestradap/Documents/VsCode/ensurancePharmacy/pharmacy/src/pages/PrescriptionPay.vue"],"sourcesContent":["<template>\n  <div class=\"prescription-pay-container\">\n    <h2 class=\"text-2xl font-bold text-center text-blue-800 mb-4\">Detalle de la Receta</h2>\n\n    <!-- Mensaje de error si lo hay -->\n    <div v-if=\"errorMessage\" class=\"mb-4 text-red-600 text-center\">\n      {{ errorMessage }}\n    </div>\n\n    <!-- Mostrar la receta cuando se cargue -->\n    <div v-if=\"prescription\">\n      <p><strong>ID Receta:</strong> {{ prescription.id.prescriptionId }}</p>\n\n      <!-- Tabla de Medicinas si existen -->\n      <div v-if=\"prescription.medicines && prescription.medicines.length > 0\">\n        <table class=\"medicine-table\">\n          <thead>\n            <tr>\n              <th>Nombre</th>\n              <th>Concentración</th>\n              <th>Presentación</th>\n              <th>Dosis</th>\n              <th>Frecuencia</th>\n              <th>Duración</th>\n            </tr>\n          </thead>\n          <tbody>\n            <template v-for=\"medicine in prescription.medicines\" :key=\"medicine.idMedicine\">\n              <tr>\n                <td>{{ medicine.name }}</td>\n                <td>{{ medicine.concentration }}</td>\n                <td>Conjunto de {{ medicine.presentacion }} unidades</td>\n                <td>{{ medicine.dosis }}</td>\n                <td>{{ medicine.frecuencia }} horas</td>\n                <td>{{ medicine.duracion }} días</td>\n              </tr>\n              <tr v-if=\"medicine.details\" :key=\"medicine.idMedicine + '-purchase'\">\n                <td colspan=\"6\">\n                  <div class=\"purchase-info\" style=\"display: flex; align-items: center;\">\n                    <img :src=\"medicine.details.image\" :alt=\"'Imagen de ' + medicine.name\" style=\"width: 50px; height: auto; margin-right: 10px;\">\n                    <p><strong> Nombre: {{medicine.name}}  </strong></p>\n                    <p><strong> Principio activo: {{medicine.activeMedicament}}  </strong></p>\n                    <p><strong> Presentación: {{medicine.presentacion}}  </strong></p>\n                    <span>\n                      Cantidad a comprar:\n                      <span v-if=\"Math.ceil((medicine.dosis * medicine.duracion) / medicine.details.presentacion) <= medicine.details.stock\">\n                        {{ Math.ceil((medicine.dosis * medicine.duracion) / medicine.details.presentacion) }}\n                      </span>\n                      <span v-else>\n                        NO DISPONIBLE\n                      </span>\n                    </span>\n                  </div>\n                </td>\n              </tr>\n            </template>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <div v-else>\n      <p>Cargando receta...</p>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport axios from 'axios';\n\nconst route = useRoute();\nconst prescription = ref(null);\nconst errorMessage = ref('');\nconst ip = process.env.VUE_APP_API_IP || 'localhost';\n\nconst fetchMedicineDetails = async (medicine) => {\n  try {\n    const response = await axios.get(`http://${ip}:8081/api2/medicines/${medicine.idMedicine}`);\n    // Extract only specific fields: name, presentacion, concentration, image, and stock\n    const { name, presentacion, concentration, image, stock } = response.data;\n    medicine.details = { name, presentacion, concentration, image, stock };\n  } catch (error) {\n    console.error(`Error fetching details for medicine id ${medicine.idMedicine}:`, error);\n    medicine.details = null;\n  }\n};\n\nconst fetchPrescription = async () => {\n  try {\n    const prescriptionId = route.params.id;\n    // Fetch all prescription medicines as in Prescriptions.vue\n    const response = await axios.get(`http://${ip}:8081/api2/prescription_medicines`);\n    const allData = response.data;\n    // Filtrar solo las recetas que coinciden con el id de la receta\n    const filtered = allData.filter(p => p.id.prescriptionId == prescriptionId);\n\n    if (filtered.length > 0) {\n      // Agrupar los datos por prescriptionId para consolidar las medicinas\n      const grouped = {};\n      filtered.forEach(p => {\n        const prescId = p.id.prescriptionId;\n        if (!grouped[prescId]) {\n          grouped[prescId] = {\n            ...p, // Copy all properties of p (including idPrescription, approved, hospital, user, etc.)\n            medicines: []\n          };\n        }\n        grouped[prescId].medicines.push({\n          ...p.medicine,\n          dosis: p.dosis,\n          frecuencia: p.frecuencia,\n          duracion: p.duracion\n        });\n      });\n      prescription.value = grouped[prescriptionId];\n\n      if (prescription.value && prescription.value.medicines) {\n        prescription.value.medicines.forEach(med => {\n          fetchMedicineDetails(med);\n        });\n      }\n      console.log(prescription.value)\n    } else {\n      errorMessage.value = 'No se encontró la receta.';\n    }\n  } catch (error) {\n    console.error('Error al obtener la receta:', error);\n    errorMessage.value = 'Error al obtener la receta. Por favor, inténtelo de nuevo.';\n  }\n};\n\nonMounted(() => {\n  fetchPrescription();\n});\n</script>\n\n<style scoped>\n.prescription-pay-container {\n  padding: 50px;\n  background-color: #f8f9fa;\n}\n\n.medicine-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 10px;\n}\n\n.medicine-table th, .medicine-table td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: center;\n}\n\n.medicine-table th {\n  background-color: #f4f4f4;\n.purchase-info p {\n  margin-bottom: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}