{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ref, onMounted } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { useUserStore } from \"@/stores/userStore\";\nimport { Bar, Pie, Doughnut } from \"vue-chartjs\";\nimport { Chart, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement, RadialLinearScale } from \"chart.js\";\nimport axios from \"axios\";\n\n// Registrar componentes de Chart.js\n\nexport default {\n  __name: 'AdminDash',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    Chart.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement, RadialLinearScale);\n    const router = useRouter();\n    const userStore = useUserStore();\n\n    // Obtener IP del servidor\n    const ip = process.env.VUE_APP_IP || \"127.0.0.1\";\n    console.log(\"IP del servidor para API:\", ip);\n\n    // Estado para almacenar los datos de las gráficas\n    const topCategoriesData = ref({\n      labels: [],\n      datasets: [{\n        backgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\", \"#4BC0C0\", \"#9966FF\", \"#FF9F40\", \"#C9CBCF\", \"#7FB800\", \"#00A6ED\", \"#F6511D\"],\n        data: []\n      }]\n    });\n    const monthlySalesData = ref({\n      labels: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"],\n      datasets: [{\n        label: \"Ventas Mensuales\",\n        backgroundColor: \"#4BC0C0\",\n        data: []\n      }]\n    });\n    const inventoryStatusData = ref({\n      labels: [\"En exceso\", \"Óptimo\", \"Bajo\", \"Crítico\"],\n      datasets: [{\n        backgroundColor: [\"#48bb78\", \"#4299e1\", \"#ecc94b\", \"#f56565\"],\n        data: []\n      }]\n    });\n\n    // Estadísticas de resumen\n    const totalCategories = ref(0);\n    const totalSales = ref(0);\n    const totalInventory = ref(0);\n\n    // Opciones de gráficas\n    const categoryOptions = ref({\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        title: {\n          display: true,\n          text: \"Top 10 Categorías de Medicamentos\"\n        },\n        legend: {\n          position: \"right\"\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `${context.label}: ${context.raw}%`;\n            }\n          }\n        }\n      }\n    });\n    const salesOptions = ref({\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        title: {\n          display: true,\n          text: \"Ventas Mensuales\"\n        },\n        legend: {\n          display: false\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `Q${context.raw.toLocaleString()}`;\n            }\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          ticks: {\n            callback: function (value) {\n              return \"Q\" + value.toLocaleString();\n            }\n          }\n        }\n      }\n    });\n    const inventoryOptions = ref({\n      responsive: true,\n      maintainAspectRatio: false,\n      cutout: \"70%\",\n      plugins: {\n        title: {\n          display: true,\n          text: \"Estado del Inventario\"\n        },\n        legend: {\n          position: \"bottom\"\n        }\n      }\n    });\n\n    // Variables para estado de carga\n    const isLoading = ref(true);\n    const error = ref(null);\n    const pharmacy = parseInt(window.location.port);\n    const pharmacy_port = pharmacy - 30;\n    // Variables para estado de la exportación XML\n    const isExportingXML = ref(false);\n    const exportSuccess = ref(false);\n    const exportError = ref(false);\n\n    // Comprobar si el usuario es administrador\n    const checkAdminStatus = () => {\n      console.log(\"Verificando si el usuario es administrador\");\n\n      // Método 1: Verificar en el store\n      if (userStore.isAdmin()) {\n        console.log(\"El usuario es admin según el store\");\n        return true;\n      }\n\n      // Método 2: Verificar directamente en localStorage\n      try {\n        // Verificar en 'role'\n        const storedRole = localStorage.getItem(\"role\");\n        if (storedRole === \"admin\") {\n          console.log(\"Usuario es admin según localStorage.role\");\n          return true;\n        }\n\n        // Verificar en 'user'\n        const storedUser = localStorage.getItem(\"user\");\n        if (storedUser) {\n          const parsedUser = JSON.parse(storedUser);\n          if (parsedUser.role === \"admin\") {\n            console.log(\"Usuario es admin según localStorage.user\");\n            // Actualizar el store por si acaso\n            userStore.setUser(parsedUser);\n            return true;\n          }\n        }\n\n        // Verificar en 'session'\n        const storedSession = localStorage.getItem(\"session\");\n        if (storedSession) {\n          const parsedSession = JSON.parse(storedSession);\n          if (parsedSession.role === \"admin\") {\n            console.log(\"Usuario es admin según localStorage.session\");\n            // Actualizar el store por si acaso\n            userStore.setUser(parsedSession);\n            return true;\n          }\n        }\n      } catch (e) {\n        console.error(\"Error al verificar admin en localStorage:\", e);\n      }\n\n      // Si llegamos aquí, no es admin o no hay datos\n      console.log(\"No se encontró rol admin. Redirigiendo...\");\n      router.push(\"/login\");\n      setTimeout(() => {\n        alert(\"Acceso denegado: Solo administradores pueden acceder a este panel\");\n      }, 500);\n      return false;\n    };\n\n    // Obtener datos de medicamentos y procesarlos para las gráficas\n    const fetchMedicinesData = async () => {\n      try {\n        console.log(\"Obteniendo datos de medicamentos\");\n        const response = await axios.get(`http://${ip}:8081/api2/medicines`);\n        const medicines = response.data;\n        console.log(\"Datos de medicamentos obtenidos:\", medicines);\n\n        // Verificar si hay datos\n        if (!medicines || medicines.length === 0) {\n          console.log(\"No hay datos de medicamentos, usando datos de ejemplo\");\n\n          // Datos de ejemplo\n          const exampleData = [{\n            name: \"Analgésicos\",\n            value: 320,\n            percentage: 32\n          }, {\n            name: \"Antibióticos\",\n            value: 245,\n            percentage: 24\n          }, {\n            name: \"Antiinflamatorios\",\n            value: 180,\n            percentage: 18\n          }, {\n            name: \"Antihistamínicos\",\n            value: 95,\n            percentage: 9\n          }, {\n            name: \"Antidepresivos\",\n            value: 70,\n            percentage: 7\n          }, {\n            name: \"Antihipertensivos\",\n            value: 50,\n            percentage: 5\n          }, {\n            name: \"Antigripales\",\n            value: 30,\n            percentage: 3\n          }, {\n            name: \"Vitaminas\",\n            value: 10,\n            percentage: 1\n          }, {\n            name: \"Suplementos\",\n            value: 5,\n            percentage: 0.5\n          }, {\n            name: \"Otros\",\n            value: 5,\n            percentage: 0.5\n          }];\n\n          // Actualizar datos de categoría\n          topCategoriesData.value.labels = exampleData.map(item => item.name);\n          topCategoriesData.value.datasets[0].data = exampleData.map(item => item.percentage);\n\n          // Datos de ejemplo para inventario\n          inventoryStatusData.value.datasets[0].data = [15, 45, 20, 10];\n\n          // Actualizar estadísticas\n          totalCategories.value = exampleData.length;\n          totalInventory.value = 90;\n          return [];\n        }\n\n        // Procesar datos para categorías (usando activeMedicament como categoría)\n        const categories = {};\n        let totalInventoryCount = 0;\n        medicines.forEach(medicine => {\n          const category = medicine.activeMedicament || \"Sin categoría\";\n          if (!categories[category]) {\n            categories[category] = 0;\n          }\n          // Sumar unidades vendidas (o unidades en stock si no hay vendidas)\n          categories[category] += medicine.soldUnits || 1;\n\n          // Contar inventario total\n          totalInventoryCount += medicine.stock || 0;\n        });\n\n        // Convertir a array y ordenar por ventas\n        let sortedCategories = Object.entries(categories).map(([name, value]) => ({\n          name,\n          value\n        })).sort((a, b) => b.value - a.value);\n\n        // Almacenar total de categorías\n        totalCategories.value = sortedCategories.length;\n\n        // Tomar solo las 10 primeras\n        sortedCategories = sortedCategories.slice(0, 10);\n\n        // Calcular porcentajes\n        const totalCategorySales = sortedCategories.reduce((sum, cat) => sum + cat.value, 0);\n        sortedCategories.forEach(cat => {\n          cat.percentage = Math.round(cat.value / totalCategorySales * 100);\n        });\n\n        // Actualizar datos de gráfica de categorías\n        topCategoriesData.value.labels = sortedCategories.map(cat => cat.name);\n        topCategoriesData.value.datasets[0].data = sortedCategories.map(cat => cat.percentage);\n\n        // Procesar datos para estado de inventario\n        const inventoryStatus = {\n          \"En exceso\": 0,\n          Óptimo: 0,\n          Bajo: 0,\n          Crítico: 0\n        };\n        medicines.forEach(medicine => {\n          const stock = medicine.stock || 0;\n          if (stock > 50) {\n            inventoryStatus[\"En exceso\"]++;\n          } else if (stock > 20) {\n            inventoryStatus[\"Óptimo\"]++;\n          } else if (stock > 5) {\n            inventoryStatus[\"Bajo\"]++;\n          } else {\n            inventoryStatus[\"Crítico\"]++;\n          }\n        });\n\n        // Actualizar datos de gráfica de inventario\n        inventoryStatusData.value.datasets[0].data = [inventoryStatus[\"En exceso\"], inventoryStatus[\"Óptimo\"], inventoryStatus[\"Bajo\"], inventoryStatus[\"Crítico\"]];\n\n        // Actualizar conteo total de inventario\n        totalInventory.value = totalInventoryCount;\n        return medicines;\n      } catch (error) {\n        console.error(\"Error al obtener datos de medicamentos:\", error);\n\n        // Datos de ejemplo en caso de error\n        const exampleData = [{\n          name: \"Analgésicos\",\n          value: 320,\n          percentage: 32\n        }, {\n          name: \"Antibióticos\",\n          value: 245,\n          percentage: 24\n        }, {\n          name: \"Antiinflamatorios\",\n          value: 180,\n          percentage: 18\n        }, {\n          name: \"Antihistamínicos\",\n          value: 95,\n          percentage: 9\n        }, {\n          name: \"Antidepresivos\",\n          value: 70,\n          percentage: 7\n        }, {\n          name: \"Antihipertensivos\",\n          value: 50,\n          percentage: 5\n        }, {\n          name: \"Antigripales\",\n          value: 30,\n          percentage: 3\n        }, {\n          name: \"Vitaminas\",\n          value: 10,\n          percentage: 1\n        }, {\n          name: \"Suplementos\",\n          value: 5,\n          percentage: 0.5\n        }, {\n          name: \"Otros\",\n          value: 5,\n          percentage: 0.5\n        }];\n\n        // Actualizar datos\n        topCategoriesData.value.labels = exampleData.map(item => item.name);\n        topCategoriesData.value.datasets[0].data = exampleData.map(item => item.percentage);\n        inventoryStatusData.value.datasets[0].data = [15, 45, 20, 10];\n        totalCategories.value = exampleData.length;\n        totalInventory.value = 90;\n        throw error;\n      }\n    };\n\n    // Obtener datos de transacciones/ventas\n    const fetchTransactionsData = async () => {\n      try {\n        console.log(\"Obteniendo datos de transacciones/facturas\");\n        // Primero intentamos con la API de transacciones\n        let transactions = [];\n        try {\n          const response = await axios.get(`http://${ip}:8081/api2/transactions`);\n          transactions = response.data;\n          console.log(\"Datos de transacciones obtenidos:\", transactions);\n        } catch (e) {\n          console.log(\"Error al obtener transacciones, intentando con bills:\", e);\n          // Si falla, intentamos con la API de facturas\n          const response = await axios.get(`http://${ip}:8081/api2/bills`);\n          transactions = response.data;\n          console.log(\"Datos de facturas obtenidos:\", transactions);\n        }\n\n        // Inicializar datos de ventas mensuales\n        const monthlySales = Array(12).fill(0);\n\n        // Procesar transacciones por mes\n        transactions.forEach(transaction => {\n          // Verificar si el campo fecha existe\n          const dateField = transaction.transDate || transaction.billDate || null;\n          if (dateField) {\n            const date = new Date(dateField);\n            const month = date.getMonth();\n            // Sumar el total de la transacción\n            monthlySales[month] += transaction.total || 0;\n          }\n        });\n\n        // Si no hay datos, usar datos de ejemplo\n        if (monthlySales.every(value => value === 0)) {\n          console.log(\"No hay datos reales de ventas, usando datos de ejemplo\");\n          for (let i = 0; i < 12; i++) {\n            monthlySales[i] = Math.floor(Math.random() * 10000) + 5000;\n          }\n        }\n\n        // Actualizar datos de gráfica de ventas\n        monthlySalesData.value.datasets[0].data = monthlySales;\n\n        // Calcular total de ventas\n        totalSales.value = monthlySales.reduce((sum, value) => sum + value, 0);\n        return transactions;\n      } catch (error) {\n        console.error(\"Error al obtener datos de transacciones:\", error);\n        // Si no hay datos, generar datos de ejemplo\n        const monthlySales = [];\n        for (let i = 0; i < 12; i++) {\n          monthlySales.push(Math.floor(Math.random() * 10000) + 5000);\n        }\n        monthlySalesData.value.datasets[0].data = monthlySales;\n        totalSales.value = monthlySales.reduce((sum, value) => sum + value, 0);\n        throw error;\n      }\n    };\n\n    // Nuevo método para exportar medicamentos en XML\n    const exportMedicinesXML = async () => {\n      try {\n        // Mostrar indicador de carga\n        isExportingXML.value = true;\n\n        // Realizar solicitud al endpoint de XML\n        const response = await axios.get(`http://${ip}:8081/api2/medicines-xml`, {\n          responseType: \"blob\"\n        });\n\n        // Crear URL para el blob\n        const blob = new Blob([response.data], {\n          type: \"application/xml\"\n        });\n        const url = window.URL.createObjectURL(blob);\n\n        // Crear elemento de enlace para descarga\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.setAttribute(\"download\", \"medicines.xml\");\n        document.body.appendChild(link);\n\n        // Iniciar descarga\n        link.click();\n\n        // Limpiar\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(link);\n\n        // Mostrar mensaje de éxito\n        exportSuccess.value = true;\n        setTimeout(() => {\n          exportSuccess.value = false;\n        }, 3000);\n      } catch (error) {\n        console.error(\"Error al exportar medicamentos en XML:\", error);\n        exportError.value = true;\n        setTimeout(() => {\n          exportError.value = false;\n        }, 3000);\n      } finally {\n        isExportingXML.value = false;\n      }\n    };\n\n    // Calcular el total de ventas\n    const calculateTotalSales = () => {\n      return totalSales.value;\n    };\n\n    // Cargar todos los datos\n    const loadAllData = async () => {\n      isLoading.value = true;\n      error.value = null;\n      try {\n        await Promise.all([fetchMedicinesData(), fetchTransactionsData()]);\n      } catch (err) {\n        console.error(\"Error al cargar datos:\", err);\n        error.value = \"No se pudieron cargar algunos datos. Se muestran datos parciales o de ejemplo.\";\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    // Ejecutar al montar el componente\n    onMounted(async () => {\n      if (checkAdminStatus()) {\n        await loadAllData();\n      }\n    });\n    const __returned__ = {\n      router,\n      userStore,\n      ip,\n      topCategoriesData,\n      monthlySalesData,\n      inventoryStatusData,\n      totalCategories,\n      totalSales,\n      totalInventory,\n      categoryOptions,\n      salesOptions,\n      inventoryOptions,\n      isLoading,\n      error,\n      pharmacy,\n      pharmacy_port,\n      isExportingXML,\n      exportSuccess,\n      exportError,\n      checkAdminStatus,\n      fetchMedicinesData,\n      fetchTransactionsData,\n      exportMedicinesXML,\n      calculateTotalSales,\n      loadAllData,\n      ref,\n      onMounted,\n      get useRouter() {\n        return useRouter;\n      },\n      get useUserStore() {\n        return useUserStore;\n      },\n      get Bar() {\n        return Bar;\n      },\n      get Pie() {\n        return Pie;\n      },\n      get Doughnut() {\n        return Doughnut;\n      },\n      get Chart() {\n        return Chart;\n      },\n      get CategoryScale() {\n        return CategoryScale;\n      },\n      get LinearScale() {\n        return LinearScale;\n      },\n      get BarElement() {\n        return BarElement;\n      },\n      get Title() {\n        return Title;\n      },\n      get Tooltip() {\n        return Tooltip;\n      },\n      get Legend() {\n        return Legend;\n      },\n      get ArcElement() {\n        return ArcElement;\n      },\n      get RadialLinearScale() {\n        return RadialLinearScale;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRouter","useUserStore","Bar","Pie","Doughnut","Chart","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","ArcElement","RadialLinearScale","axios","register","router","userStore","ip","process","env","VUE_APP_IP","console","log","topCategoriesData","labels","datasets","backgroundColor","data","monthlySalesData","label","inventoryStatusData","totalCategories","totalSales","totalInventory","categoryOptions","responsive","maintainAspectRatio","plugins","title","display","text","legend","position","tooltip","callbacks","context","raw","salesOptions","toLocaleString","scales","y","beginAtZero","ticks","callback","value","inventoryOptions","cutout","isLoading","error","pharmacy","parseInt","window","location","port","pharmacy_port","isExportingXML","exportSuccess","exportError","checkAdminStatus","isAdmin","storedRole","localStorage","getItem","storedUser","parsedUser","JSON","parse","role","setUser","storedSession","parsedSession","e","push","setTimeout","alert","fetchMedicinesData","response","get","medicines","length","exampleData","name","percentage","map","item","categories","totalInventoryCount","forEach","medicine","category","activeMedicament","soldUnits","stock","sortedCategories","Object","entries","sort","a","b","slice","totalCategorySales","reduce","sum","cat","Math","round","inventoryStatus","Óptimo","Bajo","Crítico","fetchTransactionsData","transactions","monthlySales","Array","fill","transaction","dateField","transDate","billDate","date","Date","month","getMonth","total","every","i","floor","random","exportMedicinesXML","responseType","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","revokeObjectURL","removeChild","calculateTotalSales","loadAllData","Promise","all","err"],"sources":["/Users/nohelestradap/Documents/VsCode/ensurancePharmacy/pharmacy/src/pages/AdminDash.vue"],"sourcesContent":["<script setup>\nimport { ref, onMounted } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { useUserStore } from \"@/stores/userStore\";\nimport { Bar, Pie, Doughnut } from \"vue-chartjs\";\nimport {\n  Chart,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  RadialLinearScale,\n} from \"chart.js\";\n\nimport axios from \"axios\";\n\n// Registrar componentes de Chart.js\nChart.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  RadialLinearScale\n);\n\nconst router = useRouter();\nconst userStore = useUserStore();\n\n// Obtener IP del servidor\nconst ip = process.env.VUE_APP_IP || \"127.0.0.1\";\nconsole.log(\"IP del servidor para API:\", ip);\n\n// Estado para almacenar los datos de las gráficas\nconst topCategoriesData = ref({\n  labels: [],\n  datasets: [\n    {\n      backgroundColor: [\n        \"#FF6384\",\n        \"#36A2EB\",\n        \"#FFCE56\",\n        \"#4BC0C0\",\n        \"#9966FF\",\n        \"#FF9F40\",\n        \"#C9CBCF\",\n        \"#7FB800\",\n        \"#00A6ED\",\n        \"#F6511D\",\n      ],\n      data: [],\n    },\n  ],\n});\n\nconst monthlySalesData = ref({\n  labels: [\n    \"Enero\",\n    \"Febrero\",\n    \"Marzo\",\n    \"Abril\",\n    \"Mayo\",\n    \"Junio\",\n    \"Julio\",\n    \"Agosto\",\n    \"Septiembre\",\n    \"Octubre\",\n    \"Noviembre\",\n    \"Diciembre\",\n  ],\n  datasets: [\n    {\n      label: \"Ventas Mensuales\",\n      backgroundColor: \"#4BC0C0\",\n      data: [],\n    },\n  ],\n});\n\nconst inventoryStatusData = ref({\n  labels: [\"En exceso\", \"Óptimo\", \"Bajo\", \"Crítico\"],\n  datasets: [\n    {\n      backgroundColor: [\"#48bb78\", \"#4299e1\", \"#ecc94b\", \"#f56565\"],\n      data: [],\n    },\n  ],\n});\n\n// Estadísticas de resumen\nconst totalCategories = ref(0);\nconst totalSales = ref(0);\nconst totalInventory = ref(0);\n\n// Opciones de gráficas\nconst categoryOptions = ref({\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    title: {\n      display: true,\n      text: \"Top 10 Categorías de Medicamentos\",\n    },\n    legend: {\n      position: \"right\",\n    },\n    tooltip: {\n      callbacks: {\n        label: function (context) {\n          return `${context.label}: ${context.raw}%`;\n        },\n      },\n    },\n  },\n});\n\nconst salesOptions = ref({\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    title: {\n      display: true,\n      text: \"Ventas Mensuales\",\n    },\n    legend: {\n      display: false,\n    },\n    tooltip: {\n      callbacks: {\n        label: function (context) {\n          return `Q${context.raw.toLocaleString()}`;\n        },\n      },\n    },\n  },\n  scales: {\n    y: {\n      beginAtZero: true,\n      ticks: {\n        callback: function (value) {\n          return \"Q\" + value.toLocaleString();\n        },\n      },\n    },\n  },\n});\n\nconst inventoryOptions = ref({\n  responsive: true,\n  maintainAspectRatio: false,\n  cutout: \"70%\",\n  plugins: {\n    title: {\n      display: true,\n      text: \"Estado del Inventario\",\n    },\n    legend: {\n      position: \"bottom\",\n    },\n  },\n});\n\n// Variables para estado de carga\nconst isLoading = ref(true);\nconst error = ref(null);\nconst pharmacy = parseInt(window.location.port);\nconst pharmacy_port = pharmacy-30;\n// Variables para estado de la exportación XML\nconst isExportingXML = ref(false);\nconst exportSuccess = ref(false);\nconst exportError = ref(false);\n\n// Comprobar si el usuario es administrador\nconst checkAdminStatus = () => {\n  console.log(\"Verificando si el usuario es administrador\");\n\n  // Método 1: Verificar en el store\n  if (userStore.isAdmin()) {\n    console.log(\"El usuario es admin según el store\");\n    return true;\n  }\n\n  // Método 2: Verificar directamente en localStorage\n  try {\n    // Verificar en 'role'\n    const storedRole = localStorage.getItem(\"role\");\n    if (storedRole === \"admin\") {\n      console.log(\"Usuario es admin según localStorage.role\");\n      return true;\n    }\n\n    // Verificar en 'user'\n    const storedUser = localStorage.getItem(\"user\");\n    if (storedUser) {\n      const parsedUser = JSON.parse(storedUser);\n      if (parsedUser.role === \"admin\") {\n        console.log(\"Usuario es admin según localStorage.user\");\n        // Actualizar el store por si acaso\n        userStore.setUser(parsedUser);\n        return true;\n      }\n    }\n\n    // Verificar en 'session'\n    const storedSession = localStorage.getItem(\"session\");\n    if (storedSession) {\n      const parsedSession = JSON.parse(storedSession);\n      if (parsedSession.role === \"admin\") {\n        console.log(\"Usuario es admin según localStorage.session\");\n        // Actualizar el store por si acaso\n        userStore.setUser(parsedSession);\n        return true;\n      }\n    }\n  } catch (e) {\n    console.error(\"Error al verificar admin en localStorage:\", e);\n  }\n\n  // Si llegamos aquí, no es admin o no hay datos\n  console.log(\"No se encontró rol admin. Redirigiendo...\");\n  router.push(\"/login\");\n  setTimeout(() => {\n    alert(\"Acceso denegado: Solo administradores pueden acceder a este panel\");\n  }, 500);\n  return false;\n};\n\n// Obtener datos de medicamentos y procesarlos para las gráficas\nconst fetchMedicinesData = async () => {\n  try {\n    console.log(\"Obteniendo datos de medicamentos\");\n    const response = await axios.get(`http://${ip}:8081/api2/medicines`);\n    const medicines = response.data;\n    console.log(\"Datos de medicamentos obtenidos:\", medicines);\n\n    // Verificar si hay datos\n    if (!medicines || medicines.length === 0) {\n      console.log(\"No hay datos de medicamentos, usando datos de ejemplo\");\n\n      // Datos de ejemplo\n      const exampleData = [\n        { name: \"Analgésicos\", value: 320, percentage: 32 },\n        { name: \"Antibióticos\", value: 245, percentage: 24 },\n        { name: \"Antiinflamatorios\", value: 180, percentage: 18 },\n        { name: \"Antihistamínicos\", value: 95, percentage: 9 },\n        { name: \"Antidepresivos\", value: 70, percentage: 7 },\n        { name: \"Antihipertensivos\", value: 50, percentage: 5 },\n        { name: \"Antigripales\", value: 30, percentage: 3 },\n        { name: \"Vitaminas\", value: 10, percentage: 1 },\n        { name: \"Suplementos\", value: 5, percentage: 0.5 },\n        { name: \"Otros\", value: 5, percentage: 0.5 },\n      ];\n\n      // Actualizar datos de categoría\n      topCategoriesData.value.labels = exampleData.map((item) => item.name);\n      topCategoriesData.value.datasets[0].data = exampleData.map(\n        (item) => item.percentage\n      );\n\n      // Datos de ejemplo para inventario\n      inventoryStatusData.value.datasets[0].data = [15, 45, 20, 10];\n\n      // Actualizar estadísticas\n      totalCategories.value = exampleData.length;\n      totalInventory.value = 90;\n\n      return [];\n    }\n\n    // Procesar datos para categorías (usando activeMedicament como categoría)\n    const categories = {};\n    let totalInventoryCount = 0;\n\n    medicines.forEach((medicine) => {\n      const category = medicine.activeMedicament || \"Sin categoría\";\n      if (!categories[category]) {\n        categories[category] = 0;\n      }\n      // Sumar unidades vendidas (o unidades en stock si no hay vendidas)\n      categories[category] += medicine.soldUnits || 1;\n\n      // Contar inventario total\n      totalInventoryCount += medicine.stock || 0;\n    });\n\n    // Convertir a array y ordenar por ventas\n    let sortedCategories = Object.entries(categories)\n      .map(([name, value]) => ({ name, value }))\n      .sort((a, b) => b.value - a.value);\n\n    // Almacenar total de categorías\n    totalCategories.value = sortedCategories.length;\n\n    // Tomar solo las 10 primeras\n    sortedCategories = sortedCategories.slice(0, 10);\n\n    // Calcular porcentajes\n    const totalCategorySales = sortedCategories.reduce(\n      (sum, cat) => sum + cat.value,\n      0\n    );\n    sortedCategories.forEach((cat) => {\n      cat.percentage = Math.round((cat.value / totalCategorySales) * 100);\n    });\n\n    // Actualizar datos de gráfica de categorías\n    topCategoriesData.value.labels = sortedCategories.map((cat) => cat.name);\n    topCategoriesData.value.datasets[0].data = sortedCategories.map(\n      (cat) => cat.percentage\n    );\n\n    // Procesar datos para estado de inventario\n    const inventoryStatus = {\n      \"En exceso\": 0,\n      Óptimo: 0,\n      Bajo: 0,\n      Crítico: 0,\n    };\n\n    medicines.forEach((medicine) => {\n      const stock = medicine.stock || 0;\n      if (stock > 50) {\n        inventoryStatus[\"En exceso\"]++;\n      } else if (stock > 20) {\n        inventoryStatus[\"Óptimo\"]++;\n      } else if (stock > 5) {\n        inventoryStatus[\"Bajo\"]++;\n      } else {\n        inventoryStatus[\"Crítico\"]++;\n      }\n    });\n\n    // Actualizar datos de gráfica de inventario\n    inventoryStatusData.value.datasets[0].data = [\n      inventoryStatus[\"En exceso\"],\n      inventoryStatus[\"Óptimo\"],\n      inventoryStatus[\"Bajo\"],\n      inventoryStatus[\"Crítico\"],\n    ];\n\n    // Actualizar conteo total de inventario\n    totalInventory.value = totalInventoryCount;\n\n    return medicines;\n  } catch (error) {\n    console.error(\"Error al obtener datos de medicamentos:\", error);\n\n    // Datos de ejemplo en caso de error\n    const exampleData = [\n      { name: \"Analgésicos\", value: 320, percentage: 32 },\n      { name: \"Antibióticos\", value: 245, percentage: 24 },\n      { name: \"Antiinflamatorios\", value: 180, percentage: 18 },\n      { name: \"Antihistamínicos\", value: 95, percentage: 9 },\n      { name: \"Antidepresivos\", value: 70, percentage: 7 },\n      { name: \"Antihipertensivos\", value: 50, percentage: 5 },\n      { name: \"Antigripales\", value: 30, percentage: 3 },\n      { name: \"Vitaminas\", value: 10, percentage: 1 },\n      { name: \"Suplementos\", value: 5, percentage: 0.5 },\n      { name: \"Otros\", value: 5, percentage: 0.5 },\n    ];\n\n    // Actualizar datos\n    topCategoriesData.value.labels = exampleData.map((item) => item.name);\n    topCategoriesData.value.datasets[0].data = exampleData.map(\n      (item) => item.percentage\n    );\n    inventoryStatusData.value.datasets[0].data = [15, 45, 20, 10];\n    totalCategories.value = exampleData.length;\n    totalInventory.value = 90;\n\n    throw error;\n  }\n};\n\n// Obtener datos de transacciones/ventas\nconst fetchTransactionsData = async () => {\n  try {\n    console.log(\"Obteniendo datos de transacciones/facturas\");\n    // Primero intentamos con la API de transacciones\n    let transactions = [];\n    try {\n      const response = await axios.get(`http://${ip}:8081/api2/transactions`);\n      transactions = response.data;\n      console.log(\"Datos de transacciones obtenidos:\", transactions);\n    } catch (e) {\n      console.log(\"Error al obtener transacciones, intentando con bills:\", e);\n      // Si falla, intentamos con la API de facturas\n      const response = await axios.get(`http://${ip}:8081/api2/bills`);\n      transactions = response.data;\n      console.log(\"Datos de facturas obtenidos:\", transactions);\n    }\n\n    // Inicializar datos de ventas mensuales\n    const monthlySales = Array(12).fill(0);\n\n    // Procesar transacciones por mes\n    transactions.forEach((transaction) => {\n      // Verificar si el campo fecha existe\n      const dateField = transaction.transDate || transaction.billDate || null;\n      if (dateField) {\n        const date = new Date(dateField);\n        const month = date.getMonth();\n        // Sumar el total de la transacción\n        monthlySales[month] += transaction.total || 0;\n      }\n    });\n\n    // Si no hay datos, usar datos de ejemplo\n    if (monthlySales.every((value) => value === 0)) {\n      console.log(\"No hay datos reales de ventas, usando datos de ejemplo\");\n      for (let i = 0; i < 12; i++) {\n        monthlySales[i] = Math.floor(Math.random() * 10000) + 5000;\n      }\n    }\n\n    // Actualizar datos de gráfica de ventas\n    monthlySalesData.value.datasets[0].data = monthlySales;\n\n    // Calcular total de ventas\n    totalSales.value = monthlySales.reduce((sum, value) => sum + value, 0);\n\n    return transactions;\n  } catch (error) {\n    console.error(\"Error al obtener datos de transacciones:\", error);\n    // Si no hay datos, generar datos de ejemplo\n    const monthlySales = [];\n    for (let i = 0; i < 12; i++) {\n      monthlySales.push(Math.floor(Math.random() * 10000) + 5000);\n    }\n    monthlySalesData.value.datasets[0].data = monthlySales;\n    totalSales.value = monthlySales.reduce((sum, value) => sum + value, 0);\n\n    throw error;\n  }\n};\n\n// Nuevo método para exportar medicamentos en XML\nconst exportMedicinesXML = async () => {\n  try {\n    // Mostrar indicador de carga\n    isExportingXML.value = true;\n\n    // Realizar solicitud al endpoint de XML\n    const response = await axios.get(`http://${ip}:8081/api2/medicines-xml`, {\n      responseType: \"blob\",\n    });\n\n    // Crear URL para el blob\n    const blob = new Blob([response.data], { type: \"application/xml\" });\n    const url = window.URL.createObjectURL(blob);\n\n    // Crear elemento de enlace para descarga\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.setAttribute(\"download\", \"medicines.xml\");\n    document.body.appendChild(link);\n\n    // Iniciar descarga\n    link.click();\n\n    // Limpiar\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(link);\n\n    // Mostrar mensaje de éxito\n    exportSuccess.value = true;\n    setTimeout(() => {\n      exportSuccess.value = false;\n    }, 3000);\n  } catch (error) {\n    console.error(\"Error al exportar medicamentos en XML:\", error);\n    exportError.value = true;\n    setTimeout(() => {\n      exportError.value = false;\n    }, 3000);\n  } finally {\n    isExportingXML.value = false;\n  }\n};\n\n// Calcular el total de ventas\nconst calculateTotalSales = () => {\n  return totalSales.value;\n};\n\n// Cargar todos los datos\nconst loadAllData = async () => {\n  isLoading.value = true;\n  error.value = null;\n\n  try {\n    await Promise.all([fetchMedicinesData(), fetchTransactionsData()]);\n  } catch (err) {\n    console.error(\"Error al cargar datos:\", err);\n    error.value =\n      \"No se pudieron cargar algunos datos. Se muestran datos parciales o de ejemplo.\";\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Ejecutar al montar el componente\nonMounted(async () => {\n  if (checkAdminStatus()) {\n    await loadAllData();\n  }\n});\n</script>\n\n<template>\n  <div class=\"admin-dashboard\">\n    <Header />\n\n    <div class=\"dashboard-container\">\n      <h1 class=\"dashboard-title\">Dashboard Administrativo</h1>\n\n      <!-- Información de conexión -->\n      <div class=\"connection-info\">\n        <p class=\"text-gray-600\">\n          <span class=\"font-bold\">IP del servidor:</span> {{ ip }}\n          <span class=\"font-bold ml-4\">Puerto:</span> 8081\n        </p>\n      </div>\n\n      <!-- Botón para exportar medicamentos en XML -->\n      <div class=\"export-container\">\n        <button\n          class=\"export-btn\"\n          @click=\"exportMedicinesXML\"\n          :disabled=\"isExportingXML\"\n        >\n          <span v-if=\"isExportingXML\">\n            <span class=\"spinner-small\"></span> Exportando...\n          </span>\n          <span v-else>\n            <i class=\"export-icon\">📥</i> Exportar Medicamentos XML\n          </span>\n        </button>\n        <div v-if=\"exportSuccess\" class=\"export-message success\">\n          ¡Exportación exitosa!\n        </div>\n        <div v-if=\"exportError\" class=\"export-message error\">\n          Error al exportar XML. Intente nuevamente.\n        </div>\n      </div>\n\n      <!-- Mensaje de error si hay problemas con las APIs -->\n      <div v-if=\"error\" class=\"error-message\">\n        {{ error }}\n      </div>\n\n      <!-- Indicadores de resumen -->\n      <div class=\"summary-cards\">\n        <div class=\"summary-card\">\n          <div class=\"card-icon\">💊</div>\n          <div class=\"card-content\">\n            <h3 class=\"card-title\">Total Categorías</h3>\n            <p class=\"card-value\">{{ totalCategories }}</p>\n          </div>\n        </div>\n\n        <div class=\"summary-card\">\n          <div class=\"card-icon\">💰</div>\n          <div class=\"card-content\">\n            <h3 class=\"card-title\">Ventas Anuales</h3>\n            <p class=\"card-value\">\n              Q{{ calculateTotalSales().toLocaleString() }}\n            </p>\n          </div>\n        </div>\n\n        <div class=\"summary-card\">\n          <div class=\"card-icon\">📊</div>\n          <div class=\"card-content\">\n            <h3 class=\"card-title\">Inventario Total</h3>\n            <p class=\"card-value\">{{ totalInventory }} unidades</p>\n          </div>\n        </div>\n      </div>\n\n      <!-- Pantalla de carga -->\n      <div v-if=\"isLoading\" class=\"loading-container\">\n        <div class=\"spinner\"></div>\n        <p>Cargando datos del dashboard...</p>\n      </div>\n\n      <!-- Contenido principal -->\n      <div v-else class=\"dashboard-grid\">\n        <!-- Gráfica 1: Top Categorías -->\n        <div class=\"dashboard-card top-categories\">\n          <h2 class=\"card-title\">Top 10 Categorías de Medicamentos</h2>\n          <div class=\"chart-container\">\n            <Pie\n              :data=\"topCategoriesData\"\n              :options=\"categoryOptions\"\n              :height=\"220\"\n            />\n          </div>\n          <div v-if=\"topCategoriesData.labels.length > 0\" class=\"chart-legend\">\n            <div\n              v-for=\"(value, index) in topCategoriesData.labels\"\n              :key=\"index\"\n              class=\"legend-item\"\n            >\n              <span\n                class=\"color-box\"\n                :style=\"{\n                  backgroundColor:\n                    topCategoriesData.datasets[0].backgroundColor[index % 10],\n                }\"\n              ></span>\n              <span class=\"legend-label\">{{ value }}:</span>\n              <span class=\"legend-value\"\n                >{{ topCategoriesData.datasets[0].data[index] }}%</span\n              >\n            </div>\n          </div>\n          <div v-else class=\"no-data-message\">\n            No hay datos de categorías disponibles\n          </div>\n        </div>\n\n        <!-- Gráfica 2: Ventas Mensuales -->\n        <div class=\"dashboard-card sales\">\n          <h2 class=\"card-title\">Ventas Mensuales</h2>\n          <div class=\"chart-container\">\n            <Bar\n              :data=\"monthlySalesData\"\n              :options=\"salesOptions\"\n              :height=\"220\"\n            />\n          </div>\n          <div class=\"sales-summary\">\n            <p>\n              Total anual:\n              <span class=\"total-amount\"\n                >Q{{ calculateTotalSales().toLocaleString() }}</span\n              >\n            </p>\n            <p>\n              Promedio mensual:\n              <span class=\"total-amount\"\n                >Q{{\n                  Math.round(calculateTotalSales() / 12).toLocaleString()\n                }}</span\n              >\n            </p>\n          </div>\n        </div>\n\n        <!-- Gráfica 3: Estado del Inventario -->\n        <div class=\"dashboard-card inventory\">\n          <h2 class=\"card-title\">Estado del Inventario</h2>\n          <div class=\"chart-container\">\n            <Doughnut\n              :data=\"inventoryStatusData\"\n              :options=\"inventoryOptions\"\n              :height=\"180\"\n            />\n          </div>\n          <div class=\"inventory-status\">\n            <div\n              v-for=\"(label, index) in inventoryStatusData.labels\"\n              :key=\"index\"\n              class=\"status-item\"\n              :class=\"`status-${label.toLowerCase().replace(' ', '-')}`\"\n            >\n              <span class=\"status-label\">{{ label }}:</span>\n              <span class=\"status-value\"\n                >{{\n                  inventoryStatusData.datasets[0].data[index]\n                }}\n                productos</span\n              >\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.admin-dashboard {\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n.dashboard-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n}\n\n.dashboard-title {\n  color: #1e40af;\n  font-size: 2rem;\n  font-weight: bold;\n  margin-bottom: 1rem;\n  text-align: center;\n}\n\n/* Estilos para exportación de XML */\n.export-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 2rem;\n}\n\n.export-btn {\n  background-color: #1e40af;\n  color: white;\n  border: none;\n  border-radius: 0.5rem;\n  padding: 0.75rem 1.5rem;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  transition: all 0.2s;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.export-btn:hover {\n  background-color: #1e3a8a;\n  transform: translateY(-2px);\n}\n\n.export-btn:disabled {\n  background-color: #a0aec0;\n  cursor: not-allowed;\n}\n\n.export-icon {\n  margin-right: 0.5rem;\n  font-style: normal;\n}\n\n.export-message {\n  margin-top: 0.75rem;\n  padding: 0.5rem 1rem;\n  border-radius: 0.25rem;\n  font-size: 0.9rem;\n  font-weight: 500;\n}\n\n.export-message.success {\n  background-color: #c6f6d5;\n  color: #2f855a;\n}\n\n.export-message.error {\n  background-color: #fed7d7;\n  color: #c53030;\n}\n\n.spinner-small {\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  border: 2px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  border-top-color: white;\n  animation: spin 1s linear infinite;\n  margin-right: 0.5rem;\n}\n\n.error-message {\n  background-color: #fecaca;\n  color: #b91c1c;\n  padding: 1rem;\n  border-radius: 0.5rem;\n  margin-bottom: 1.5rem;\n  text-align: center;\n}\n\n.summary-cards {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1.5rem;\n  margin-bottom: 2rem;\n}\n\n.summary-card {\n  background-color: white;\n  border-radius: 0.5rem;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 1.5rem;\n  display: flex;\n  align-items: center;\n  transition: transform 0.2s;\n}\n\n.summary-card:hover {\n  transform: translateY(-5px);\n}\n\n.card-icon {\n  font-size: 2rem;\n  margin-right: 1rem;\n}\n\n.card-title {\n  color: #4a5568;\n  font-size: 0.9rem;\n  margin-bottom: 0.5rem;\n}\n\n.card-value {\n  color: #1e40af;\n  font-size: 1.5rem;\n  font-weight: bold;\n  margin: 0;\n}\n\n.dashboard-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n  gap: 2rem;\n}\n\n.dashboard-card {\n  background-color: white;\n  border-radius: 0.5rem;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 1.5rem;\n  transition: transform 0.2s;\n  overflow: hidden;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-5px);\n}\n\n.card-title {\n  color: #1e40af;\n  font-size: 1.25rem;\n  font-weight: bold;\n  margin-bottom: 1rem;\n}\n\n.chart-container {\n  height: 220px;\n  position: relative;\n  margin-bottom: 1rem;\n}\n\n.no-data-message {\n  text-align: center;\n  color: #718096;\n  padding: 1rem;\n  background-color: #f7fafc;\n  border-radius: 0.25rem;\n}\n\n/* Leyenda para categorías */\n.chart-legend {\n  margin-top: 1rem;\n  max-height: 150px;\n  overflow-y: auto;\n  border-top: 1px solid #e2e8f0;\n  padding-top: 0.5rem;\n}\n\n.legend-item {\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n}\n\n.color-box {\n  width: 12px;\n  height: 12px;\n  border-radius: 2px;\n  margin-right: 0.5rem;\n}\n\n.legend-label {\n  flex: 1;\n  font-size: 0.85rem;\n}\n\n.legend-value {\n  font-weight: bold;\n  color: #1e40af;\n}\n\n/* Resumen de ventas */\n.sales-summary {\n  margin-top: 1rem;\n  text-align: right;\n  padding: 0.5rem;\n  background-color: #f8f9fa;\n  border-radius: 0.25rem;\n}\n\n.total-amount {\n  font-weight: bold;\n  color: #1e40af;\n}\n\n/* Estado de inventario */\n.inventory-status {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 0.5rem;\n  margin-top: 1rem;\n}\n\n.status-item {\n  background-color: #f8f9fa;\n  padding: 0.5rem;\n  border-radius: 0.25rem;\n  display: flex;\n  flex-direction: column;\n  font-size: 0.85rem;\n}\n\n.status-label {\n  font-weight: 500;\n}\n\n.status-value {\n  font-weight: bold;\n}\n\n.status-en-exceso {\n  border-left: 3px solid #48bb78;\n  background-color: rgba(198, 246, 213, 0.3);\n}\n\n.status-óptimo {\n  border-left: 3px solid #4299e1;\n  background-color: rgba(190, 227, 248, 0.3);\n}\n\n.status-bajo {\n  border-left: 3px solid #ecc94b;\n  background-color: rgba(254, 252, 191, 0.3);\n}\n\n.status-crítico {\n  border-left: 3px solid #f56565;\n  background-color: rgba(254, 215, 215, 0.3);\n}\n\n/* Pantalla de carga */\n.loading-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 4rem;\n}\n\n.spinner {\n  border: 4px solid rgba(0, 0, 0, 0.1);\n  border-left-color: #1e40af;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 1rem;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n  .dashboard-container {\n    padding: 1rem;\n  }\n\n  .dashboard-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .summary-cards {\n    grid-template-columns: 1fr;\n  }\n}\n\n.connection-info {\n  background-color: #f8fafc;\n  padding: 0.5rem 1rem;\n  border-radius: 0.5rem;\n  margin-bottom: 1rem;\n  border: 1px solid #e2e8f0;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}