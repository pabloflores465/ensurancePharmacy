{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport { ref, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useUserStore } from '@/stores/userStore';\nimport { Bar, Pie, Doughnut } from 'vue-chartjs';\nimport { Chart, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement, RadialLinearScale } from 'chart.js';\nimport axios from 'axios';\n\n// Registrar componentes de Chart.js\n\nexport default {\n  __name: 'AdminDash',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    Chart.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement, RadialLinearScale);\n    const router = useRouter();\n    const userStore = useUserStore();\n\n    // Obtener IP del servidor\n    const ip = process.env.VUE_APP_IP || '127.0.0.1';\n    console.log(\"IP del servidor para API:\", ip);\n\n    // Estado para almacenar los datos de las gráficas\n    const topCategoriesData = ref({\n      labels: [],\n      datasets: [{\n        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#C9CBCF', '#7FB800', '#00A6ED', '#F6511D'],\n        data: []\n      }]\n    });\n    const monthlySalesData = ref({\n      labels: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],\n      datasets: [{\n        label: 'Ventas Mensuales',\n        backgroundColor: '#4BC0C0',\n        data: []\n      }]\n    });\n    const inventoryStatusData = ref({\n      labels: ['En exceso', 'Óptimo', 'Bajo', 'Crítico'],\n      datasets: [{\n        backgroundColor: ['#48bb78', '#4299e1', '#ecc94b', '#f56565'],\n        data: []\n      }]\n    });\n\n    // Estadísticas de resumen\n    const totalCategories = ref(0);\n    const totalSales = ref(0);\n    const totalInventory = ref(0);\n\n    // Opciones de gráficas\n    const categoryOptions = ref({\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        title: {\n          display: true,\n          text: 'Top 10 Categorías de Medicamentos'\n        },\n        legend: {\n          position: 'right'\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `${context.label}: ${context.raw}%`;\n            }\n          }\n        }\n      }\n    });\n    const salesOptions = ref({\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        title: {\n          display: true,\n          text: 'Ventas Mensuales'\n        },\n        legend: {\n          display: false\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              return `Q${context.raw.toLocaleString()}`;\n            }\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          ticks: {\n            callback: function (value) {\n              return 'Q' + value.toLocaleString();\n            }\n          }\n        }\n      }\n    });\n    const inventoryOptions = ref({\n      responsive: true,\n      maintainAspectRatio: false,\n      cutout: '70%',\n      plugins: {\n        title: {\n          display: true,\n          text: 'Estado del Inventario'\n        },\n        legend: {\n          position: 'bottom'\n        }\n      }\n    });\n\n    // Variables para estado de carga\n    const isLoading = ref(true);\n    const error = ref(null);\n\n    // Comprobar si el usuario es administrador\n    const checkAdminStatus = () => {\n      console.log(\"Verificando si el usuario es administrador\");\n\n      // Método 1: Verificar en el store\n      if (userStore.isAdmin()) {\n        console.log(\"El usuario es admin según el store\");\n        return true;\n      }\n\n      // Método 2: Verificar directamente en localStorage\n      try {\n        // Verificar en 'role'\n        const storedRole = localStorage.getItem('role');\n        if (storedRole === 'admin') {\n          console.log(\"Usuario es admin según localStorage.role\");\n          return true;\n        }\n\n        // Verificar en 'user'\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n          const parsedUser = JSON.parse(storedUser);\n          if (parsedUser.role === 'admin') {\n            console.log(\"Usuario es admin según localStorage.user\");\n            // Actualizar el store por si acaso\n            userStore.setUser(parsedUser);\n            return true;\n          }\n        }\n\n        // Verificar en 'session'\n        const storedSession = localStorage.getItem('session');\n        if (storedSession) {\n          const parsedSession = JSON.parse(storedSession);\n          if (parsedSession.role === 'admin') {\n            console.log(\"Usuario es admin según localStorage.session\");\n            // Actualizar el store por si acaso\n            userStore.setUser(parsedSession);\n            return true;\n          }\n        }\n      } catch (e) {\n        console.error(\"Error al verificar admin en localStorage:\", e);\n      }\n\n      // Si llegamos aquí, no es admin o no hay datos\n      console.log(\"No se encontró rol admin. Redirigiendo...\");\n      router.push('/login');\n      setTimeout(() => {\n        alert('Acceso denegado: Solo administradores pueden acceder a este panel');\n      }, 500);\n      return false;\n    };\n\n    // Obtener datos de medicamentos y procesarlos para las gráficas\n    const fetchMedicinesData = async () => {\n      try {\n        console.log(\"Obteniendo datos de medicamentos\");\n        const response = await axios.get(`http://${ip}:8081/api2/medicines`);\n        const medicines = response.data;\n        console.log(\"Datos de medicamentos obtenidos:\", medicines);\n\n        // Verificar si hay datos\n        if (!medicines || medicines.length === 0) {\n          console.log(\"No hay datos de medicamentos, usando datos de ejemplo\");\n\n          // Datos de ejemplo\n          const exampleData = [{\n            name: 'Analgésicos',\n            value: 320,\n            percentage: 32\n          }, {\n            name: 'Antibióticos',\n            value: 245,\n            percentage: 24\n          }, {\n            name: 'Antiinflamatorios',\n            value: 180,\n            percentage: 18\n          }, {\n            name: 'Antihistamínicos',\n            value: 95,\n            percentage: 9\n          }, {\n            name: 'Antidepresivos',\n            value: 70,\n            percentage: 7\n          }, {\n            name: 'Antihipertensivos',\n            value: 50,\n            percentage: 5\n          }, {\n            name: 'Antigripales',\n            value: 30,\n            percentage: 3\n          }, {\n            name: 'Vitaminas',\n            value: 10,\n            percentage: 1\n          }, {\n            name: 'Suplementos',\n            value: 5,\n            percentage: 0.5\n          }, {\n            name: 'Otros',\n            value: 5,\n            percentage: 0.5\n          }];\n\n          // Actualizar datos de categoría\n          topCategoriesData.value.labels = exampleData.map(item => item.name);\n          topCategoriesData.value.datasets[0].data = exampleData.map(item => item.percentage);\n\n          // Datos de ejemplo para inventario\n          inventoryStatusData.value.datasets[0].data = [15, 45, 20, 10];\n\n          // Actualizar estadísticas\n          totalCategories.value = exampleData.length;\n          totalInventory.value = 90;\n          return [];\n        }\n\n        // Procesar datos para categorías (usando activeMedicament como categoría)\n        const categories = {};\n        let totalInventoryCount = 0;\n        medicines.forEach(medicine => {\n          const category = medicine.activeMedicament || 'Sin categoría';\n          if (!categories[category]) {\n            categories[category] = 0;\n          }\n          // Sumar unidades vendidas (o unidades en stock si no hay vendidas)\n          categories[category] += medicine.soldUnits || 1;\n\n          // Contar inventario total\n          totalInventoryCount += medicine.stock || 0;\n        });\n\n        // Convertir a array y ordenar por ventas\n        let sortedCategories = Object.entries(categories).map(([name, value]) => ({\n          name,\n          value\n        })).sort((a, b) => b.value - a.value);\n\n        // Almacenar total de categorías\n        totalCategories.value = sortedCategories.length;\n\n        // Tomar solo las 10 primeras\n        sortedCategories = sortedCategories.slice(0, 10);\n\n        // Calcular porcentajes\n        const totalCategorySales = sortedCategories.reduce((sum, cat) => sum + cat.value, 0);\n        sortedCategories.forEach(cat => {\n          cat.percentage = Math.round(cat.value / totalCategorySales * 100);\n        });\n\n        // Actualizar datos de gráfica de categorías\n        topCategoriesData.value.labels = sortedCategories.map(cat => cat.name);\n        topCategoriesData.value.datasets[0].data = sortedCategories.map(cat => cat.percentage);\n\n        // Procesar datos para estado de inventario\n        const inventoryStatus = {\n          'En exceso': 0,\n          'Óptimo': 0,\n          'Bajo': 0,\n          'Crítico': 0\n        };\n        medicines.forEach(medicine => {\n          const stock = medicine.stock || 0;\n          if (stock > 50) {\n            inventoryStatus['En exceso']++;\n          } else if (stock > 20) {\n            inventoryStatus['Óptimo']++;\n          } else if (stock > 5) {\n            inventoryStatus['Bajo']++;\n          } else {\n            inventoryStatus['Crítico']++;\n          }\n        });\n\n        // Actualizar datos de gráfica de inventario\n        inventoryStatusData.value.datasets[0].data = [inventoryStatus['En exceso'], inventoryStatus['Óptimo'], inventoryStatus['Bajo'], inventoryStatus['Crítico']];\n\n        // Actualizar conteo total de inventario\n        totalInventory.value = totalInventoryCount;\n        return medicines;\n      } catch (error) {\n        console.error(\"Error al obtener datos de medicamentos:\", error);\n\n        // Datos de ejemplo en caso de error\n        const exampleData = [{\n          name: 'Analgésicos',\n          value: 320,\n          percentage: 32\n        }, {\n          name: 'Antibióticos',\n          value: 245,\n          percentage: 24\n        }, {\n          name: 'Antiinflamatorios',\n          value: 180,\n          percentage: 18\n        }, {\n          name: 'Antihistamínicos',\n          value: 95,\n          percentage: 9\n        }, {\n          name: 'Antidepresivos',\n          value: 70,\n          percentage: 7\n        }, {\n          name: 'Antihipertensivos',\n          value: 50,\n          percentage: 5\n        }, {\n          name: 'Antigripales',\n          value: 30,\n          percentage: 3\n        }, {\n          name: 'Vitaminas',\n          value: 10,\n          percentage: 1\n        }, {\n          name: 'Suplementos',\n          value: 5,\n          percentage: 0.5\n        }, {\n          name: 'Otros',\n          value: 5,\n          percentage: 0.5\n        }];\n\n        // Actualizar datos\n        topCategoriesData.value.labels = exampleData.map(item => item.name);\n        topCategoriesData.value.datasets[0].data = exampleData.map(item => item.percentage);\n        inventoryStatusData.value.datasets[0].data = [15, 45, 20, 10];\n        totalCategories.value = exampleData.length;\n        totalInventory.value = 90;\n        throw error;\n      }\n    };\n\n    // Obtener datos de transacciones/ventas\n    const fetchTransactionsData = async () => {\n      try {\n        console.log(\"Obteniendo datos de transacciones/facturas\");\n        // Primero intentamos con la API de transacciones\n        let transactions = [];\n        try {\n          const response = await axios.get(`http://${ip}:8081/api2/transactions`);\n          transactions = response.data;\n          console.log(\"Datos de transacciones obtenidos:\", transactions);\n        } catch (e) {\n          console.log(\"Error al obtener transacciones, intentando con bills:\", e);\n          // Si falla, intentamos con la API de facturas\n          const response = await axios.get(`http://${ip}:8081/api2/bills`);\n          transactions = response.data;\n          console.log(\"Datos de facturas obtenidos:\", transactions);\n        }\n\n        // Inicializar datos de ventas mensuales\n        const monthlySales = Array(12).fill(0);\n\n        // Procesar transacciones por mes\n        transactions.forEach(transaction => {\n          // Verificar si el campo fecha existe\n          const dateField = transaction.transDate || transaction.billDate || null;\n          if (dateField) {\n            const date = new Date(dateField);\n            const month = date.getMonth();\n            // Sumar el total de la transacción\n            monthlySales[month] += transaction.total || 0;\n          }\n        });\n\n        // Si no hay datos, usar datos de ejemplo\n        if (monthlySales.every(value => value === 0)) {\n          console.log(\"No hay datos reales de ventas, usando datos de ejemplo\");\n          for (let i = 0; i < 12; i++) {\n            monthlySales[i] = Math.floor(Math.random() * 10000) + 5000;\n          }\n        }\n\n        // Actualizar datos de gráfica de ventas\n        monthlySalesData.value.datasets[0].data = monthlySales;\n\n        // Calcular total de ventas\n        totalSales.value = monthlySales.reduce((sum, value) => sum + value, 0);\n        return transactions;\n      } catch (error) {\n        console.error(\"Error al obtener datos de transacciones:\", error);\n        // Si no hay datos, generar datos de ejemplo\n        const monthlySales = [];\n        for (let i = 0; i < 12; i++) {\n          monthlySales.push(Math.floor(Math.random() * 10000) + 5000);\n        }\n        monthlySalesData.value.datasets[0].data = monthlySales;\n        totalSales.value = monthlySales.reduce((sum, value) => sum + value, 0);\n        throw error;\n      }\n    };\n\n    // Calcular el total de ventas\n    const calculateTotalSales = () => {\n      return totalSales.value;\n    };\n\n    // Cargar todos los datos\n    const loadAllData = async () => {\n      isLoading.value = true;\n      error.value = null;\n      try {\n        await Promise.all([fetchMedicinesData(), fetchTransactionsData()]);\n      } catch (err) {\n        console.error(\"Error al cargar datos:\", err);\n        error.value = \"No se pudieron cargar algunos datos. Se muestran datos parciales o de ejemplo.\";\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    // Ejecutar al montar el componente\n    onMounted(async () => {\n      if (checkAdminStatus()) {\n        await loadAllData();\n      }\n    });\n    const __returned__ = {\n      router,\n      userStore,\n      ip,\n      topCategoriesData,\n      monthlySalesData,\n      inventoryStatusData,\n      totalCategories,\n      totalSales,\n      totalInventory,\n      categoryOptions,\n      salesOptions,\n      inventoryOptions,\n      isLoading,\n      error,\n      checkAdminStatus,\n      fetchMedicinesData,\n      fetchTransactionsData,\n      calculateTotalSales,\n      loadAllData,\n      ref,\n      onMounted,\n      get useRouter() {\n        return useRouter;\n      },\n      get useUserStore() {\n        return useUserStore;\n      },\n      get Bar() {\n        return Bar;\n      },\n      get Pie() {\n        return Pie;\n      },\n      get Doughnut() {\n        return Doughnut;\n      },\n      get Chart() {\n        return Chart;\n      },\n      get CategoryScale() {\n        return CategoryScale;\n      },\n      get LinearScale() {\n        return LinearScale;\n      },\n      get BarElement() {\n        return BarElement;\n      },\n      get Title() {\n        return Title;\n      },\n      get Tooltip() {\n        return Tooltip;\n      },\n      get Legend() {\n        return Legend;\n      },\n      get ArcElement() {\n        return ArcElement;\n      },\n      get RadialLinearScale() {\n        return RadialLinearScale;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRouter","useUserStore","Bar","Pie","Doughnut","Chart","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","ArcElement","RadialLinearScale","axios","register","router","userStore","ip","process","env","VUE_APP_IP","console","log","topCategoriesData","labels","datasets","backgroundColor","data","monthlySalesData","label","inventoryStatusData","totalCategories","totalSales","totalInventory","categoryOptions","responsive","maintainAspectRatio","plugins","title","display","text","legend","position","tooltip","callbacks","context","raw","salesOptions","toLocaleString","scales","y","beginAtZero","ticks","callback","value","inventoryOptions","cutout","isLoading","error","checkAdminStatus","isAdmin","storedRole","localStorage","getItem","storedUser","parsedUser","JSON","parse","role","setUser","storedSession","parsedSession","e","push","setTimeout","alert","fetchMedicinesData","response","get","medicines","length","exampleData","name","percentage","map","item","categories","totalInventoryCount","forEach","medicine","category","activeMedicament","soldUnits","stock","sortedCategories","Object","entries","sort","a","b","slice","totalCategorySales","reduce","sum","cat","Math","round","inventoryStatus","fetchTransactionsData","transactions","monthlySales","Array","fill","transaction","dateField","transDate","billDate","date","Date","month","getMonth","total","every","i","floor","random","calculateTotalSales","loadAllData","Promise","all","err"],"sources":["/Users/nohelestradap/Documents/VsCode/ensurancePharmacy/pharmacy/src/pages/AdminDash.vue"],"sourcesContent":["<script setup>\nimport { ref, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useUserStore } from '@/stores/userStore';\nimport { Bar, Pie, Doughnut } from 'vue-chartjs';\nimport { Chart, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement, RadialLinearScale } from 'chart.js';\n\nimport axios from 'axios';\n\n// Registrar componentes de Chart.js\nChart.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement, RadialLinearScale);\n\nconst router = useRouter();\nconst userStore = useUserStore();\n\n// Obtener IP del servidor\nconst ip = process.env.VUE_APP_IP || '127.0.0.1';\nconsole.log(\"IP del servidor para API:\", ip);\n\n// Estado para almacenar los datos de las gráficas\nconst topCategoriesData = ref({\n  labels: [],\n  datasets: [{\n    backgroundColor: [\n      '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',\n      '#FF9F40', '#C9CBCF', '#7FB800', '#00A6ED', '#F6511D'\n    ],\n    data: []\n  }]\n});\n\nconst monthlySalesData = ref({\n  labels: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],\n  datasets: [{\n    label: 'Ventas Mensuales',\n    backgroundColor: '#4BC0C0',\n    data: []\n  }]\n});\n\nconst inventoryStatusData = ref({\n  labels: ['En exceso', 'Óptimo', 'Bajo', 'Crítico'],\n  datasets: [{\n    backgroundColor: ['#48bb78', '#4299e1', '#ecc94b', '#f56565'],\n    data: []\n  }]\n});\n\n// Estadísticas de resumen\nconst totalCategories = ref(0);\nconst totalSales = ref(0);\nconst totalInventory = ref(0);\n\n// Opciones de gráficas\nconst categoryOptions = ref({\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    title: {\n      display: true,\n      text: 'Top 10 Categorías de Medicamentos'\n    },\n    legend: {\n      position: 'right'\n    },\n    tooltip: {\n      callbacks: {\n        label: function(context) {\n          return `${context.label}: ${context.raw}%`;\n        }\n      }\n    }\n  }\n});\n\nconst salesOptions = ref({\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    title: {\n      display: true,\n      text: 'Ventas Mensuales'\n    },\n    legend: {\n      display: false\n    },\n    tooltip: {\n      callbacks: {\n        label: function(context) {\n          return `Q${context.raw.toLocaleString()}`;\n        }\n      }\n    }\n  },\n  scales: {\n    y: {\n      beginAtZero: true,\n      ticks: {\n        callback: function(value) {\n          return 'Q' + value.toLocaleString();\n        }\n      }\n    }\n  }\n});\n\nconst inventoryOptions = ref({\n  responsive: true,\n  maintainAspectRatio: false,\n  cutout: '70%',\n  plugins: {\n    title: {\n      display: true,\n      text: 'Estado del Inventario'\n    },\n    legend: {\n      position: 'bottom'\n    }\n  }\n});\n\n// Variables para estado de carga\nconst isLoading = ref(true);\nconst error = ref(null);\n\n// Comprobar si el usuario es administrador\nconst checkAdminStatus = () => {\n  console.log(\"Verificando si el usuario es administrador\");\n  \n  // Método 1: Verificar en el store\n  if (userStore.isAdmin()) {\n    console.log(\"El usuario es admin según el store\");\n    return true;\n  }\n  \n  // Método 2: Verificar directamente en localStorage\n  try {\n    // Verificar en 'role'\n    const storedRole = localStorage.getItem('role');\n    if (storedRole === 'admin') {\n      console.log(\"Usuario es admin según localStorage.role\");\n      return true;\n    }\n    \n    // Verificar en 'user'\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      const parsedUser = JSON.parse(storedUser);\n      if (parsedUser.role === 'admin') {\n        console.log(\"Usuario es admin según localStorage.user\");\n        // Actualizar el store por si acaso\n        userStore.setUser(parsedUser);\n        return true;\n      }\n    }\n    \n    // Verificar en 'session'\n    const storedSession = localStorage.getItem('session');\n    if (storedSession) {\n      const parsedSession = JSON.parse(storedSession);\n      if (parsedSession.role === 'admin') {\n        console.log(\"Usuario es admin según localStorage.session\");\n        // Actualizar el store por si acaso\n        userStore.setUser(parsedSession);\n        return true;\n      }\n    }\n  } catch (e) {\n    console.error(\"Error al verificar admin en localStorage:\", e);\n  }\n  \n  // Si llegamos aquí, no es admin o no hay datos\n  console.log(\"No se encontró rol admin. Redirigiendo...\");\n  router.push('/login');\n  setTimeout(() => {\n    alert('Acceso denegado: Solo administradores pueden acceder a este panel');\n  }, 500);\n  return false;\n};\n\n// Obtener datos de medicamentos y procesarlos para las gráficas\nconst fetchMedicinesData = async () => {\n  try {\n    console.log(\"Obteniendo datos de medicamentos\");\n    const response = await axios.get(`http://${ip}:8081/api2/medicines`);\n    const medicines = response.data;\n    console.log(\"Datos de medicamentos obtenidos:\", medicines);\n    \n    // Verificar si hay datos\n    if (!medicines || medicines.length === 0) {\n      console.log(\"No hay datos de medicamentos, usando datos de ejemplo\");\n      \n      // Datos de ejemplo\n      const exampleData = [\n        { name: 'Analgésicos', value: 320, percentage: 32 },\n        { name: 'Antibióticos', value: 245, percentage: 24 },\n        { name: 'Antiinflamatorios', value: 180, percentage: 18 },\n        { name: 'Antihistamínicos', value: 95, percentage: 9 },\n        { name: 'Antidepresivos', value: 70, percentage: 7 },\n        { name: 'Antihipertensivos', value: 50, percentage: 5 },\n        { name: 'Antigripales', value: 30, percentage: 3 },\n        { name: 'Vitaminas', value: 10, percentage: 1 },\n        { name: 'Suplementos', value: 5, percentage: 0.5 },\n        { name: 'Otros', value: 5, percentage: 0.5 }\n      ];\n      \n      // Actualizar datos de categoría\n      topCategoriesData.value.labels = exampleData.map(item => item.name);\n      topCategoriesData.value.datasets[0].data = exampleData.map(item => item.percentage);\n      \n      // Datos de ejemplo para inventario\n      inventoryStatusData.value.datasets[0].data = [15, 45, 20, 10];\n      \n      // Actualizar estadísticas\n      totalCategories.value = exampleData.length;\n      totalInventory.value = 90;\n      \n      return [];\n    }\n    \n    // Procesar datos para categorías (usando activeMedicament como categoría)\n    const categories = {};\n    let totalInventoryCount = 0;\n    \n    medicines.forEach(medicine => {\n      const category = medicine.activeMedicament || 'Sin categoría';\n      if (!categories[category]) {\n        categories[category] = 0;\n      }\n      // Sumar unidades vendidas (o unidades en stock si no hay vendidas)\n      categories[category] += medicine.soldUnits || 1;\n      \n      // Contar inventario total\n      totalInventoryCount += medicine.stock || 0;\n    });\n    \n    // Convertir a array y ordenar por ventas\n    let sortedCategories = Object.entries(categories)\n      .map(([name, value]) => ({ name, value }))\n      .sort((a, b) => b.value - a.value);\n    \n    // Almacenar total de categorías\n    totalCategories.value = sortedCategories.length;\n    \n    // Tomar solo las 10 primeras\n    sortedCategories = sortedCategories.slice(0, 10);\n    \n    // Calcular porcentajes\n    const totalCategorySales = sortedCategories.reduce((sum, cat) => sum + cat.value, 0);\n    sortedCategories.forEach(cat => {\n      cat.percentage = Math.round((cat.value / totalCategorySales) * 100);\n    });\n    \n    // Actualizar datos de gráfica de categorías\n    topCategoriesData.value.labels = sortedCategories.map(cat => cat.name);\n    topCategoriesData.value.datasets[0].data = sortedCategories.map(cat => cat.percentage);\n    \n    // Procesar datos para estado de inventario\n    const inventoryStatus = {\n      'En exceso': 0,\n      'Óptimo': 0,\n      'Bajo': 0,\n      'Crítico': 0\n    };\n    \n    medicines.forEach(medicine => {\n      const stock = medicine.stock || 0;\n      if (stock > 50) {\n        inventoryStatus['En exceso']++;\n      } else if (stock > 20) {\n        inventoryStatus['Óptimo']++;\n      } else if (stock > 5) {\n        inventoryStatus['Bajo']++;\n      } else {\n        inventoryStatus['Crítico']++;\n      }\n    });\n    \n    // Actualizar datos de gráfica de inventario\n    inventoryStatusData.value.datasets[0].data = [\n      inventoryStatus['En exceso'],\n      inventoryStatus['Óptimo'],\n      inventoryStatus['Bajo'],\n      inventoryStatus['Crítico']\n    ];\n    \n    // Actualizar conteo total de inventario\n    totalInventory.value = totalInventoryCount;\n    \n    return medicines;\n  } catch (error) {\n    console.error(\"Error al obtener datos de medicamentos:\", error);\n    \n    // Datos de ejemplo en caso de error\n    const exampleData = [\n      { name: 'Analgésicos', value: 320, percentage: 32 },\n      { name: 'Antibióticos', value: 245, percentage: 24 },\n      { name: 'Antiinflamatorios', value: 180, percentage: 18 },\n      { name: 'Antihistamínicos', value: 95, percentage: 9 },\n      { name: 'Antidepresivos', value: 70, percentage: 7 },\n      { name: 'Antihipertensivos', value: 50, percentage: 5 },\n      { name: 'Antigripales', value: 30, percentage: 3 },\n      { name: 'Vitaminas', value: 10, percentage: 1 },\n      { name: 'Suplementos', value: 5, percentage: 0.5 },\n      { name: 'Otros', value: 5, percentage: 0.5 }\n    ];\n    \n    // Actualizar datos\n    topCategoriesData.value.labels = exampleData.map(item => item.name);\n    topCategoriesData.value.datasets[0].data = exampleData.map(item => item.percentage);\n    inventoryStatusData.value.datasets[0].data = [15, 45, 20, 10];\n    totalCategories.value = exampleData.length;\n    totalInventory.value = 90;\n    \n    throw error;\n  }\n};\n\n// Obtener datos de transacciones/ventas\nconst fetchTransactionsData = async () => {\n  try {\n    console.log(\"Obteniendo datos de transacciones/facturas\");\n    // Primero intentamos con la API de transacciones\n    let transactions = [];\n    try {\n      const response = await axios.get(`http://${ip}:8081/api2/transactions`);\n      transactions = response.data;\n      console.log(\"Datos de transacciones obtenidos:\", transactions);\n    } catch (e) {\n      console.log(\"Error al obtener transacciones, intentando con bills:\", e);\n      // Si falla, intentamos con la API de facturas\n      const response = await axios.get(`http://${ip}:8081/api2/bills`);\n      transactions = response.data;\n      console.log(\"Datos de facturas obtenidos:\", transactions);\n    }\n    \n    // Inicializar datos de ventas mensuales\n    const monthlySales = Array(12).fill(0);\n    \n    // Procesar transacciones por mes\n    transactions.forEach(transaction => {\n      // Verificar si el campo fecha existe\n      const dateField = transaction.transDate || transaction.billDate || null;\n      if (dateField) {\n        const date = new Date(dateField);\n        const month = date.getMonth();\n        // Sumar el total de la transacción\n        monthlySales[month] += transaction.total || 0;\n      }\n    });\n    \n    // Si no hay datos, usar datos de ejemplo\n    if (monthlySales.every(value => value === 0)) {\n      console.log(\"No hay datos reales de ventas, usando datos de ejemplo\");\n      for (let i = 0; i < 12; i++) {\n        monthlySales[i] = Math.floor(Math.random() * 10000) + 5000;\n      }\n    }\n    \n    // Actualizar datos de gráfica de ventas\n    monthlySalesData.value.datasets[0].data = monthlySales;\n    \n    // Calcular total de ventas\n    totalSales.value = monthlySales.reduce((sum, value) => sum + value, 0);\n    \n    return transactions;\n  } catch (error) {\n    console.error(\"Error al obtener datos de transacciones:\", error);\n    // Si no hay datos, generar datos de ejemplo\n    const monthlySales = [];\n    for (let i = 0; i < 12; i++) {\n      monthlySales.push(Math.floor(Math.random() * 10000) + 5000);\n    }\n    monthlySalesData.value.datasets[0].data = monthlySales;\n    totalSales.value = monthlySales.reduce((sum, value) => sum + value, 0);\n    \n    throw error;\n  }\n};\n\n// Calcular el total de ventas\nconst calculateTotalSales = () => {\n  return totalSales.value;\n};\n\n// Cargar todos los datos\nconst loadAllData = async () => {\n  isLoading.value = true;\n  error.value = null;\n  \n  try {\n    await Promise.all([\n      fetchMedicinesData(),\n      fetchTransactionsData()\n    ]);\n  } catch (err) {\n    console.error(\"Error al cargar datos:\", err);\n    error.value = \"No se pudieron cargar algunos datos. Se muestran datos parciales o de ejemplo.\";\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Ejecutar al montar el componente\nonMounted(async () => {\n  if (checkAdminStatus()) {\n    await loadAllData();\n  }\n});\n</script>\n\n<template>\n  <div class=\"admin-dashboard\">\n    <Header />\n    \n    <div class=\"dashboard-container\">\n      <h1 class=\"dashboard-title\">Dashboard Administrativo</h1>\n      \n      <!-- Mensaje de error si hay problemas con las APIs -->\n      <div v-if=\"error\" class=\"error-message\">\n        {{ error }}\n      </div>\n      \n      <!-- Indicadores de resumen -->\n      <div class=\"summary-cards\">\n        <div class=\"summary-card\">\n          <div class=\"card-icon\">💊</div>\n          <div class=\"card-content\">\n            <h3 class=\"card-title\">Total Categorías</h3>\n            <p class=\"card-value\">{{ totalCategories }}</p>\n          </div>\n        </div>\n        \n        <div class=\"summary-card\">\n          <div class=\"card-icon\">💰</div>\n          <div class=\"card-content\">\n            <h3 class=\"card-title\">Ventas Anuales</h3>\n            <p class=\"card-value\">Q{{ calculateTotalSales().toLocaleString() }}</p>\n          </div>\n        </div>\n        \n        <div class=\"summary-card\">\n          <div class=\"card-icon\">📊</div>\n          <div class=\"card-content\">\n            <h3 class=\"card-title\">Inventario Total</h3>\n            <p class=\"card-value\">{{ totalInventory }} unidades</p>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Pantalla de carga -->\n      <div v-if=\"isLoading\" class=\"loading-container\">\n        <div class=\"spinner\"></div>\n        <p>Cargando datos del dashboard...</p>\n      </div>\n      \n      <!-- Contenido principal -->\n      <div v-else class=\"dashboard-grid\">\n        <!-- Gráfica 1: Top Categorías -->\n        <div class=\"dashboard-card top-categories\">\n          <h2 class=\"card-title\">Top 10 Categorías de Medicamentos</h2>\n          <div class=\"chart-container\">\n            <Pie \n              :data=\"topCategoriesData\" \n              :options=\"categoryOptions\" \n              :height=\"220\"\n            />\n          </div>\n          <div v-if=\"topCategoriesData.labels.length > 0\" class=\"chart-legend\">\n            <div v-for=\"(value, index) in topCategoriesData.labels\" :key=\"index\" class=\"legend-item\">\n              <span class=\"color-box\" :style=\"{backgroundColor: topCategoriesData.datasets[0].backgroundColor[index % 10]}\"></span>\n              <span class=\"legend-label\">{{ value }}:</span>\n              <span class=\"legend-value\">{{ topCategoriesData.datasets[0].data[index] }}%</span>\n            </div>\n          </div>\n          <div v-else class=\"no-data-message\">\n            No hay datos de categorías disponibles\n          </div>\n        </div>\n        \n        <!-- Gráfica 2: Ventas Mensuales -->\n        <div class=\"dashboard-card sales\">\n          <h2 class=\"card-title\">Ventas Mensuales</h2>\n          <div class=\"chart-container\">\n            <Bar \n              :data=\"monthlySalesData\" \n              :options=\"salesOptions\" \n              :height=\"220\"\n            />\n          </div>\n          <div class=\"sales-summary\">\n            <p>Total anual: <span class=\"total-amount\">Q{{ calculateTotalSales().toLocaleString() }}</span></p>\n            <p>Promedio mensual: <span class=\"total-amount\">Q{{ Math.round(calculateTotalSales() / 12).toLocaleString() }}</span></p>\n          </div>\n        </div>\n        \n        <!-- Gráfica 3: Estado del Inventario -->\n        <div class=\"dashboard-card inventory\">\n          <h2 class=\"card-title\">Estado del Inventario</h2>\n          <div class=\"chart-container\">\n            <Doughnut \n              :data=\"inventoryStatusData\" \n              :options=\"inventoryOptions\" \n              :height=\"180\"\n            />\n          </div>\n          <div class=\"inventory-status\">\n            <div v-for=\"(label, index) in inventoryStatusData.labels\" :key=\"index\" class=\"status-item\" :class=\"`status-${label.toLowerCase().replace(' ', '-')}`\">\n              <span class=\"status-label\">{{ label }}:</span>\n              <span class=\"status-value\">{{ inventoryStatusData.datasets[0].data[index] }} productos</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.admin-dashboard {\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n.dashboard-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n}\n\n.dashboard-title {\n  color: #1e40af;\n  font-size: 2rem;\n  font-weight: bold;\n  margin-bottom: 2rem;\n  text-align: center;\n}\n\n.error-message {\n  background-color: #fecaca;\n  color: #b91c1c;\n  padding: 1rem;\n  border-radius: 0.5rem;\n  margin-bottom: 1.5rem;\n  text-align: center;\n}\n\n.summary-cards {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1.5rem;\n  margin-bottom: 2rem;\n}\n\n.summary-card {\n  background-color: white;\n  border-radius: 0.5rem;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 1.5rem;\n  display: flex;\n  align-items: center;\n  transition: transform 0.2s;\n}\n\n.summary-card:hover {\n  transform: translateY(-5px);\n}\n\n.card-icon {\n  font-size: 2rem;\n  margin-right: 1rem;\n}\n\n.card-title {\n  color: #4a5568;\n  font-size: 0.9rem;\n  margin-bottom: 0.5rem;\n}\n\n.card-value {\n  color: #1e40af;\n  font-size: 1.5rem;\n  font-weight: bold;\n  margin: 0;\n}\n\n.dashboard-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n  gap: 2rem;\n}\n\n.dashboard-card {\n  background-color: white;\n  border-radius: 0.5rem;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 1.5rem;\n  transition: transform 0.2s;\n  overflow: hidden;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-5px);\n}\n\n.card-title {\n  color: #1e40af;\n  font-size: 1.25rem;\n  font-weight: bold;\n  margin-bottom: 1rem;\n}\n\n.chart-container {\n  height: 220px;\n  position: relative;\n  margin-bottom: 1rem;\n}\n\n.no-data-message {\n  text-align: center;\n  color: #718096;\n  padding: 1rem;\n  background-color: #f7fafc;\n  border-radius: 0.25rem;\n}\n\n/* Leyenda para categorías */\n.chart-legend {\n  margin-top: 1rem;\n  max-height: 150px;\n  overflow-y: auto;\n  border-top: 1px solid #e2e8f0;\n  padding-top: 0.5rem;\n}\n\n.legend-item {\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n}\n\n.color-box {\n  width: 12px;\n  height: 12px;\n  border-radius: 2px;\n  margin-right: 0.5rem;\n}\n\n.legend-label {\n  flex: 1;\n  font-size: 0.85rem;\n}\n\n.legend-value {\n  font-weight: bold;\n  color: #1e40af;\n}\n\n/* Resumen de ventas */\n.sales-summary {\n  margin-top: 1rem;\n  text-align: right;\n  padding: 0.5rem;\n  background-color: #f8f9fa;\n  border-radius: 0.25rem;\n}\n\n.total-amount {\n  font-weight: bold;\n  color: #1e40af;\n}\n\n/* Estado de inventario */\n.inventory-status {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 0.5rem;\n  margin-top: 1rem;\n}\n\n.status-item {\n  background-color: #f8f9fa;\n  padding: 0.5rem;\n  border-radius: 0.25rem;\n  display: flex;\n  flex-direction: column;\n  font-size: 0.85rem;\n}\n\n.status-label {\n  font-weight: 500;\n}\n\n.status-value {\n  font-weight: bold;\n}\n\n.status-en-exceso {\n  border-left: 3px solid #48bb78;\n  background-color: rgba(198, 246, 213, 0.3);\n}\n\n.status-óptimo {\n  border-left: 3px solid #4299e1;\n  background-color: rgba(190, 227, 248, 0.3);\n}\n\n.status-bajo {\n  border-left: 3px solid #ecc94b;\n  background-color: rgba(254, 252, 191, 0.3);\n}\n\n.status-crítico {\n  border-left: 3px solid #f56565;\n  background-color: rgba(254, 215, 215, 0.3);\n}\n\n/* Pantalla de carga */\n.loading-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 4rem;\n}\n\n.spinner {\n  border: 4px solid rgba(0, 0, 0, 0.1);\n  border-left-color: #1e40af;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 1rem;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n  .dashboard-container {\n    padding: 1rem;\n  }\n  \n  .dashboard-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .summary-cards {\n    grid-template-columns: 1fr;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}