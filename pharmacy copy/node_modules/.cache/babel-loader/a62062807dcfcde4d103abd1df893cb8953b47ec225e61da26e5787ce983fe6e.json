{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nexport default {\n  __name: 'Prescriptions',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const recipes = ref([]);\n    const errorMessage = ref('');\n    const patientInfo = ref(null);\n\n    // Funciones auxiliares para extraer información del paciente\n    const getPatientName = recipe => {\n      // Si el paciente es un objeto completo en la receta\n      if (recipe.patient && typeof recipe.patient === 'object' && recipe.patient.username) {\n        return recipe.patient.username;\n      }\n      // Si el paciente está referenciado como ID y tenemos la información del paciente guardada\n      if (patientInfo.value && recipe.patient === patientInfo.value._id) {\n        return patientInfo.value.username;\n      }\n      // Si doctor_details está presente, usamos el formato doctor_details\n      if (recipe.doctor_details) {\n        return recipe.patient_details ? recipe.patient_details.username : 'Paciente';\n      }\n      return 'Paciente';\n    };\n    const getPatientEmail = recipe => {\n      // Si el paciente es un objeto completo en la receta\n      if (recipe.patient && typeof recipe.patient === 'object' && recipe.patient.email) {\n        return recipe.patient.email;\n      }\n      // Si el paciente está referenciado como ID y tenemos la información del paciente guardada\n      if (patientInfo.value && recipe.patient === patientInfo.value._id) {\n        return patientInfo.value.email;\n      }\n      // Si patient_details está presente\n      if (recipe.patient_details) {\n        return recipe.patient_details.email;\n      }\n      return '';\n    };\n    const getDiagnostic = recipe => {\n      // Intentar obtener diagnóstico desde diferentes estructuras posibles\n      if (recipe.diagnostic) {\n        return recipe.diagnostic;\n      }\n      if (recipe.medicines && recipe.medicines.length > 0 && recipe.medicines[0].diagnostico) {\n        return recipe.medicines[0].diagnostico;\n      }\n      return 'No especificado';\n    };\n    const fetchPrescriptions = async () => {\n      try {\n        // Obtener el email del usuario del localStorage\n        let userEmail = ''; // Valor por defecto\n        try {\n          const userData = JSON.parse(localStorage.getItem('user'));\n          if (userData && userData.email) {\n            userEmail = userData.email;\n            console.log(\"Email de usuario obtenido:\", userEmail);\n          } else {\n            // Intentar obtener desde session\n            const sessionData = JSON.parse(localStorage.getItem('session'));\n            if (sessionData && sessionData.email) {\n              userEmail = sessionData.email;\n              console.log(\"Email de usuario obtenido de session:\", userEmail);\n            } else {\n              console.warn(\"No se encontró el email de usuario en localStorage\");\n              // Fallback a username si no hay email\n              if (userData && userData.name) {\n                userEmail = userData.name;\n                console.log(\"Usando nombre de usuario en lugar de email:\", userEmail);\n              } else if (sessionData && sessionData.name) {\n                userEmail = sessionData.name;\n                console.log(\"Usando nombre de usuario de session en lugar de email:\", userEmail);\n              } else {\n                userEmail = 'rrrivera@unis.edu.gt'; // Valor por defecto si no hay información\n              }\n            }\n          }\n        } catch (err) {\n          console.error(\"Error al obtener el usuario del localStorage:\", err);\n          userEmail = 'rrrivera@unis.edu.gt'; // Valor por defecto en caso de error\n        }\n\n        // Usando la URL específica proporcionada\n        // Corrigiendo la URL (quitando un slash)\n        const baseUrl = 'http://172.20.10.2:8081/recipes/email/';\n        const url = `${baseUrl}${userEmail}`;\n        console.log(`Consultando recetas con URL dinámica: ${url}`);\n        const response = await axios.get(url, {\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log(\"Respuesta recibida:\", response);\n\n        // Verificar si la respuesta es HTML (texto que comienza con <!DOCTYPE o <html)\n        if (typeof response.data === 'string' && (response.data.trim().startsWith('<!DOCTYPE') || response.data.trim().startsWith('<html'))) {\n          console.error(\"Se recibió HTML en lugar de JSON:\", response.data.substring(0, 200) + '...');\n          recipes.value = [];\n          errorMessage.value = 'El servidor respondió con HTML en lugar de datos JSON. Verifique la conexión.';\n          return;\n        }\n\n        // Manejo flexible de diferentes formatos de respuesta\n        if (response.data) {\n          let recetasEncontradas = false;\n\n          // Verificamos si existe el objeto patient (formato nuevo)\n          if (response.data.patient && Array.isArray(response.data.recipes)) {\n            recipes.value = response.data.recipes;\n            patientInfo.value = response.data.patient;\n            recetasEncontradas = true;\n            console.log(\"Formato 1: Objeto con patient y recipes array\");\n          }\n          // Verificamos si recipes existe directamente en la respuesta como array\n          else if (Array.isArray(response.data.recipes)) {\n            recipes.value = response.data.recipes;\n            recetasEncontradas = true;\n            console.log(\"Formato 2: Objeto con recipes array\");\n          }\n          // En caso de que la API devuelva un array directamente\n          else if (Array.isArray(response.data)) {\n            recipes.value = response.data;\n            recetasEncontradas = true;\n            console.log(\"Formato 3: Array directo\");\n          }\n          // Si la API devuelve un objeto que es la receta directamente\n          else if (response.data._id && response.data.medicines) {\n            recipes.value = [response.data];\n            recetasEncontradas = true;\n            console.log(\"Formato 4: Objeto de receta única\");\n          }\n          // Si no reconocemos el formato, pero hay un objeto receta\n          else if (typeof response.data === 'object') {\n            // Intentar extraer cualquier array que parezca contener recetas\n            const possibleRecipesArrays = Object.values(response.data).filter(val => Array.isArray(val) && val.length > 0 && val[0]._id && val[0].medicines);\n            if (possibleRecipesArrays.length > 0) {\n              recipes.value = possibleRecipesArrays[0];\n              recetasEncontradas = true;\n              console.log(\"Formato 5: Extraído array de recetas de objeto\", possibleRecipesArrays[0]);\n            } else {\n              // Último intento: buscar propiedades que parezcan recetas individuales\n              const possibleRecipes = Object.values(response.data).filter(val => val && typeof val === 'object' && val._id && val.medicines);\n              if (possibleRecipes.length > 0) {\n                recipes.value = possibleRecipes;\n                recetasEncontradas = true;\n                console.log(\"Formato 6: Extraídas recetas individuales\", possibleRecipes);\n              }\n            }\n          }\n          console.log(\"RECETAS PROCESADAS:\", recipes.value);\n          if (!recetasEncontradas) {\n            console.warn(\"Formato de respuesta no reconocido:\", response.data);\n            recipes.value = [];\n            errorMessage.value = 'Formato de respuesta no reconocido. Consulte la consola para más detalles.';\n          } else if (recipes.value.length === 0) {\n            errorMessage.value = 'No se encontraron recetas para este usuario.';\n          }\n        } else {\n          console.warn(\"La respuesta del API está vacía\");\n          recipes.value = [];\n          errorMessage.value = 'No se encontraron recetas para este usuario.';\n        }\n      } catch (error) {\n        console.error(\"Error al obtener las recetas:\", error);\n        recipes.value = [];\n        errorMessage.value = `Error al obtener las recetas: ${error.message}. Por favor, inténtelo de nuevo.`;\n      }\n    };\n    onMounted(() => {\n      fetchPrescriptions();\n    });\n    const __returned__ = {\n      recipes,\n      errorMessage,\n      patientInfo,\n      getPatientName,\n      getPatientEmail,\n      getDiagnostic,\n      fetchPrescriptions,\n      ref,\n      onMounted,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","recipes","errorMessage","patientInfo","getPatientName","recipe","patient","username","value","_id","doctor_details","patient_details","getPatientEmail","email","getDiagnostic","diagnostic","medicines","length","diagnostico","fetchPrescriptions","userEmail","userData","JSON","parse","localStorage","getItem","console","log","sessionData","warn","name","err","error","baseUrl","url","response","get","headers","data","trim","startsWith","substring","recetasEncontradas","Array","isArray","possibleRecipesArrays","Object","values","filter","val","possibleRecipes","message"],"sources":["/Users/nohelestradap/Documents/VsCode/ensurancePharmacy/pharmacy/src/pages/Prescriptions.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n  <div class=\"prescriptions-container\">\n    <h2 class=\"text-2xl font-bold text-center text-blue-800 mb-4\">\n      Todas las Recetas\n    </h2>\n\n    <!-- Mensaje de error si lo hay -->\n    <div v-if=\"errorMessage\" class=\"mb-4 text-red-600 text-center\">\n      {{ errorMessage }}\n    </div>\n    <!-- Lista de recetas -->\n    <div v-if=\"recipes && recipes.length > 0\" class=\"prescriptions-list\">\n      <div v-for=\"recipe in recipes\" :key=\"recipe._id\" class=\"prescription-item\">\n        <h3 class=\"text-xl font-bold\">\n          {{ getPatientName(recipe) }}\n        </h3>\n        <p v-if=\"getPatientEmail(recipe)\"><strong>Email:</strong> {{ getPatientEmail(recipe) }}</p>\n        <p><strong>ID Receta:</strong> {{ recipe._id }}</p>\n        <p><strong>Diagnóstico:</strong> {{ getDiagnostic(recipe) }}</p>\n        <p v-if=\"recipe.created_at\"><strong>Fecha:</strong> {{ recipe.created_at }}</p>\n        <p v-if=\"recipe.formatted_date\"><strong>Fecha:</strong> {{ recipe.formatted_date }}</p>\n\n        <!-- Tabla de Medicinas -->\n        <table class=\"medicine-table\" v-if=\"recipe.medicines && recipe.medicines.length > 0\">\n          <thead>\n          <tr>\n            <th>Nombre</th>\n            <th>Concentración</th>\n            <th>Presentación</th>\n            <th>Dosis</th>\n            <th>Frecuencia</th>\n            <th>Duración</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr v-for=\"medicine in recipe.medicines\" :key=\"medicine._id\">\n            <td>{{ medicine.principioActivo }}</td>\n            <td>{{ medicine.concentracion }}</td>\n            <td>{{ medicine.presentacion }}</td>\n            <td>{{ medicine.dosis }}</td>\n            <td>{{ medicine.frecuencia }}</td>\n            <td>{{ medicine.duracion }}</td>\n          </tr>\n          </tbody>\n        </table>\n        <p v-if=\"recipe.has_insurance\" class=\"insurance-info\">Con seguro médico</p>\n        <button class=\"buy-button\" @click=\"$router.push({ name: 'PrescriptionPay', params: { id: recipe._id } })\">Comprar</button>\n      </div>\n    </div>\n\n    <!-- Mensaje si no hay recetas -->\n    <div v-else class=\"text-center text-gray-600\">\n      No hay recetas disponibles.\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\n\nconst recipes = ref([]);\nconst errorMessage = ref('');\nconst patientInfo = ref(null);\n\n// Funciones auxiliares para extraer información del paciente\nconst getPatientName = (recipe) => {\n  // Si el paciente es un objeto completo en la receta\n  if (recipe.patient && typeof recipe.patient === 'object' && recipe.patient.username) {\n    return recipe.patient.username;\n  }\n  // Si el paciente está referenciado como ID y tenemos la información del paciente guardada\n  if (patientInfo.value && recipe.patient === patientInfo.value._id) {\n    return patientInfo.value.username;\n  }\n  // Si doctor_details está presente, usamos el formato doctor_details\n  if (recipe.doctor_details) {\n    return recipe.patient_details ? recipe.patient_details.username : 'Paciente';\n  }\n  return 'Paciente';\n};\n\nconst getPatientEmail = (recipe) => {\n  // Si el paciente es un objeto completo en la receta\n  if (recipe.patient && typeof recipe.patient === 'object' && recipe.patient.email) {\n    return recipe.patient.email;\n  }\n  // Si el paciente está referenciado como ID y tenemos la información del paciente guardada\n  if (patientInfo.value && recipe.patient === patientInfo.value._id) {\n    return patientInfo.value.email;\n  }\n  // Si patient_details está presente\n  if (recipe.patient_details) {\n    return recipe.patient_details.email;\n  }\n  return '';\n};\n\nconst getDiagnostic = (recipe) => {\n  // Intentar obtener diagnóstico desde diferentes estructuras posibles\n  if (recipe.diagnostic) {\n    return recipe.diagnostic;\n  }\n  if (recipe.medicines && recipe.medicines.length > 0 && recipe.medicines[0].diagnostico) {\n    return recipe.medicines[0].diagnostico;\n  }\n  return 'No especificado';\n};\n\nconst fetchPrescriptions = async () => {\n  try {\n    // Obtener el email del usuario del localStorage\n    let userEmail = ''; // Valor por defecto\n    try {\n      const userData = JSON.parse(localStorage.getItem('user'));\n      if (userData && userData.email) {\n        userEmail = userData.email;\n        console.log(\"Email de usuario obtenido:\", userEmail);\n      } else {\n        // Intentar obtener desde session\n        const sessionData = JSON.parse(localStorage.getItem('session'));\n        if (sessionData && sessionData.email) {\n          userEmail = sessionData.email;\n          console.log(\"Email de usuario obtenido de session:\", userEmail);\n        } else {\n          console.warn(\"No se encontró el email de usuario en localStorage\");\n          // Fallback a username si no hay email\n          if (userData && userData.name) {\n            userEmail = userData.name;\n            console.log(\"Usando nombre de usuario en lugar de email:\", userEmail);\n          } else if (sessionData && sessionData.name) {\n            userEmail = sessionData.name;\n            console.log(\"Usando nombre de usuario de session en lugar de email:\", userEmail);\n          } else {\n            userEmail = 'rrrivera@unis.edu.gt'; // Valor por defecto si no hay información\n          }\n        }\n      }\n    } catch (err) {\n      console.error(\"Error al obtener el usuario del localStorage:\", err);\n      userEmail = 'rrrivera@unis.edu.gt'; // Valor por defecto en caso de error\n    }\n\n    // Usando la URL específica proporcionada\n    // Corrigiendo la URL (quitando un slash)\n    const baseUrl = 'http://172.20.10.2:8081/recipes/email/';\n    const url = `${baseUrl}${userEmail}`;\n    console.log(`Consultando recetas con URL dinámica: ${url}`);\n    \n    const response = await axios.get(url, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    console.log(\"Respuesta recibida:\", response);\n    \n    // Verificar si la respuesta es HTML (texto que comienza con <!DOCTYPE o <html)\n    if (typeof response.data === 'string' && \n        (response.data.trim().startsWith('<!DOCTYPE') || \n         response.data.trim().startsWith('<html'))) {\n      console.error(\"Se recibió HTML en lugar de JSON:\", response.data.substring(0, 200) + '...');\n      recipes.value = [];\n      errorMessage.value = 'El servidor respondió con HTML en lugar de datos JSON. Verifique la conexión.';\n      return;\n    }\n    \n    // Manejo flexible de diferentes formatos de respuesta\n    if (response.data) {\n      let recetasEncontradas = false;\n      \n      // Verificamos si existe el objeto patient (formato nuevo)\n      if (response.data.patient && Array.isArray(response.data.recipes)) {\n        recipes.value = response.data.recipes;\n        patientInfo.value = response.data.patient;\n        recetasEncontradas = true;\n        console.log(\"Formato 1: Objeto con patient y recipes array\");\n      } \n      // Verificamos si recipes existe directamente en la respuesta como array\n      else if (Array.isArray(response.data.recipes)) {\n        recipes.value = response.data.recipes;\n        recetasEncontradas = true;\n        console.log(\"Formato 2: Objeto con recipes array\");\n      } \n      // En caso de que la API devuelva un array directamente\n      else if (Array.isArray(response.data)) {\n        recipes.value = response.data;\n        recetasEncontradas = true;\n        console.log(\"Formato 3: Array directo\");\n      } \n      // Si la API devuelve un objeto que es la receta directamente\n      else if (response.data._id && response.data.medicines) {\n        recipes.value = [response.data];\n        recetasEncontradas = true;\n        console.log(\"Formato 4: Objeto de receta única\");\n      }\n      // Si no reconocemos el formato, pero hay un objeto receta\n      else if (typeof response.data === 'object') {\n        // Intentar extraer cualquier array que parezca contener recetas\n        const possibleRecipesArrays = Object.values(response.data).filter(val => \n          Array.isArray(val) && val.length > 0 && val[0]._id && val[0].medicines\n        );\n        \n        if (possibleRecipesArrays.length > 0) {\n          recipes.value = possibleRecipesArrays[0];\n          recetasEncontradas = true;\n          console.log(\"Formato 5: Extraído array de recetas de objeto\", possibleRecipesArrays[0]);\n        } else {\n          // Último intento: buscar propiedades que parezcan recetas individuales\n          const possibleRecipes = Object.values(response.data).filter(val => \n            val && typeof val === 'object' && val._id && val.medicines\n          );\n          \n          if (possibleRecipes.length > 0) {\n            recipes.value = possibleRecipes;\n            recetasEncontradas = true;\n            console.log(\"Formato 6: Extraídas recetas individuales\", possibleRecipes);\n          }\n        }\n      }\n      \n      console.log(\"RECETAS PROCESADAS:\", recipes.value);\n      \n      if (!recetasEncontradas) {\n        console.warn(\"Formato de respuesta no reconocido:\", response.data);\n        recipes.value = [];\n        errorMessage.value = 'Formato de respuesta no reconocido. Consulte la consola para más detalles.';\n      } else if (recipes.value.length === 0) {\n        errorMessage.value = 'No se encontraron recetas para este usuario.';\n      }\n    } else {\n      console.warn(\"La respuesta del API está vacía\");\n      recipes.value = [];\n      errorMessage.value = 'No se encontraron recetas para este usuario.';\n    }\n  } catch (error) {\n    console.error(\"Error al obtener las recetas:\", error);\n    recipes.value = [];\n    errorMessage.value = `Error al obtener las recetas: ${error.message}. Por favor, inténtelo de nuevo.`;\n  }\n};\n\nonMounted(() => {\n  fetchPrescriptions();\n});\n</script>\n\n<style scoped>\n.prescriptions-container {\n  padding: 50px;\n  background-color: #f8f9fa;\n}\n\n.prescriptions-list {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.prescription-item {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.medicine-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 10px;\n  margin-bottom: 15px;\n}\n\n.medicine-table th, .medicine-table td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: center;\n}\n\n.medicine-table th {\n  background-color: #f4f4f4;\n  font-weight: bold;\n}\n\n.insurance-info {\n  color: #4caf50;\n  font-weight: bold;\n  margin: 10px 0;\n}\n\n.buy-button {\n  background-color: #4caf50;\n  color: white;\n  padding: 8px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  border: none;\n  font-weight: bold;\n}\n\n.buy-button:hover {\n  background-color: #45a049;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}