{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport { useUserStore } from \"@/stores/userStore\";\nexport default {\n  __name: 'Prescriptions',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const userStore = useUserStore();\n    const prescriptions = ref([]);\n    const errorMessage = ref('');\n    const ip = process.env.VUE_APP_API_IP || 'localhost';\n    const fetchPrescriptions = async () => {\n      try {\n        const response = await axios.get(`http://${ip}:8081/api2/prescription_medicines`);\n        const allPrescriptions = response.data;\n\n        // Filtrar recetas que pertenecen al usuario actual\n        const userPrescriptions = allPrescriptions.filter(p => p.prescription.user.idUser == userStore.user.idUser);\n\n        // Agrupar recetas por prescriptionId\n        const grouped = {};\n        userPrescriptions.forEach(p => {\n          const prescId = p.id.prescriptionId;\n          if (!grouped[prescId]) {\n            grouped[prescId] = {\n              prescription: p.prescription,\n              medicines: []\n            };\n          }\n          grouped[prescId].medicines.push({\n            medicine: p.medicine,\n            dosis: p.dosis,\n            frecuencia: p.frecuencia,\n            duracion: p.duracion\n          });\n        });\n        const groupsArray = Object.values(grouped);\n        const filteredGroups = [];\n\n        // Para cada receta, llamar a la API de orders y omitir si status es \"Completado\"\n        for (const group of groupsArray) {\n          try {\n            const orderResponse = await axios.get(`http://${ip}:8081/api2/orders?id=${group.prescription.idPrescription}`);\n            const orderData = Array.isArray(orderResponse.data) ? orderResponse.data[0] : orderResponse.data;\n            if (!orderData || orderData.status === 'Completado') {\n              continue;\n            }\n            filteredGroups.push(group);\n          } catch (err) {\n            if (err.response?.status === 404) {\n              // No existe orden → incluir receta\n              filteredGroups.push(group);\n            } else {\n              throw err;\n            }\n          }\n        }\n        prescriptions.value = filteredGroups;\n        console.log(\"RECETAS AGRUPADAS:\", prescriptions.value);\n      } catch (error) {\n        console.error(\"Error al obtener las recetas:\", error);\n        errorMessage.value = 'Error al obtener las recetas. Por favor, inténtelo de nuevo.';\n      }\n    };\n    onMounted(() => {\n      fetchPrescriptions();\n    });\n    const __returned__ = {\n      userStore,\n      prescriptions,\n      errorMessage,\n      ip,\n      fetchPrescriptions,\n      ref,\n      onMounted,\n      get axios() {\n        return axios;\n      },\n      get useUserStore() {\n        return useUserStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","useUserStore","userStore","prescriptions","errorMessage","ip","process","env","VUE_APP_API_IP","fetchPrescriptions","response","get","allPrescriptions","data","userPrescriptions","filter","p","prescription","user","idUser","grouped","forEach","prescId","id","prescriptionId","medicines","push","medicine","dosis","frecuencia","duracion","groupsArray","Object","values","filteredGroups","group","orderResponse","idPrescription","orderData","Array","isArray","status","err","value","console","log","error"],"sources":["/Users/nohelestradap/Documents/VsCode/ensurancePharmacy/pharmacy/src/pages/Prescriptions.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n  <div class=\"prescriptions-container\">\n    <h2 class=\"text-2xl font-bold text-center text-blue-800 mb-4\">\n      Todas las Recetas\n    </h2>\n\n    <!-- Mensaje de error si lo hay -->\n    <div v-if=\"errorMessage\" class=\"mb-4 text-red-600 text-center\">\n      {{ errorMessage }}\n    </div>\n\n    <!-- Lista de recetas -->\n    <div v-if=\"prescriptions.length > 0\" class=\"prescriptions-list\">\n      <div v-for=\"group in prescriptions\" :key=\"group.prescription.idPrescription\" class=\"prescription-item\">\n        <h3 class=\"text-xl font-bold\">{{ group.prescription.user.name }}</h3>\n        <p><strong>ID Receta:</strong> {{ group.prescription.idPrescription }}</p>\n        <p><strong>Diagnóstico:</strong> {{ group.prescription.diagnosis || 'No especificado' }}</p>\n        <p><strong>Fecha:</strong> {{ group.prescription.date || 'No disponible' }}</p>\n\n        <!-- Tabla de Medicinas -->\n        <table class=\"medicine-table\">\n          <thead>\n          <tr>\n            <th>Nombre</th>\n            <th>Concentración</th>\n            <th>Presentación</th>\n            <th>Dosis</th>\n            <th>Frecuencia</th>\n            <th>Duración</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr v-for=\"medicineEntry in group.medicines\" :key=\"medicineEntry.medicine.idMedicine\">\n            <td>{{ medicineEntry.medicine.name }}</td>\n            <td>{{ medicineEntry.medicine.concentration }}</td>\n            <td>{{ medicineEntry.medicine.presentacion }}</td>\n            <td>{{ medicineEntry.dosis }}</td>\n            <td>{{ medicineEntry.frecuencia }}</td>\n            <td>{{ medicineEntry.duracion }} días</td>\n          </tr>\n          </tbody>\n        </table>\n        <button @click=\"$router.push({ name: 'PrescriptionPay', params: { id: group.prescription.idPrescription } })\">Comprar</button>\n      </div>\n    </div>\n\n    <!-- Mensaje si no hay recetas -->\n    <div v-else class=\"text-center text-gray-600\">\n      No hay recetas disponibles.\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport { useUserStore } from \"@/stores/userStore\";\nconst userStore = useUserStore();\n\nconst prescriptions = ref([]);\nconst errorMessage = ref('');\nconst ip = process.env.VUE_APP_API_IP || 'localhost';\n\nconst fetchPrescriptions = async () => {\n  try {\n    const response = await axios.get(`http://${ip}:8081/api2/prescription_medicines`);\n    const allPrescriptions = response.data;\n\n    // Filtrar recetas que pertenecen al usuario actual\n    const userPrescriptions = allPrescriptions.filter(p => p.prescription.user.idUser == userStore.user.idUser);\n\n    // Agrupar recetas por prescriptionId\n    const grouped = {};\n    userPrescriptions.forEach(p => {\n      const prescId = p.id.prescriptionId;\n      if (!grouped[prescId]) {\n        grouped[prescId] = {\n          prescription: p.prescription,\n          medicines: []\n        };\n      }\n      grouped[prescId].medicines.push({\n        medicine: p.medicine,\n        dosis: p.dosis,\n        frecuencia: p.frecuencia,\n        duracion: p.duracion\n      });\n    });\n    const groupsArray = Object.values(grouped);\n    const filteredGroups = [];\n\n    // Para cada receta, llamar a la API de orders y omitir si status es \"Completado\"\n    for (const group of groupsArray) {\n      try {\n        const orderResponse = await axios.get(`http://${ip}:8081/api2/orders?id=${group.prescription.idPrescription}`);\n        const orderData = Array.isArray(orderResponse.data) ? orderResponse.data[0] : orderResponse.data;\n        if (!orderData || orderData.status === 'Completado') {\n          continue;\n        }\n        filteredGroups.push(group);\n      } catch (err) {\n        if (err.response?.status === 404) {\n          // No existe orden → incluir receta\n          filteredGroups.push(group);\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    prescriptions.value = filteredGroups;\n    console.log(\"RECETAS AGRUPADAS:\", prescriptions.value);\n  } catch (error) {\n    console.error(\"Error al obtener las recetas:\", error);\n    errorMessage.value = 'Error al obtener las recetas. Por favor, inténtelo de nuevo.';\n  }\n};\n\nonMounted(() => {\n  fetchPrescriptions();\n});\n</script>\n\n<style scoped>\n.prescriptions-container {\n  padding: 50px;\n  background-color: #f8f9fa;\n}\n\n.prescriptions-list {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.prescription-item {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.medicine-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 10px;\n}\n\n.medicine-table th, .medicine-table td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: center;\n}\n\n.medicine-table th {\n  background-color: #f4f4f4;\n  font-weight: bold;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}