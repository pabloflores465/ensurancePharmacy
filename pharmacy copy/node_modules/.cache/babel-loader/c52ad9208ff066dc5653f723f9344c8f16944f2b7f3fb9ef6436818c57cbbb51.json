{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport { useRoute } from 'vue-router';\nimport axios from 'axios';\nexport default {\n  __name: 'PrescriptionPay',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const prescription = ref(null);\n    const errorMessage = ref('');\n    const ip = process.env.VUE_APP_API_IP || 'localhost';\n    const isModalOpen = ref(false);\n    const cardNumber = ref('');\n    const cardExpiry = ref('');\n    const cardCvv = ref('');\n    const isCardValid = computed(() => {\n      return cardNumber.value && cardExpiry.value && cardCvv.value;\n    });\n    const allMedicinesAvailable = computed(() => {\n      return prescription.value && prescription.value.medicines.every(med => med.details && Math.ceil(med.dosis * med.duracion / med.details.presentacion) <= med.details.stock);\n    });\n    const fetchMedicineDetails = async medicine => {\n      try {\n        const response = await axios.get(`http://${ip}:8081/api2/medicines/${medicine.idMedicine}`);\n        // Extract only specific fields: name, presentacion, concentration, image, and stock\n        const {\n          name,\n          presentacion,\n          concentration,\n          image,\n          stock\n        } = response.data;\n        medicine.details = {\n          name,\n          presentacion,\n          concentration,\n          image,\n          stock\n        };\n      } catch (error) {\n        console.error(`Error fetching details for medicine id ${medicine.idMedicine}:`, error);\n        medicine.details = null;\n      }\n    };\n    const fetchPrescription = async () => {\n      try {\n        const prescriptionId = route.params.id;\n        // Fetch all prescription medicines as in Prescriptions.vue\n        const response = await axios.get(`http://${ip}:8081/api2/prescription_medicines`);\n        const allData = response.data;\n        // Filtrar solo las recetas que coinciden con el id de la receta\n        const filtered = allData.filter(p => p.id.prescriptionId == prescriptionId);\n        if (filtered.length > 0) {\n          // Agrupar los datos por prescriptionId para consolidar las medicinas\n          const grouped = {};\n          filtered.forEach(p => {\n            const prescId = p.id.prescriptionId;\n            if (!grouped[prescId]) {\n              grouped[prescId] = {\n                ...p,\n                // Copy all properties of p (including idPrescription, approved, hospital, user, etc.)\n                medicines: []\n              };\n            }\n            grouped[prescId].medicines.push({\n              ...p.medicine,\n              dosis: p.dosis,\n              frecuencia: p.frecuencia,\n              duracion: p.duracion\n            });\n          });\n          prescription.value = grouped[prescriptionId];\n          if (prescription.value && prescription.value.medicines) {\n            prescription.value.medicines.forEach(med => {\n              fetchMedicineDetails(med);\n            });\n          }\n          console.log(prescription.value);\n        } else {\n          errorMessage.value = 'No se encontró la receta.';\n        }\n      } catch (error) {\n        console.error('Error al obtener la receta:', error);\n        errorMessage.value = 'Error al obtener la receta. Por favor, inténtelo de nuevo.';\n      }\n    };\n    const openModal = () => {\n      isModalOpen.value = true;\n    };\n    const closeModal = () => {\n      isModalOpen.value = false;\n    };\n    const completePurchase = async () => {\n      if (!isCardValid.value) return;\n      try {\n        // Create order with status 'Completado' and user id from prescription\n        const orderResponse = await axios.post(`http://${ip}:8081/api2/orders`, {\n          status: \"Completado\",\n          user: {\n            idUser: prescription.value.user.idUser\n          }\n        });\n        const order = orderResponse.data;\n\n        // For each medicine, calculate quantity and send to order_medicines API\n        for (const med of prescription.value.medicines) {\n          const quantity = Math.ceil(med.dosis * med.duracion / med.details.presentacion);\n          await axios.post(`http://${ip}:8081/api2/order_medicines`, {\n            orders: order,\n            medicine: {\n              idMedicine: med.idMedicine\n            },\n            quantity: quantity,\n            cost: med.price || 0,\n            total: (med.price || 0) * quantity\n          });\n        }\n        closeModal();\n        alert(\"Gracias por tu compra\");\n        window.location.href = \"/\";\n      } catch (error) {\n        console.error(\"Error completing purchase:\", error);\n        alert(\"Error al completar la compra. Intente de nuevo.\");\n      }\n    };\n    onMounted(() => {\n      fetchPrescription();\n    });\n    const __returned__ = {\n      route,\n      prescription,\n      errorMessage,\n      ip,\n      isModalOpen,\n      cardNumber,\n      cardExpiry,\n      cardCvv,\n      isCardValid,\n      allMedicinesAvailable,\n      fetchMedicineDetails,\n      fetchPrescription,\n      openModal,\n      closeModal,\n      completePurchase,\n      ref,\n      onMounted,\n      computed,\n      get useRoute() {\n        return useRoute;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","useRoute","axios","route","prescription","errorMessage","ip","process","env","VUE_APP_API_IP","isModalOpen","cardNumber","cardExpiry","cardCvv","isCardValid","value","allMedicinesAvailable","medicines","every","med","details","Math","ceil","dosis","duracion","presentacion","stock","fetchMedicineDetails","medicine","response","get","idMedicine","name","concentration","image","data","error","console","fetchPrescription","prescriptionId","params","id","allData","filtered","filter","p","length","grouped","forEach","prescId","push","frecuencia","log","openModal","closeModal","completePurchase","orderResponse","post","status","user","idUser","order","quantity","orders","cost","price","total","alert","window","location","href"],"sources":["/Users/nohelestradap/Documents/VsCode/ensurancePharmacy/pharmacy/src/pages/PrescriptionPay.vue"],"sourcesContent":["<template>\n  <div class=\"prescription-pay-container\">\n    <h2 class=\"text-2xl font-bold text-center text-blue-800 mb-4\">Detalle de la Receta</h2>\n\n    <!-- Mensaje de error si lo hay -->\n    <div v-if=\"errorMessage\" class=\"mb-4 text-red-600 text-center\">\n      {{ errorMessage }}\n    </div>\n\n    <!-- Mostrar la receta cuando se cargue -->\n    <div v-if=\"prescription\">\n      <p><strong>ID Receta:</strong> {{ prescription.id.prescriptionId }}</p>\n\n      <!-- Tabla de Medicinas si existen -->\n      <div v-if=\"prescription.medicines && prescription.medicines.length > 0\">\n        <table class=\"medicine-table\">\n          <thead>\n            <tr>\n              <th>Nombre</th>\n              <th>Concentración</th>\n              <th>Presentación</th>\n              <th>Dosis</th>\n              <th>Frecuencia</th>\n              <th>Duración</th>\n            </tr>\n          </thead>\n          <tbody>\n            <template v-for=\"medicine in prescription.medicines\" :key=\"medicine.idMedicine\">\n              <tr>\n                <td>{{ medicine.name }}</td>\n                <td>{{ medicine.concentration }}</td>\n                <td>Conjunto de {{ medicine.presentacion }} unidades</td>\n                <td>{{ medicine.dosis }}</td>\n                <td>{{ medicine.frecuencia }} horas</td>\n                <td>{{ medicine.duracion }} días</td>\n              </tr>\n              <tr v-if=\"medicine.details\" :key=\"medicine.idMedicine + '-purchase'\">\n                <td colspan=\"6\">\n                  <div class=\"purchase-info\"\n                       style=\"display: flex;\n                              align-items: flex-start;\n                              gap: 20px;\n                              margin-top: 1rem;\">\n                    <img :src=\"medicine.details.image\"\n                         :alt=\"'Imagen de ' + medicine.name\"\n                         style=\"width: 200px;\n                                height: 200px;\n                                object-fit: cover;\">\n                    <div style=\"display: flex;\n                                flex-direction: column;\n                                gap: 0.5rem;\">\n                      <p><strong>Nombre: {{ medicine.name }}</strong></p>\n                      <p><strong>Principio activo: {{ medicine.activeMedicament }}</strong></p>\n                      <p><strong>Presentación: {{ medicine.presentacion }}</strong></p>\n                      <p>\n                        <strong>Cantidad a comprar: </strong>\n                        <span v-if=\"Math.ceil((medicine.dosis * medicine.duracion) / medicine.details.presentacion) <= medicine.details.stock\">\n                          {{ Math.ceil((medicine.dosis * medicine.duracion) / medicine.details.presentacion) }}\n                        </span>\n                        <span v-else>NO DISPONIBLE</span>\n                      </p>\n                    </div>\n                  </div>\n                </td>\n              </tr>\n            </template>\n          </tbody>\n        </table>\n      </div>\n\n      <div v-if=\"prescription && allMedicinesAvailable\" class=\"complete-purchase-container\" style=\"margin-top: 20px; text-align: center;\">\n        <button @click=\"openModal\" class=\"complete-purchase-button\" style=\"padding: 10px 20px; font-size: 16px;\">Completar compra</button>\n      </div>\n\n      <!-- Modal for credit card details -->\n      <div v-if=\"isModalOpen\" class=\"modal-overlay\" style=\"position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center;\">\n        <div class=\"modal-content\" style=\"background: #fff; padding: 20px; border-radius: 5px; width: 300px; text-align: center;\">\n          <h3>Datos de Tarjeta</h3>\n          <input v-model=\"cardNumber\" placeholder=\"Número de tarjeta\" style=\"width: 100%; padding: 8px; margin: 5px 0;\" />\n          <input v-model=\"cardExpiry\" placeholder=\"MM/AA\" style=\"width: 100%; padding: 8px; margin: 5px 0;\" />\n          <input v-model=\"cardCvv\" placeholder=\"CVV\" style=\"width: 100%; padding: 8px; margin: 5px 0;\" />\n          <button :disabled=\"!isCardValid\" @click=\"completePurchase\" style=\"padding: 8px 16px; margin-top: 10px;\">Comprar</button>\n          <button @click=\"closeModal\" style=\"padding: 8px 16px; margin-top: 10px; margin-left: 10px;\">Cancelar</button>\n        </div>\n      </div>\n    </div>\n    <div v-else>\n      <p>Cargando receta...</p>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, computed } from 'vue';\nimport { useRoute } from 'vue-router';\nimport axios from 'axios';\n\nconst route = useRoute();\nconst prescription = ref(null);\nconst errorMessage = ref('');\nconst ip = process.env.VUE_APP_API_IP || 'localhost';\nconst isModalOpen = ref(false);\nconst cardNumber = ref('');\nconst cardExpiry = ref('');\nconst cardCvv = ref('');\n\nconst isCardValid = computed(() => {\n  return cardNumber.value && cardExpiry.value && cardCvv.value;\n});\n\nconst allMedicinesAvailable = computed(() => {\n  return prescription.value && prescription.value.medicines.every(med => med.details && Math.ceil((med.dosis * med.duracion) / med.details.presentacion) <= med.details.stock);\n});\n\nconst fetchMedicineDetails = async (medicine) => {\n  try {\n    const response = await axios.get(`http://${ip}:8081/api2/medicines/${medicine.idMedicine}`);\n    // Extract only specific fields: name, presentacion, concentration, image, and stock\n    const { name, presentacion, concentration, image, stock } = response.data;\n    medicine.details = { name, presentacion, concentration, image, stock };\n  } catch (error) {\n    console.error(`Error fetching details for medicine id ${medicine.idMedicine}:`, error);\n    medicine.details = null;\n  }\n};\n\nconst fetchPrescription = async () => {\n  try {\n    const prescriptionId = route.params.id;\n    // Fetch all prescription medicines as in Prescriptions.vue\n    const response = await axios.get(`http://${ip}:8081/api2/prescription_medicines`);\n    const allData = response.data;\n    // Filtrar solo las recetas que coinciden con el id de la receta\n    const filtered = allData.filter(p => p.id.prescriptionId == prescriptionId);\n\n    if (filtered.length > 0) {\n      // Agrupar los datos por prescriptionId para consolidar las medicinas\n      const grouped = {};\n      filtered.forEach(p => {\n        const prescId = p.id.prescriptionId;\n        if (!grouped[prescId]) {\n          grouped[prescId] = {\n            ...p, // Copy all properties of p (including idPrescription, approved, hospital, user, etc.)\n            medicines: []\n          };\n        }\n        grouped[prescId].medicines.push({\n          ...p.medicine,\n          dosis: p.dosis,\n          frecuencia: p.frecuencia,\n          duracion: p.duracion\n        });\n      });\n      prescription.value = grouped[prescriptionId];\n\n      if (prescription.value && prescription.value.medicines) {\n        prescription.value.medicines.forEach(med => {\n          fetchMedicineDetails(med);\n        });\n      }\n      console.log(prescription.value)\n    } else {\n      errorMessage.value = 'No se encontró la receta.';\n    }\n  } catch (error) {\n    console.error('Error al obtener la receta:', error);\n    errorMessage.value = 'Error al obtener la receta. Por favor, inténtelo de nuevo.';\n  }\n};\n\nconst openModal = () => {\n  isModalOpen.value = true;\n};\n\nconst closeModal = () => {\n  isModalOpen.value = false;\n};\n\nconst completePurchase = async () => {\n  if (!isCardValid.value) return;\n  try {\n    // Create order with status 'Completado' and user id from prescription\n    const orderResponse = await axios.post(`http://${ip}:8081/api2/orders`, {\n      status: \"Completado\",\n      user: { idUser: prescription.value.user.idUser }\n    });\n    const order = orderResponse.data;\n\n    // For each medicine, calculate quantity and send to order_medicines API\n    for (const med of prescription.value.medicines) {\n      const quantity = Math.ceil((med.dosis * med.duracion) / med.details.presentacion);\n      await axios.post(`http://${ip}:8081/api2/order_medicines`, {\n        orders: order,\n        medicine: { idMedicine: med.idMedicine },\n        quantity: quantity,\n        cost: med.price || 0,\n        total: (med.price || 0) * quantity\n      });\n    }\n\n    closeModal();\n    alert(\"Gracias por tu compra\");\n    window.location.href = \"/\";\n  } catch (error) {\n    console.error(\"Error completing purchase:\", error);\n    alert(\"Error al completar la compra. Intente de nuevo.\");\n  }\n};\n\nonMounted(() => {\n  fetchPrescription();\n});\n</script>\n\n<style scoped>\n.prescription-pay-container {\n  padding: 50px;\n  background-color: #f8f9fa;\n}\n\n.medicine-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 10px;\n}\n\n.medicine-table th, .medicine-table td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: center;\n}\n\n.medicine-table th {\n  background-color: #f4f4f4;\n  font-weight: bold;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}