{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, normalizeStyle as _normalizeStyle, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"admin-dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"dashboard-container\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_4 = {\n  class: \"summary-cards\"\n};\nconst _hoisted_5 = {\n  class: \"summary-card\"\n};\nconst _hoisted_6 = {\n  class: \"card-content\"\n};\nconst _hoisted_7 = {\n  class: \"card-value\"\n};\nconst _hoisted_8 = {\n  class: \"summary-card\"\n};\nconst _hoisted_9 = {\n  class: \"card-content\"\n};\nconst _hoisted_10 = {\n  class: \"card-value\"\n};\nconst _hoisted_11 = {\n  class: \"summary-card\"\n};\nconst _hoisted_12 = {\n  class: \"card-content\"\n};\nconst _hoisted_13 = {\n  class: \"card-value\"\n};\nconst _hoisted_14 = {\n  key: 1,\n  class: \"loading-container\"\n};\nconst _hoisted_15 = {\n  class: \"dashboard-grid\"\n};\nconst _hoisted_16 = {\n  class: \"dashboard-card top-categories\"\n};\nconst _hoisted_17 = {\n  class: \"chart-container\"\n};\nconst _hoisted_18 = {\n  key: 0,\n  class: \"chart-legend\"\n};\nconst _hoisted_19 = {\n  class: \"legend-label\"\n};\nconst _hoisted_20 = {\n  class: \"legend-value\"\n};\nconst _hoisted_21 = {\n  key: 1,\n  class: \"no-data-message\"\n};\nconst _hoisted_22 = {\n  class: \"dashboard-card sales\"\n};\nconst _hoisted_23 = {\n  class: \"chart-container\"\n};\nconst _hoisted_24 = {\n  class: \"sales-summary\"\n};\nconst _hoisted_25 = {\n  class: \"total-amount\"\n};\nconst _hoisted_26 = {\n  class: \"total-amount\"\n};\nconst _hoisted_27 = {\n  class: \"dashboard-card inventory\"\n};\nconst _hoisted_28 = {\n  class: \"chart-container\"\n};\nconst _hoisted_29 = {\n  class: \"inventory-status\"\n};\nconst _hoisted_30 = {\n  class: \"status-label\"\n};\nconst _hoisted_31 = {\n  class: \"status-value\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Header = _resolveComponent(\"Header\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_Header), _createElementVNode(\"div\", _hoisted_2, [_cache[12] || (_cache[12] = _createElementVNode(\"h1\", {\n    class: \"dashboard-title\"\n  }, \"Dashboard Administrativo\", -1 /* HOISTED */)), _createCommentVNode(\" Mensaje de error si hay problemas con las APIs \"), $setup.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _toDisplayString($setup.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Indicadores de resumen \"), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_cache[1] || (_cache[1] = _createElementVNode(\"div\", {\n    class: \"card-icon\"\n  }, \"ðŸ’Š\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_6, [_cache[0] || (_cache[0] = _createElementVNode(\"h3\", {\n    class: \"card-title\"\n  }, \"Total CategorÃ­as\", -1 /* HOISTED */)), _createElementVNode(\"p\", _hoisted_7, _toDisplayString($setup.totalCategories), 1 /* TEXT */)])]), _createElementVNode(\"div\", _hoisted_8, [_cache[3] || (_cache[3] = _createElementVNode(\"div\", {\n    class: \"card-icon\"\n  }, \"ðŸ’°\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_9, [_cache[2] || (_cache[2] = _createElementVNode(\"h3\", {\n    class: \"card-title\"\n  }, \"Ventas Anuales\", -1 /* HOISTED */)), _createElementVNode(\"p\", _hoisted_10, \"Q\" + _toDisplayString($setup.calculateTotalSales().toLocaleString()), 1 /* TEXT */)])]), _createElementVNode(\"div\", _hoisted_11, [_cache[5] || (_cache[5] = _createElementVNode(\"div\", {\n    class: \"card-icon\"\n  }, \"ðŸ“Š\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_12, [_cache[4] || (_cache[4] = _createElementVNode(\"h3\", {\n    class: \"card-title\"\n  }, \"Inventario Total\", -1 /* HOISTED */)), _createElementVNode(\"p\", _hoisted_13, _toDisplayString($setup.totalInventory) + \" unidades\", 1 /* TEXT */)])])]), _createCommentVNode(\" Pantalla de carga \"), $setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, _cache[6] || (_cache[6] = [_createElementVNode(\"div\", {\n    class: \"spinner\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"p\", null, \"Cargando datos del dashboard...\", -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" Contenido principal \"), _createElementVNode(\"div\", _hoisted_15, [_createCommentVNode(\" GrÃ¡fica 1: Top CategorÃ­as \"), _createElementVNode(\"div\", _hoisted_16, [_cache[7] || (_cache[7] = _createElementVNode(\"h2\", {\n    class: \"card-title\"\n  }, \"Top 10 CategorÃ­as de Medicamentos\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_17, [_createVNode($setup[\"Pie\"], {\n    data: $setup.topCategoriesData,\n    options: $setup.categoryOptions,\n    height: 220\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])]), $setup.topCategoriesData.labels.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.topCategoriesData.labels, (value, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"legend-item\"\n    }, [_createElementVNode(\"span\", {\n      class: \"color-box\",\n      style: _normalizeStyle({\n        backgroundColor: $setup.topCategoriesData.datasets[0].backgroundColor[index % 10]\n      })\n    }, null, 4 /* STYLE */), _createElementVNode(\"span\", _hoisted_19, _toDisplayString(value) + \":\", 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_20, _toDisplayString($setup.topCategoriesData.datasets[0].data[index]) + \"%\", 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_21, \" No hay datos de categorÃ­as disponibles \"))]), _createCommentVNode(\" GrÃ¡fica 2: Ventas Mensuales \"), _createElementVNode(\"div\", _hoisted_22, [_cache[10] || (_cache[10] = _createElementVNode(\"h2\", {\n    class: \"card-title\"\n  }, \"Ventas Mensuales\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_23, [_createVNode($setup[\"Bar\"], {\n    data: $setup.monthlySalesData,\n    options: $setup.salesOptions,\n    height: 220\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])]), _createElementVNode(\"div\", _hoisted_24, [_createElementVNode(\"p\", null, [_cache[8] || (_cache[8] = _createTextVNode(\"Total anual: \")), _createElementVNode(\"span\", _hoisted_25, \"Q\" + _toDisplayString($setup.calculateTotalSales().toLocaleString()), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[9] || (_cache[9] = _createTextVNode(\"Promedio mensual: \")), _createElementVNode(\"span\", _hoisted_26, \"Q\" + _toDisplayString(Math.round($setup.calculateTotalSales() / 12).toLocaleString()), 1 /* TEXT */)])])]), _createCommentVNode(\" GrÃ¡fica 3: Estado del Inventario \"), _createElementVNode(\"div\", _hoisted_27, [_cache[11] || (_cache[11] = _createElementVNode(\"h2\", {\n    class: \"card-title\"\n  }, \"Estado del Inventario\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_28, [_createVNode($setup[\"Doughnut\"], {\n    data: $setup.inventoryStatusData,\n    options: $setup.inventoryOptions,\n    height: 180\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])]), _createElementVNode(\"div\", _hoisted_29, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.inventoryStatusData.labels, (label, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([\"status-item\", `status-${label.toLowerCase().replace(' ', '-')}`])\n    }, [_createElementVNode(\"span\", _hoisted_30, _toDisplayString(label) + \":\", 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_31, _toDisplayString($setup.inventoryStatusData.datasets[0].data[index]) + \" productos\", 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createVNode","_component_Header","_createElementVNode","_hoisted_2","_createCommentVNode","$setup","error","_hoisted_3","_toDisplayString","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","totalCategories","_hoisted_8","_hoisted_9","_hoisted_10","calculateTotalSales","toLocaleString","_hoisted_11","_hoisted_12","_hoisted_13","totalInventory","isLoading","_hoisted_14","_cache","_Fragment","_hoisted_15","_hoisted_16","_hoisted_17","data","topCategoriesData","options","categoryOptions","height","labels","length","_hoisted_18","_renderList","value","index","style","_normalizeStyle","backgroundColor","datasets","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","monthlySalesData","salesOptions","_hoisted_24","_createTextVNode","_hoisted_25","_hoisted_26","Math","round","_hoisted_27","_hoisted_28","inventoryStatusData","inventoryOptions","_hoisted_29","label","_normalizeClass","toLowerCase","replace","_hoisted_30","_hoisted_31"],"sources":["/Users/nohelestradap/Documents/VsCode/ensurancePharmacy/pharmacy/src/pages/AdminDash.vue"],"sourcesContent":["<script setup>\nimport { ref, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useUserStore } from '@/stores/userStore';\nimport { Bar, Pie, Doughnut } from 'vue-chartjs';\nimport { Chart, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement, RadialLinearScale } from 'chart.js';\n\nimport axios from 'axios';\n\n// Registrar componentes de Chart.js\nChart.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement, RadialLinearScale);\n\nconst router = useRouter();\nconst userStore = useUserStore();\n\n// Obtener IP del servidor\nconst ip = process.env.VUE_APP_IP || '127.0.0.1';\nconsole.log(\"IP del servidor para API:\", ip);\n\n// Estado para almacenar los datos de las grÃ¡ficas\nconst topCategoriesData = ref({\n  labels: [],\n  datasets: [{\n    backgroundColor: [\n      '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',\n      '#FF9F40', '#C9CBCF', '#7FB800', '#00A6ED', '#F6511D'\n    ],\n    data: []\n  }]\n});\n\nconst monthlySalesData = ref({\n  labels: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],\n  datasets: [{\n    label: 'Ventas Mensuales',\n    backgroundColor: '#4BC0C0',\n    data: []\n  }]\n});\n\nconst inventoryStatusData = ref({\n  labels: ['En exceso', 'Ã“ptimo', 'Bajo', 'CrÃ­tico'],\n  datasets: [{\n    backgroundColor: ['#48bb78', '#4299e1', '#ecc94b', '#f56565'],\n    data: []\n  }]\n});\n\n// EstadÃ­sticas de resumen\nconst totalCategories = ref(0);\nconst totalSales = ref(0);\nconst totalInventory = ref(0);\n\n// Opciones de grÃ¡ficas\nconst categoryOptions = ref({\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    title: {\n      display: true,\n      text: 'Top 10 CategorÃ­as de Medicamentos'\n    },\n    legend: {\n      position: 'right'\n    },\n    tooltip: {\n      callbacks: {\n        label: function(context) {\n          return `${context.label}: ${context.raw}%`;\n        }\n      }\n    }\n  }\n});\n\nconst salesOptions = ref({\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    title: {\n      display: true,\n      text: 'Ventas Mensuales'\n    },\n    legend: {\n      display: false\n    },\n    tooltip: {\n      callbacks: {\n        label: function(context) {\n          return `Q${context.raw.toLocaleString()}`;\n        }\n      }\n    }\n  },\n  scales: {\n    y: {\n      beginAtZero: true,\n      ticks: {\n        callback: function(value) {\n          return 'Q' + value.toLocaleString();\n        }\n      }\n    }\n  }\n});\n\nconst inventoryOptions = ref({\n  responsive: true,\n  maintainAspectRatio: false,\n  cutout: '70%',\n  plugins: {\n    title: {\n      display: true,\n      text: 'Estado del Inventario'\n    },\n    legend: {\n      position: 'bottom'\n    }\n  }\n});\n\n// Variables para estado de carga\nconst isLoading = ref(true);\nconst error = ref(null);\n\n// Comprobar si el usuario es administrador\nconst checkAdminStatus = () => {\n  console.log(\"Verificando si el usuario es administrador\");\n  \n  // MÃ©todo 1: Verificar en el store\n  if (userStore.isAdmin()) {\n    console.log(\"El usuario es admin segÃºn el store\");\n    return true;\n  }\n  \n  // MÃ©todo 2: Verificar directamente en localStorage\n  try {\n    // Verificar en 'role'\n    const storedRole = localStorage.getItem('role');\n    if (storedRole === 'admin') {\n      console.log(\"Usuario es admin segÃºn localStorage.role\");\n      return true;\n    }\n    \n    // Verificar en 'user'\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      const parsedUser = JSON.parse(storedUser);\n      if (parsedUser.role === 'admin') {\n        console.log(\"Usuario es admin segÃºn localStorage.user\");\n        // Actualizar el store por si acaso\n        userStore.setUser(parsedUser);\n        return true;\n      }\n    }\n    \n    // Verificar en 'session'\n    const storedSession = localStorage.getItem('session');\n    if (storedSession) {\n      const parsedSession = JSON.parse(storedSession);\n      if (parsedSession.role === 'admin') {\n        console.log(\"Usuario es admin segÃºn localStorage.session\");\n        // Actualizar el store por si acaso\n        userStore.setUser(parsedSession);\n        return true;\n      }\n    }\n  } catch (e) {\n    console.error(\"Error al verificar admin en localStorage:\", e);\n  }\n  \n  // Si llegamos aquÃ­, no es admin o no hay datos\n  console.log(\"No se encontrÃ³ rol admin. Redirigiendo...\");\n  router.push('/login');\n  setTimeout(() => {\n    alert('Acceso denegado: Solo administradores pueden acceder a este panel');\n  }, 500);\n  return false;\n};\n\n// Obtener datos de medicamentos y procesarlos para las grÃ¡ficas\nconst fetchMedicinesData = async () => {\n  try {\n    console.log(\"Obteniendo datos de medicamentos\");\n    const response = await axios.get(`http://${ip}:8081/api2/medicines`);\n    const medicines = response.data;\n    console.log(\"Datos de medicamentos obtenidos:\", medicines);\n    \n    // Verificar si hay datos\n    if (!medicines || medicines.length === 0) {\n      console.log(\"No hay datos de medicamentos, usando datos de ejemplo\");\n      \n      // Datos de ejemplo\n      const exampleData = [\n        { name: 'AnalgÃ©sicos', value: 320, percentage: 32 },\n        { name: 'AntibiÃ³ticos', value: 245, percentage: 24 },\n        { name: 'Antiinflamatorios', value: 180, percentage: 18 },\n        { name: 'AntihistamÃ­nicos', value: 95, percentage: 9 },\n        { name: 'Antidepresivos', value: 70, percentage: 7 },\n        { name: 'Antihipertensivos', value: 50, percentage: 5 },\n        { name: 'Antigripales', value: 30, percentage: 3 },\n        { name: 'Vitaminas', value: 10, percentage: 1 },\n        { name: 'Suplementos', value: 5, percentage: 0.5 },\n        { name: 'Otros', value: 5, percentage: 0.5 }\n      ];\n      \n      // Actualizar datos de categorÃ­a\n      topCategoriesData.value.labels = exampleData.map(item => item.name);\n      topCategoriesData.value.datasets[0].data = exampleData.map(item => item.percentage);\n      \n      // Datos de ejemplo para inventario\n      inventoryStatusData.value.datasets[0].data = [15, 45, 20, 10];\n      \n      // Actualizar estadÃ­sticas\n      totalCategories.value = exampleData.length;\n      totalInventory.value = 90;\n      \n      return [];\n    }\n    \n    // Procesar datos para categorÃ­as (usando activeMedicament como categorÃ­a)\n    const categories = {};\n    let totalInventoryCount = 0;\n    \n    medicines.forEach(medicine => {\n      const category = medicine.activeMedicament || 'Sin categorÃ­a';\n      if (!categories[category]) {\n        categories[category] = 0;\n      }\n      // Sumar unidades vendidas (o unidades en stock si no hay vendidas)\n      categories[category] += medicine.soldUnits || 1;\n      \n      // Contar inventario total\n      totalInventoryCount += medicine.stock || 0;\n    });\n    \n    // Convertir a array y ordenar por ventas\n    let sortedCategories = Object.entries(categories)\n      .map(([name, value]) => ({ name, value }))\n      .sort((a, b) => b.value - a.value);\n    \n    // Almacenar total de categorÃ­as\n    totalCategories.value = sortedCategories.length;\n    \n    // Tomar solo las 10 primeras\n    sortedCategories = sortedCategories.slice(0, 10);\n    \n    // Calcular porcentajes\n    const totalCategorySales = sortedCategories.reduce((sum, cat) => sum + cat.value, 0);\n    sortedCategories.forEach(cat => {\n      cat.percentage = Math.round((cat.value / totalCategorySales) * 100);\n    });\n    \n    // Actualizar datos de grÃ¡fica de categorÃ­as\n    topCategoriesData.value.labels = sortedCategories.map(cat => cat.name);\n    topCategoriesData.value.datasets[0].data = sortedCategories.map(cat => cat.percentage);\n    \n    // Procesar datos para estado de inventario\n    const inventoryStatus = {\n      'En exceso': 0,\n      'Ã“ptimo': 0,\n      'Bajo': 0,\n      'CrÃ­tico': 0\n    };\n    \n    medicines.forEach(medicine => {\n      const stock = medicine.stock || 0;\n      if (stock > 50) {\n        inventoryStatus['En exceso']++;\n      } else if (stock > 20) {\n        inventoryStatus['Ã“ptimo']++;\n      } else if (stock > 5) {\n        inventoryStatus['Bajo']++;\n      } else {\n        inventoryStatus['CrÃ­tico']++;\n      }\n    });\n    \n    // Actualizar datos de grÃ¡fica de inventario\n    inventoryStatusData.value.datasets[0].data = [\n      inventoryStatus['En exceso'],\n      inventoryStatus['Ã“ptimo'],\n      inventoryStatus['Bajo'],\n      inventoryStatus['CrÃ­tico']\n    ];\n    \n    // Actualizar conteo total de inventario\n    totalInventory.value = totalInventoryCount;\n    \n    return medicines;\n  } catch (error) {\n    console.error(\"Error al obtener datos de medicamentos:\", error);\n    \n    // Datos de ejemplo en caso de error\n    const exampleData = [\n      { name: 'AnalgÃ©sicos', value: 320, percentage: 32 },\n      { name: 'AntibiÃ³ticos', value: 245, percentage: 24 },\n      { name: 'Antiinflamatorios', value: 180, percentage: 18 },\n      { name: 'AntihistamÃ­nicos', value: 95, percentage: 9 },\n      { name: 'Antidepresivos', value: 70, percentage: 7 },\n      { name: 'Antihipertensivos', value: 50, percentage: 5 },\n      { name: 'Antigripales', value: 30, percentage: 3 },\n      { name: 'Vitaminas', value: 10, percentage: 1 },\n      { name: 'Suplementos', value: 5, percentage: 0.5 },\n      { name: 'Otros', value: 5, percentage: 0.5 }\n    ];\n    \n    // Actualizar datos\n    topCategoriesData.value.labels = exampleData.map(item => item.name);\n    topCategoriesData.value.datasets[0].data = exampleData.map(item => item.percentage);\n    inventoryStatusData.value.datasets[0].data = [15, 45, 20, 10];\n    totalCategories.value = exampleData.length;\n    totalInventory.value = 90;\n    \n    throw error;\n  }\n};\n\n// Obtener datos de transacciones/ventas\nconst fetchTransactionsData = async () => {\n  try {\n    console.log(\"Obteniendo datos de transacciones/facturas\");\n    // Primero intentamos con la API de transacciones\n    let transactions = [];\n    try {\n      const response = await axios.get(`http://${ip}:8081/api2/transactions`);\n      transactions = response.data;\n      console.log(\"Datos de transacciones obtenidos:\", transactions);\n    } catch (e) {\n      console.log(\"Error al obtener transacciones, intentando con bills:\", e);\n      // Si falla, intentamos con la API de facturas\n      const response = await axios.get(`http://${ip}:8081/api2/bills`);\n      transactions = response.data;\n      console.log(\"Datos de facturas obtenidos:\", transactions);\n    }\n    \n    // Inicializar datos de ventas mensuales\n    const monthlySales = Array(12).fill(0);\n    \n    // Procesar transacciones por mes\n    transactions.forEach(transaction => {\n      // Verificar si el campo fecha existe\n      const dateField = transaction.transDate || transaction.billDate || null;\n      if (dateField) {\n        const date = new Date(dateField);\n        const month = date.getMonth();\n        // Sumar el total de la transacciÃ³n\n        monthlySales[month] += transaction.total || 0;\n      }\n    });\n    \n    // Si no hay datos, usar datos de ejemplo\n    if (monthlySales.every(value => value === 0)) {\n      console.log(\"No hay datos reales de ventas, usando datos de ejemplo\");\n      for (let i = 0; i < 12; i++) {\n        monthlySales[i] = Math.floor(Math.random() * 10000) + 5000;\n      }\n    }\n    \n    // Actualizar datos de grÃ¡fica de ventas\n    monthlySalesData.value.datasets[0].data = monthlySales;\n    \n    // Calcular total de ventas\n    totalSales.value = monthlySales.reduce((sum, value) => sum + value, 0);\n    \n    return transactions;\n  } catch (error) {\n    console.error(\"Error al obtener datos de transacciones:\", error);\n    // Si no hay datos, generar datos de ejemplo\n    const monthlySales = [];\n    for (let i = 0; i < 12; i++) {\n      monthlySales.push(Math.floor(Math.random() * 10000) + 5000);\n    }\n    monthlySalesData.value.datasets[0].data = monthlySales;\n    totalSales.value = monthlySales.reduce((sum, value) => sum + value, 0);\n    \n    throw error;\n  }\n};\n\n// Calcular el total de ventas\nconst calculateTotalSales = () => {\n  return totalSales.value;\n};\n\n// Cargar todos los datos\nconst loadAllData = async () => {\n  isLoading.value = true;\n  error.value = null;\n  \n  try {\n    await Promise.all([\n      fetchMedicinesData(),\n      fetchTransactionsData()\n    ]);\n  } catch (err) {\n    console.error(\"Error al cargar datos:\", err);\n    error.value = \"No se pudieron cargar algunos datos. Se muestran datos parciales o de ejemplo.\";\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Ejecutar al montar el componente\nonMounted(async () => {\n  if (checkAdminStatus()) {\n    await loadAllData();\n  }\n});\n</script>\n\n<template>\n  <div class=\"admin-dashboard\">\n    <Header />\n    \n    <div class=\"dashboard-container\">\n      <h1 class=\"dashboard-title\">Dashboard Administrativo</h1>\n      \n      <!-- Mensaje de error si hay problemas con las APIs -->\n      <div v-if=\"error\" class=\"error-message\">\n        {{ error }}\n      </div>\n      \n      <!-- Indicadores de resumen -->\n      <div class=\"summary-cards\">\n        <div class=\"summary-card\">\n          <div class=\"card-icon\">ðŸ’Š</div>\n          <div class=\"card-content\">\n            <h3 class=\"card-title\">Total CategorÃ­as</h3>\n            <p class=\"card-value\">{{ totalCategories }}</p>\n          </div>\n        </div>\n        \n        <div class=\"summary-card\">\n          <div class=\"card-icon\">ðŸ’°</div>\n          <div class=\"card-content\">\n            <h3 class=\"card-title\">Ventas Anuales</h3>\n            <p class=\"card-value\">Q{{ calculateTotalSales().toLocaleString() }}</p>\n          </div>\n        </div>\n        \n        <div class=\"summary-card\">\n          <div class=\"card-icon\">ðŸ“Š</div>\n          <div class=\"card-content\">\n            <h3 class=\"card-title\">Inventario Total</h3>\n            <p class=\"card-value\">{{ totalInventory }} unidades</p>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Pantalla de carga -->\n      <div v-if=\"isLoading\" class=\"loading-container\">\n        <div class=\"spinner\"></div>\n        <p>Cargando datos del dashboard...</p>\n      </div>\n      \n      <!-- Contenido principal -->\n      <div v-else class=\"dashboard-grid\">\n        <!-- GrÃ¡fica 1: Top CategorÃ­as -->\n        <div class=\"dashboard-card top-categories\">\n          <h2 class=\"card-title\">Top 10 CategorÃ­as de Medicamentos</h2>\n          <div class=\"chart-container\">\n            <Pie \n              :data=\"topCategoriesData\" \n              :options=\"categoryOptions\" \n              :height=\"220\"\n            />\n          </div>\n          <div v-if=\"topCategoriesData.labels.length > 0\" class=\"chart-legend\">\n            <div v-for=\"(value, index) in topCategoriesData.labels\" :key=\"index\" class=\"legend-item\">\n              <span class=\"color-box\" :style=\"{backgroundColor: topCategoriesData.datasets[0].backgroundColor[index % 10]}\"></span>\n              <span class=\"legend-label\">{{ value }}:</span>\n              <span class=\"legend-value\">{{ topCategoriesData.datasets[0].data[index] }}%</span>\n            </div>\n          </div>\n          <div v-else class=\"no-data-message\">\n            No hay datos de categorÃ­as disponibles\n          </div>\n        </div>\n        \n        <!-- GrÃ¡fica 2: Ventas Mensuales -->\n        <div class=\"dashboard-card sales\">\n          <h2 class=\"card-title\">Ventas Mensuales</h2>\n          <div class=\"chart-container\">\n            <Bar \n              :data=\"monthlySalesData\" \n              :options=\"salesOptions\" \n              :height=\"220\"\n            />\n          </div>\n          <div class=\"sales-summary\">\n            <p>Total anual: <span class=\"total-amount\">Q{{ calculateTotalSales().toLocaleString() }}</span></p>\n            <p>Promedio mensual: <span class=\"total-amount\">Q{{ Math.round(calculateTotalSales() / 12).toLocaleString() }}</span></p>\n          </div>\n        </div>\n        \n        <!-- GrÃ¡fica 3: Estado del Inventario -->\n        <div class=\"dashboard-card inventory\">\n          <h2 class=\"card-title\">Estado del Inventario</h2>\n          <div class=\"chart-container\">\n            <Doughnut \n              :data=\"inventoryStatusData\" \n              :options=\"inventoryOptions\" \n              :height=\"180\"\n            />\n          </div>\n          <div class=\"inventory-status\">\n            <div v-for=\"(label, index) in inventoryStatusData.labels\" :key=\"index\" class=\"status-item\" :class=\"`status-${label.toLowerCase().replace(' ', '-')}`\">\n              <span class=\"status-label\">{{ label }}:</span>\n              <span class=\"status-value\">{{ inventoryStatusData.datasets[0].data[index] }} productos</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.admin-dashboard {\n  background-color: #f8f9fa;\n  min-height: 100vh;\n}\n\n.dashboard-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n}\n\n.dashboard-title {\n  color: #1e40af;\n  font-size: 2rem;\n  font-weight: bold;\n  margin-bottom: 2rem;\n  text-align: center;\n}\n\n.error-message {\n  background-color: #fecaca;\n  color: #b91c1c;\n  padding: 1rem;\n  border-radius: 0.5rem;\n  margin-bottom: 1.5rem;\n  text-align: center;\n}\n\n.summary-cards {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1.5rem;\n  margin-bottom: 2rem;\n}\n\n.summary-card {\n  background-color: white;\n  border-radius: 0.5rem;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 1.5rem;\n  display: flex;\n  align-items: center;\n  transition: transform 0.2s;\n}\n\n.summary-card:hover {\n  transform: translateY(-5px);\n}\n\n.card-icon {\n  font-size: 2rem;\n  margin-right: 1rem;\n}\n\n.card-title {\n  color: #4a5568;\n  font-size: 0.9rem;\n  margin-bottom: 0.5rem;\n}\n\n.card-value {\n  color: #1e40af;\n  font-size: 1.5rem;\n  font-weight: bold;\n  margin: 0;\n}\n\n.dashboard-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n  gap: 2rem;\n}\n\n.dashboard-card {\n  background-color: white;\n  border-radius: 0.5rem;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 1.5rem;\n  transition: transform 0.2s;\n  overflow: hidden;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-5px);\n}\n\n.card-title {\n  color: #1e40af;\n  font-size: 1.25rem;\n  font-weight: bold;\n  margin-bottom: 1rem;\n}\n\n.chart-container {\n  height: 220px;\n  position: relative;\n  margin-bottom: 1rem;\n}\n\n.no-data-message {\n  text-align: center;\n  color: #718096;\n  padding: 1rem;\n  background-color: #f7fafc;\n  border-radius: 0.25rem;\n}\n\n/* Leyenda para categorÃ­as */\n.chart-legend {\n  margin-top: 1rem;\n  max-height: 150px;\n  overflow-y: auto;\n  border-top: 1px solid #e2e8f0;\n  padding-top: 0.5rem;\n}\n\n.legend-item {\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n}\n\n.color-box {\n  width: 12px;\n  height: 12px;\n  border-radius: 2px;\n  margin-right: 0.5rem;\n}\n\n.legend-label {\n  flex: 1;\n  font-size: 0.85rem;\n}\n\n.legend-value {\n  font-weight: bold;\n  color: #1e40af;\n}\n\n/* Resumen de ventas */\n.sales-summary {\n  margin-top: 1rem;\n  text-align: right;\n  padding: 0.5rem;\n  background-color: #f8f9fa;\n  border-radius: 0.25rem;\n}\n\n.total-amount {\n  font-weight: bold;\n  color: #1e40af;\n}\n\n/* Estado de inventario */\n.inventory-status {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 0.5rem;\n  margin-top: 1rem;\n}\n\n.status-item {\n  background-color: #f8f9fa;\n  padding: 0.5rem;\n  border-radius: 0.25rem;\n  display: flex;\n  flex-direction: column;\n  font-size: 0.85rem;\n}\n\n.status-label {\n  font-weight: 500;\n}\n\n.status-value {\n  font-weight: bold;\n}\n\n.status-en-exceso {\n  border-left: 3px solid #48bb78;\n  background-color: rgba(198, 246, 213, 0.3);\n}\n\n.status-Ã³ptimo {\n  border-left: 3px solid #4299e1;\n  background-color: rgba(190, 227, 248, 0.3);\n}\n\n.status-bajo {\n  border-left: 3px solid #ecc94b;\n  background-color: rgba(254, 252, 191, 0.3);\n}\n\n.status-crÃ­tico {\n  border-left: 3px solid #f56565;\n  background-color: rgba(254, 215, 215, 0.3);\n}\n\n/* Pantalla de carga */\n.loading-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 4rem;\n}\n\n.spinner {\n  border: 4px solid rgba(0, 0, 0, 0.1);\n  border-left-color: #1e40af;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 1rem;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n  .dashboard-container {\n    padding: 1rem;\n  }\n  \n  .dashboard-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .summary-cards {\n    grid-template-columns: 1fr;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}