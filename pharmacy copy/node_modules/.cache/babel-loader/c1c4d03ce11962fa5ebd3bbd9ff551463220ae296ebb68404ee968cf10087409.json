{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport Comentarios from '@/components/Comentarios.vue';\nimport axios from \"axios\";\nimport { useUserStore } from '@/stores/userStore';\nconst ip = process.env.VUE_APP_IP;\nexport default {\n  name: \"ProductoDetalle\",\n  components: {\n    Comentarios\n  },\n  // Se recibe el id del producto vía props (asegúrate de que el router lo pase correctamente)\n  props: [\"id\"],\n  data() {\n    return {\n      product: null,\n      quantity: 1,\n      productComments: [{\n        idComments: 1,\n        user: {\n          name: 'Juan'\n        },\n        commentText: '¡Muy buen producto!'\n      }, {\n        idComments: 2,\n        user: {\n          name: 'Maria'\n        },\n        commentText: 'Me ayudó mucho, gracias!'\n      }]\n    };\n  },\n  mounted() {\n    const routeId = this.$route.params.id;\n    axios.get(`http://${ip}:8081/api2/medicines`).then(response => {\n      const products = response.data;\n      console.log(this.$route.params.id);\n      this.product = products.find(prod => prod.idMedicine === Number(routeId));\n    }).catch(error => {\n      console.error('Error fetching medicines:', error);\n    });\n  },\n  methods: {\n    purchaseProduct() {\n      const userStore = useUserStore();\n      const userId = userStore.user.idUser;\n\n      // Obtener todas las órdenes para el usuario\n      axios.get(`http://${ip}:8081/api2/orders?userId=${userId}`).then(response => {\n        console.log('Response from orders GET:', response.data);\n        const orders = response.data;\n        const orderInProgress = orders.find(order => order.status === 'En progreso');\n        if (orderInProgress) {\n          console.log('Found order in progress:', orderInProgress);\n          return orderInProgress;\n        } else {\n          return axios.post(`http://${ip}:8081/api2/orders`, {\n            user: {\n              idUser: userId\n            },\n            status: 'En progreso'\n          }).then(response => {\n            console.log('Response from orders POST:', response.data);\n            return response.data;\n          });\n        }\n      }).then(order => {\n        console.log('ORDEN:', order);\n        return axios.get(`http://${ip}:8081/api2/order_medicines?id=${order.idOrder}%2C${this.product.idMedicine}`).then(response => {\n          let orderMedicines = response.data;\n          if (!Array.isArray(orderMedicines)) {\n            orderMedicines = orderMedicines ? [orderMedicines] : [];\n          }\n          const existing = orderMedicines.find(om => om.medicine.idMedicine === this.product.idMedicine);\n          if (existing) {\n            return axios.put(`http://${ip}:8081/api2/order_medicines/${existing.id}`, {\n              orders: order,\n              medicine: {\n                idMedicine: this.product.idMedicine\n              },\n              quantity: this.quantity,\n              cost: this.product.price,\n              total: this.product.price * this.quantity\n            });\n          } else {\n            return axios.post(`http://${ip}:8081/api2/order_medicines`, {\n              orders: order,\n              medicine: {\n                idMedicine: this.product.idMedicine\n              },\n              quantity: this.quantity,\n              cost: this.product.price,\n              total: this.product.price * this.quantity\n            });\n          }\n        });\n      }).then(response => {\n        console.log('Orden y medicamento añadidos o actualizados:', response.data);\n      }).catch(error => {\n        console.error('Error en el proceso de la orden:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["Comentarios","axios","useUserStore","ip","process","env","VUE_APP_IP","name","components","props","data","product","quantity","productComments","idComments","user","commentText","mounted","routeId","$route","params","id","get","then","response","products","console","log","find","prod","idMedicine","Number","catch","error","methods","purchaseProduct","userStore","userId","idUser","orders","orderInProgress","order","status","post","idOrder","orderMedicines","Array","isArray","existing","om","medicine","put","cost","price","total"],"sources":["/Users/nohelestradap/Documents/VsCode/ensurancePharmacy/pharmacy/src/pages/ProductoDetalle.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n    <div>\n      <h1>Detalle del Producto</h1>\n\n      <!-- Si el producto existe, mostramos su información -->\n      <div v-if=\"product\">\n        <div class=\"product-container\" style=\"display: flex;\">\n          <div class=\"product-details\" style=\"flex: 1;\">\n            <h2>{{ product.name }}</h2>\n            <img\n              v-if=\"product.images && product.images.length\"\n              :src=\"product.images[0]\"\n              alt=\"Imagen principal del producto\"\n              style=\"width: 200px; border-radius: 8px;\"\n            />\n            <p><strong>Precio:</strong> Q{{ product.price }}</p>\n            <p><strong>Descripción:</strong> {{ product.description }}</p>\n            <p><strong>Inventario:</strong> {{ product.stock }} unidades</p>\n            <p><strong>Ingrediente Activo:</strong> {{ product.activeMedicament }}</p>\n            <p><strong>Descripción:</strong> {{ product.description }}</p>\n            <p><strong>Concentración:</strong> {{ product.concentration }}</p>\n            <p><strong>Presentación:</strong> {{ product.presentacion }}</p>\n            <p><strong>Marca:</strong> {{ product.brand }}</p>\n          </div>\n          <div class=\"purchase-section\" style=\"margin-left: 20px;\">\n            <label for=\"quantity\">Cantidad:</label>\n            <input\n              type=\"number\"\n              id=\"quantity\"\n              v-model.number=\"quantity\"\n              :min=\"1\"\n              :max=\"product.stock\"\n              style=\"width: 60px; margin-left: 10px;\"\n            />\n            <button\n              @click=\"purchaseProduct\"\n              :disabled=\"!quantity || quantity < 1 || quantity > product.stock\"\n              style=\"margin-left: 10px;\"\n            >\n              Comprar\n            </button>\n          </div>\n        </div>\n        <Comentarios :initialComments=\"productComments\" />\n      </div>\n      <!-- Si no existe el producto, mostramos un mensaje de error -->\n      <div v-else>\n        <p>Producto no encontrado.</p>\n      </div>\n    </div>\n  </template>\n\n  <script>\n  import Comentarios from '@/components/Comentarios.vue';\n  import axios from \"axios\";\n  import { useUserStore } from '@/stores/userStore';\n\n\n  const ip = process.env.VUE_APP_IP;\n\n  export default {\n    name: \"ProductoDetalle\",\n    components: {\n      Comentarios\n    },\n    // Se recibe el id del producto vía props (asegúrate de que el router lo pase correctamente)\n    props: [\"id\"],\n    data() {\n      return {\n        product: null,\n        quantity: 1,\n        productComments: [\n          { idComments: 1, user: { name: 'Juan' }, commentText: '¡Muy buen producto!' },\n          { idComments: 2, user: { name: 'Maria' }, commentText: 'Me ayudó mucho, gracias!' }\n        ]\n      };\n    },\n    mounted() {\n      const routeId = this.$route.params.id;\n      axios.get(`http://${ip}:8081/api2/medicines`)\n          .then(response => {\n            const products = response.data;\n            console.log(this.$route.params.id);\n            this.product = products.find(prod => prod.idMedicine === Number(routeId));\n          })\n          .catch(error => {\n            console.error('Error fetching medicines:', error);\n          });\n    },\n    methods: {\n      purchaseProduct() {\n        const userStore = useUserStore();\n        const userId = userStore.user.idUser;\n\n        // Obtener todas las órdenes para el usuario\n        axios.get(`http://${ip}:8081/api2/orders?userId=${userId}`)\n          .then(response => {\n            console.log('Response from orders GET:', response.data);\n            const orders = response.data;\n            const orderInProgress = orders.find(order => order.status === 'En progreso');\n            if (orderInProgress) {\n              console.log('Found order in progress:', orderInProgress);\n              return orderInProgress;\n            } else {\n              return axios.post(`http://${ip}:8081/api2/orders`, {\n                user: { idUser: userId },\n                status: 'En progreso'\n              }).then(response => {\n                console.log('Response from orders POST:', response.data);\n                return response.data;\n              });\n            }\n          })\n          .then(order => {\n            console.log('ORDEN:', order);\n              return axios.get(`http://${ip}:8081/api2/order_medicines?id=${order.idOrder}%2C${this.product.idMedicine}`)\n              .then(response => {\n                let orderMedicines = response.data;\n               if (!Array.isArray(orderMedicines)) {\n                  orderMedicines = orderMedicines ? [orderMedicines] : [];\n                }\n                const existing = orderMedicines.find(om => om.medicine.idMedicine === this.product.idMedicine);\n                if (existing) {\n                  return axios.put(`http://${ip}:8081/api2/order_medicines/${existing.id}`, {\n                    orders: order,\n                    medicine: { idMedicine: this.product.idMedicine },\n                    quantity: this.quantity,\n                    cost: this.product.price,\n                    total: this.product.price * this.quantity\n                  });\n                } else {\n                  return axios.post(`http://${ip}:8081/api2/order_medicines`, {\n                    orders: order,\n                    medicine: { idMedicine: this.product.idMedicine },\n                    quantity: this.quantity,\n                    cost: this.product.price,\n                    total: this.product.price * this.quantity\n                  });\n                }\n              });\n          })\n          .then(response => {\n            console.log('Orden y medicamento añadidos o actualizados:', response.data);\n          })\n          .catch(error => {\n            console.error('Error en el proceso de la orden:', error);\n          });\n      }\n    }\n  };\n  </script>\n\n  <style scoped>\n  /* Estilos opcionales */\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}