{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { useUserStore } from \"@/stores/userStore\";\nimport CommentItem from './CommentItem.vue';\nconst ip = process.env.VUE_APP_IP;\nexport default {\n  name: 'ProductComments',\n  components: {\n    CommentItem\n  },\n  props: {\n    initialComments: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup(props) {\n    const userStore = useUserStore();\n    const route = useRoute();\n    const routeId = route.params.id;\n    const comments = ref(props.initialComments);\n    const newCommentText = ref('');\n    const replyComment = ref(null);\n    onMounted(async () => {\n      try {\n        console.log(ip);\n        const res = await fetch(`http://${ip}:8081/api2/comments`);\n        if (res.ok) {\n          const data = await res.json();\n          console.log('Comentarios obtenidos:', data);\n          comments.value = data;\n        }\n      } catch (error) {\n        console.error('Error al obtener comentarios', error);\n      }\n    });\n    const topLevelComments = computed(() => {\n      const filtered = comments.value.filter(c => !c.prevComment);\n      console.log('Top level comments sin filtro:', filtered);\n      return filtered;\n    });\n    const addComment = async () => {\n      if (newCommentText.value) {\n        const payload = {\n          user: userStore.user,\n          prevComment: replyComment.value,\n          commentText: newCommentText.value,\n          medicine: {\n            idMedicine: routeId\n          }\n        };\n        try {\n          const res = await fetch(`http://${ip}:8081/api2/comments`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n          });\n          if (res.ok) {\n            const newComment = await res.json();\n            comments.value.push(newComment);\n            newCommentText.value = '';\n            replyComment.value = null;\n          } else {\n            console.error('Error al crear comentario');\n          }\n        } catch (error) {\n          console.error('Error en la petición POST', error);\n        }\n      }\n    };\n    const setReply = comment => {\n      replyComment.value = comment;\n    };\n    const cancelReply = () => {\n      replyComment.value = null;\n    };\n    return {\n      comments,\n      topLevelComments,\n      newCommentText,\n      addComment,\n      replyComment,\n      setReply,\n      cancelReply\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useRoute","useUserStore","CommentItem","ip","process","env","VUE_APP_IP","name","components","props","initialComments","type","Array","default","setup","userStore","route","routeId","params","id","comments","newCommentText","replyComment","console","log","res","fetch","ok","data","json","value","error","topLevelComments","filtered","filter","c","prevComment","addComment","payload","user","commentText","medicine","idMedicine","method","headers","body","JSON","stringify","newComment","push","setReply","comment","cancelReply"],"sources":["/Users/nohelestradap/Documents/VsCode/ensurancePharmacy/pharmacy/src/components/Comentarios.vue"],"sourcesContent":["<template>\n  <div class=\"comments-container\">\n    <h3>Comentarios</h3>\n    <div v-if=\"replyComment\" class=\"reply-info\">\n      Respondiendo a {{ replyComment.user.name }}\n      <button @click=\"cancelReply\">Cancelar Respuesta</button>\n    </div>\n    <div v-if=\"comments.length\">\n      <CommentItem\n          v-for=\"comment in topLevelComments\"\n          :key=\"comment.idComments\"\n          :comment=\"comment\"\n          :all-comments=\"comments\"\n          @reply=\"setReply\"\n      />\n    </div>\n    <div v-else>\n      <p>No hay comentarios aún.</p>\n    </div>\n    <div class=\"add-comment\">\n      <input v-model=\"newCommentText\" placeholder=\"Escribe un comentario...\" />\n      <button @click=\"addComment\">Agregar Comentario</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { useUserStore } from \"@/stores/userStore\";\nimport CommentItem from './CommentItem.vue';\n\nconst ip = process.env.VUE_APP_IP;\n\nexport default {\n  name: 'ProductComments',\n  components: { CommentItem },\n  props: {\n    initialComments: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup(props) {\n    const userStore = useUserStore();\n    const route = useRoute();\n    const routeId = route.params.id;\n    const comments = ref(props.initialComments);\n    const newCommentText = ref('');\n    const replyComment = ref(null);\n\n    onMounted(async () => {\n      try {\n        console.log(ip);\n        const res = await fetch(`http://${ip}:8081/api2/comments`);\n        if (res.ok) {\n          const data = await res.json();\n          console.log('Comentarios obtenidos:', data);\n          comments.value = data;\n        }\n      } catch (error) {\n        console.error('Error al obtener comentarios', error);\n      }\n    });\n\n    const topLevelComments = computed(() => {\n      const filtered = comments.value.filter(c => !c.prevComment);\n      console.log('Top level comments sin filtro:', filtered);\n      return filtered;\n    });\n\n    const addComment = async () => {\n      if(newCommentText.value) {\n        const payload = {\n          user: userStore.user,\n          prevComment: replyComment.value,\n          commentText: newCommentText.value,\n          medicine: { idMedicine: routeId }\n        };\n        try {\n          const res = await fetch(`http://${ip}:8081/api2/comments`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload)\n          });\n          if(res.ok) {\n            const newComment = await res.json();\n            comments.value.push(newComment);\n            newCommentText.value = '';\n            replyComment.value = null;\n          } else {\n            console.error('Error al crear comentario');\n          }\n        } catch(error) {\n          console.error('Error en la petición POST', error);\n        }\n      }\n    };\n\n    const setReply = (comment) => {\n      replyComment.value = comment;\n    };\n\n    const cancelReply = () => {\n      replyComment.value = null;\n    };\n\n    return {\n      comments,\n      topLevelComments,\n      newCommentText,\n      addComment,\n      replyComment,\n      setReply,\n      cancelReply\n    };\n  }\n};\n</script>\n\n<style scoped>\n.comments-container {\n  margin-top: 20px;\n}\n\n.reply-info {\n  background: #eef;\n  padding: 5px 10px;\n  border-radius: 5px;\n  margin-bottom: 10px;\n}\n\n.add-comment {\n  margin-top: 20px;\n}\n\n.add-comment input,\n.add-comment textarea {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n\n.add-comment button {\n  padding: 10px 15px;\n  background: #1e40af;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.add-comment button:hover {\n  background: #1e3a8a;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}