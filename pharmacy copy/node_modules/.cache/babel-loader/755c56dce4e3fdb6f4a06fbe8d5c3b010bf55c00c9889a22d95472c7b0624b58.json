{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport axios from 'axios';\nimport { useUserStore } from '@/stores/userStore';\nexport default {\n  __name: 'Cart',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const userStore = useUserStore();\n    const ip = process.env.VUE_APP_API_IP || 'localhost';\n    const currentOrder = ref(null);\n    const cartItems = ref([]);\n\n    // Buscar la orden en progreso para el usuario actual\n    const fetchCurrentOrder = async () => {\n      try {\n        const ordersResponse = await axios.get(`http://${ip}:8081/api2/orders`);\n        const orders = ordersResponse.data;\n        const userId = userStore.getUser().idUser;\n        const inProgressOrder = orders.find(o => o.user.idUser === userId && o.status === 'En progreso');\n        currentOrder.value = inProgressOrder || null;\n      } catch (error) {\n        console.error('Error fetching current order:', error);\n      }\n    };\n\n    // Obtener los ítems (OrderMedicine) de la orden en progreso\n    const fetchCartItems = async orderId => {\n      try {\n        const response = await axios.get(`http://${ip}:8081/api2/order_medicines`);\n        const allItems = response.data;\n        // Filtrar solo los ítems que corresponden a la orden en progreso\n        cartItems.value = allItems.filter(item => item.orders.idOrder === orderId);\n      } catch (error) {\n        console.error('Error fetching cart items:', error);\n      }\n    };\n\n    // Eliminar un ítem del carrito (se elimina directamente de la DB)\n    const removeItem = async item => {\n      try {\n        const orderId = item.orders.idOrder;\n        const medicineId = item.medicine.idMedicine;\n        await axios.delete(`http://${ip}:8081/api2/order_medicines?id=${orderId},${medicineId}`);\n        // Actualizar la lista local eliminando el ítem borrado\n        cartItems.value = cartItems.value.filter(i => i.medicine.idMedicine !== medicineId);\n      } catch (error) {\n        console.error('Error removing item from cart:', error);\n      }\n    };\n\n    // Referencias y funciones para completar la compra\n    const isModalOpen = ref(false);\n    const cardNumber = ref('');\n    const cardExpiry = ref('');\n    const cardCvv = ref('');\n    const handleExpiryInput = () => {\n      let val = cardExpiry.value.replace(/[^0-9]/g, '');\n      if (val.length > 2) {\n        cardExpiry.value = val.slice(0, 2) + '/' + val.slice(2, 4);\n      } else {\n        cardExpiry.value = val;\n      }\n    };\n    const isCardValid = computed(() => {\n      return cardNumber.value && cardExpiry.value && cardCvv.value;\n    });\n    const openModal = () => {\n      isModalOpen.value = true;\n    };\n    const closeModal = () => {\n      isModalOpen.value = false;\n    };\n    const completePurchase = async () => {\n      if (!isCardValid.value) return;\n      try {\n        // Se asume que currentOrder es la orden en progreso\n        const order = currentOrder.value;\n        if (!order) return;\n\n        // Crear la orden con estado 'Completado'\n        const orderResponse = await axios.post(`http://${ip}:8081/api2/orders`, {\n          status: 'Completado',\n          user: {\n            idUser: userStore.getUser().idUser\n          }\n        });\n        const newOrder = orderResponse.data;\n\n        // Para cada ítem del carrito, se registra en order_medicines\n        for (const item of cartItems.value) {\n          await axios.post(`http://${ip}:8081/api2/order_medicines`, {\n            orders: newOrder,\n            medicine: {\n              idMedicine: item.medicine.idMedicine\n            },\n            quantity: item.quantity,\n            cost: item.cost,\n            total: item.total\n          });\n        }\n        closeModal();\n        alert('Gracias por tu compra');\n        window.location.href = '/';\n      } catch (error) {\n        console.error('Error completing purchase:', error);\n        alert('Error al completar la compra. Intente de nuevo.');\n      }\n    };\n    onMounted(async () => {\n      await fetchCurrentOrder();\n      if (currentOrder.value) {\n        await fetchCartItems(currentOrder.value.idOrder);\n      }\n    });\n    const __returned__ = {\n      userStore,\n      ip,\n      currentOrder,\n      cartItems,\n      fetchCurrentOrder,\n      fetchCartItems,\n      removeItem,\n      isModalOpen,\n      cardNumber,\n      cardExpiry,\n      cardCvv,\n      handleExpiryInput,\n      isCardValid,\n      openModal,\n      closeModal,\n      completePurchase,\n      ref,\n      onMounted,\n      computed,\n      get axios() {\n        return axios;\n      },\n      get useUserStore() {\n        return useUserStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","axios","useUserStore","userStore","ip","process","env","VUE_APP_API_IP","currentOrder","cartItems","fetchCurrentOrder","ordersResponse","get","orders","data","userId","getUser","idUser","inProgressOrder","find","o","user","status","value","error","console","fetchCartItems","orderId","response","allItems","filter","item","idOrder","removeItem","medicineId","medicine","idMedicine","delete","i","isModalOpen","cardNumber","cardExpiry","cardCvv","handleExpiryInput","val","replace","length","slice","isCardValid","openModal","closeModal","completePurchase","order","orderResponse","post","newOrder","quantity","cost","total","alert","window","location","href"],"sources":["/Users/nohelestradap/Documents/VsCode/ensurancePharmacy/pharmacy/src/components/Cart.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n  <div class=\"cart-container\">\n    <h1>Carrito de Compras</h1>\n\n    <!-- Si no existe una orden en progreso -->\n    <div v-if=\"!currentOrder\">\n      <p>No tienes una orden en progreso.</p>\n    </div>\n\n    <!-- Si existe una orden en progreso, se muestran los ítems -->\n    <div v-else>\n      <table>\n        <thead>\n        <tr>\n          <th>Medicamento</th>\n          <th>Cantidad</th>\n          <th>Costo Unitario</th>\n          <th>Total</th>\n          <th>Eliminar</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr v-for=\"item in cartItems\" :key=\"item.medicine.idMedicine\">\n          <td>{{ item.medicine.name }}</td>\n          <td>{{ item.quantity }}</td>\n          <td>{{ item.cost }}</td>\n          <td>{{ item.total }}</td>\n          <td>\n            <button @click=\"removeItem(item)\">X</button>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n      <button @click=\"openModal\">Completar compra</button>\n\n      <div v-if=\"isModalOpen\" class=\"modal\">\n        <div class=\"modal-content\">\n          <h2>Completar compra</h2>\n          <input v-model=\"cardNumber\" placeholder=\"Número de tarjeta\" />\n          <input v-model=\"cardExpiry\" @input=\"handleExpiryInput\" placeholder=\"MM/YY\" />\n          <input v-model=\"cardCvv\" placeholder=\"CVV\" />\n          <button @click=\"completePurchase\">Confirmar Compra</button>\n          <button @click=\"closeModal\">Cancelar</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup name=\"CartView\">\nimport { ref, onMounted, computed } from 'vue'\nimport axios from 'axios'\nimport { useUserStore } from '@/stores/userStore'\n\nconst userStore = useUserStore()\nconst ip = process.env.VUE_APP_API_IP || 'localhost'\n\nconst currentOrder = ref(null)\nconst cartItems = ref([])\n\n// Buscar la orden en progreso para el usuario actual\nconst fetchCurrentOrder = async () => {\n  try {\n    const ordersResponse = await axios.get(`http://${ip}:8081/api2/orders`)\n    const orders = ordersResponse.data\n    const userId = userStore.getUser().idUser\n    const inProgressOrder = orders.find(o => o.user.idUser === userId && o.status === 'En progreso')\n    currentOrder.value = inProgressOrder || null\n  } catch (error) {\n    console.error('Error fetching current order:', error)\n  }\n}\n\n// Obtener los ítems (OrderMedicine) de la orden en progreso\nconst fetchCartItems = async (orderId) => {\n  try {\n    const response = await axios.get(`http://${ip}:8081/api2/order_medicines`)\n    const allItems = response.data\n    // Filtrar solo los ítems que corresponden a la orden en progreso\n    cartItems.value = allItems.filter(item => item.orders.idOrder === orderId)\n  } catch (error) {\n    console.error('Error fetching cart items:', error)\n  }\n}\n\n// Eliminar un ítem del carrito (se elimina directamente de la DB)\nconst removeItem = async (item) => {\n  try {\n    const orderId = item.orders.idOrder\n    const medicineId = item.medicine.idMedicine\n    await axios.delete(`http://${ip}:8081/api2/order_medicines?id=${orderId},${medicineId}`)\n    // Actualizar la lista local eliminando el ítem borrado\n    cartItems.value = cartItems.value.filter(i => i.medicine.idMedicine !== medicineId)\n  } catch (error) {\n    console.error('Error removing item from cart:', error)\n  }\n}\n\n// Referencias y funciones para completar la compra\nconst isModalOpen = ref(false);\nconst cardNumber = ref('');\nconst cardExpiry = ref('');\nconst cardCvv = ref('');\n\nconst handleExpiryInput = () => {\n  let val = cardExpiry.value.replace(/[^0-9]/g, '');\n  if (val.length > 2) {\n    cardExpiry.value = val.slice(0, 2) + '/' + val.slice(2, 4);\n  } else {\n    cardExpiry.value = val;\n  }\n};\n\nconst isCardValid = computed(() => {\n  return cardNumber.value && cardExpiry.value && cardCvv.value;\n});\n\nconst openModal = () => {\n  isModalOpen.value = true;\n};\n\nconst closeModal = () => {\n  isModalOpen.value = false;\n};\n\nconst completePurchase = async () => {\n  if (!isCardValid.value) return;\n  try {\n    // Se asume que currentOrder es la orden en progreso\n    const order = currentOrder.value;\n    if (!order) return;\n\n    // Crear la orden con estado 'Completado'\n    const orderResponse = await axios.post(`http://${ip}:8081/api2/orders`, {\n      status: 'Completado',\n      user: { idUser: userStore.getUser().idUser }\n    });\n    const newOrder = orderResponse.data;\n\n    // Para cada ítem del carrito, se registra en order_medicines\n    for (const item of cartItems.value) {\n      await axios.post(`http://${ip}:8081/api2/order_medicines`, {\n        orders: newOrder,\n        medicine: { idMedicine: item.medicine.idMedicine },\n        quantity: item.quantity,\n        cost: item.cost,\n        total: item.total\n      });\n    }\n    closeModal();\n    alert('Gracias por tu compra');\n    window.location.href = '/';\n  } catch (error) {\n    console.error('Error completing purchase:', error);\n    alert('Error al completar la compra. Intente de nuevo.');\n  }\n}\n\nonMounted(async () => {\n  await fetchCurrentOrder()\n  if (currentOrder.value) {\n    await fetchCartItems(currentOrder.value.idOrder)\n  }\n})\n</script>\n\n<style scoped>\n.cart-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n}\n\nth, td {\n  padding: 8px;\n  border: 1px solid #ccc;\n  text-align: left;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.modal-content {\n  background: #fff;\n  padding: 20px;\n  border-radius: 4px;\n  width: 300px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}