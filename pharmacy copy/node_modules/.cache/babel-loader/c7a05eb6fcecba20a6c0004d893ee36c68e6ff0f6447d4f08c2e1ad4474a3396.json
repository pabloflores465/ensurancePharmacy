{"ast":null,"code":"// src/stores/userStore.js\nimport { defineStore } from \"pinia\";\nexport const useUserStore = defineStore(\"user\", {\n  state: () => ({\n    user: null // Cambiado de {} a null para facilitar la verificación\n  }),\n  actions: {\n    // Guarda el usuario en el estado y localStorage\n    setUser(userData) {\n      this.user = userData;\n      console.log(\"Guardando sesión en localStorage:\", userData);\n      try {\n        if (typeof window !== \"undefined\") {\n          localStorage.setItem(\"session\", JSON.stringify(userData));\n          localStorage.setItem(\"user\", JSON.stringify(userData));\n          // También guardar el rol por separado para facilitar la verificación\n          if (userData && userData.role) {\n            localStorage.setItem(\"role\", userData.role);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error guardando datos de usuario:\", error);\n      }\n    },\n    // Obtiene el usuario del estado o localStorage\n    getUser() {\n      // Si ya tenemos el usuario en el estado, devolverlo\n      if (this.user) {\n        return this.user;\n      }\n\n      // Intentar recuperar de localStorage\n      try {\n        const session = localStorage.getItem(\"session\");\n        if (session && session !== \"undefined\" && session !== \"\") {\n          const userData = JSON.parse(session);\n          // Actualizar el estado\n          this.user = userData;\n          return userData;\n        }\n\n        // Si no hay sesión, intentar con 'user'\n        const userStr = localStorage.getItem(\"user\");\n        if (userStr && userStr !== \"undefined\" && userStr !== \"\") {\n          const userData = JSON.parse(userStr);\n          // Actualizar el estado\n          this.user = userData;\n          return userData;\n        }\n      } catch (error) {\n        console.error(\"Error recuperando datos de usuario:\", error);\n      }\n      return {}; // Devolver objeto vacío si no hay datos\n    },\n    // Verifica si el usuario tiene rol admin\n    isAdmin() {\n      const user = this.getUser();\n      return user && user.role === 'admin';\n    },\n    // Limpia el estado y localStorage\n    logout() {\n      this.user = null;\n      if (typeof window !== \"undefined\") {\n        localStorage.removeItem(\"session\");\n        localStorage.removeItem(\"user\");\n        localStorage.removeItem(\"role\");\n        console.log(\"Sesión cerrada: localStorage limpiado\");\n      }\n    }\n  }\n});","map":{"version":3,"names":["defineStore","useUserStore","state","user","actions","setUser","userData","console","log","window","localStorage","setItem","JSON","stringify","role","error","getUser","session","getItem","parse","userStr","isAdmin","logout","removeItem"],"sources":["/Users/nohelestradap/Documents/VsCode/ensurancePharmacy/pharmacy copy/src/stores/userStore.js"],"sourcesContent":["// src/stores/userStore.js\nimport { defineStore } from \"pinia\";\n\nexport const useUserStore = defineStore(\"user\", {\n  state: () => ({\n    user: null, // Cambiado de {} a null para facilitar la verificación\n  }),\n  actions: {\n    // Guarda el usuario en el estado y localStorage\n    setUser(userData) {\n      this.user = userData;\n      console.log(\"Guardando sesión en localStorage:\", userData);\n      try {\n        if (typeof window !== \"undefined\") {\n          localStorage.setItem(\"session\", JSON.stringify(userData));\n          localStorage.setItem(\"user\", JSON.stringify(userData));\n          // También guardar el rol por separado para facilitar la verificación\n          if (userData && userData.role) {\n            localStorage.setItem(\"role\", userData.role);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error guardando datos de usuario:\", error);\n      }\n    },\n    \n    // Obtiene el usuario del estado o localStorage\n    getUser() {\n      // Si ya tenemos el usuario en el estado, devolverlo\n      if (this.user) {\n        return this.user;\n      }\n      \n      // Intentar recuperar de localStorage\n      try {\n        const session = localStorage.getItem(\"session\");\n        if (session && session !== \"undefined\" && session !== \"\") {\n          const userData = JSON.parse(session);\n          // Actualizar el estado\n          this.user = userData;\n          return userData;\n        }\n        \n        // Si no hay sesión, intentar con 'user'\n        const userStr = localStorage.getItem(\"user\");\n        if (userStr && userStr !== \"undefined\" && userStr !== \"\") {\n          const userData = JSON.parse(userStr);\n          // Actualizar el estado\n          this.user = userData;\n          return userData;\n        }\n      } catch (error) {\n        console.error(\"Error recuperando datos de usuario:\", error);\n      }\n      \n      return {}; // Devolver objeto vacío si no hay datos\n    },\n    \n    // Verifica si el usuario tiene rol admin\n    isAdmin() {\n      const user = this.getUser();\n      return user && user.role === 'admin';\n    },\n\n    // Limpia el estado y localStorage\n    logout() {\n      this.user = null;\n      \n      if (typeof window !== \"undefined\") {\n        localStorage.removeItem(\"session\");\n        localStorage.removeItem(\"user\");\n        localStorage.removeItem(\"role\");\n        console.log(\"Sesión cerrada: localStorage limpiado\");\n      }\n    },\n  },\n});\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,OAAO;AAEnC,OAAO,MAAMC,YAAY,GAAGD,WAAW,CAAC,MAAM,EAAE;EAC9CE,KAAK,EAAEA,CAAA,MAAO;IACZC,IAAI,EAAE,IAAI,CAAE;EACd,CAAC,CAAC;EACFC,OAAO,EAAE;IACP;IACAC,OAAOA,CAACC,QAAQ,EAAE;MAChB,IAAI,CAACH,IAAI,GAAGG,QAAQ;MACpBC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEF,QAAQ,CAAC;MAC1D,IAAI;QACF,IAAI,OAAOG,MAAM,KAAK,WAAW,EAAE;UACjCC,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAAC,CAAC;UACzDI,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAAC,CAAC;UACtD;UACA,IAAIA,QAAQ,IAAIA,QAAQ,CAACQ,IAAI,EAAE;YAC7BJ,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEL,QAAQ,CAACQ,IAAI,CAAC;UAC7C;QACF;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D;IACF,CAAC;IAED;IACAC,OAAOA,CAAA,EAAG;MACR;MACA,IAAI,IAAI,CAACb,IAAI,EAAE;QACb,OAAO,IAAI,CAACA,IAAI;MAClB;;MAEA;MACA,IAAI;QACF,MAAMc,OAAO,GAAGP,YAAY,CAACQ,OAAO,CAAC,SAAS,CAAC;QAC/C,IAAID,OAAO,IAAIA,OAAO,KAAK,WAAW,IAAIA,OAAO,KAAK,EAAE,EAAE;UACxD,MAAMX,QAAQ,GAAGM,IAAI,CAACO,KAAK,CAACF,OAAO,CAAC;UACpC;UACA,IAAI,CAACd,IAAI,GAAGG,QAAQ;UACpB,OAAOA,QAAQ;QACjB;;QAEA;QACA,MAAMc,OAAO,GAAGV,YAAY,CAACQ,OAAO,CAAC,MAAM,CAAC;QAC5C,IAAIE,OAAO,IAAIA,OAAO,KAAK,WAAW,IAAIA,OAAO,KAAK,EAAE,EAAE;UACxD,MAAMd,QAAQ,GAAGM,IAAI,CAACO,KAAK,CAACC,OAAO,CAAC;UACpC;UACA,IAAI,CAACjB,IAAI,GAAGG,QAAQ;UACpB,OAAOA,QAAQ;QACjB;MACF,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D;MAEA,OAAO,CAAC,CAAC,CAAC,CAAC;IACb,CAAC;IAED;IACAM,OAAOA,CAAA,EAAG;MACR,MAAMlB,IAAI,GAAG,IAAI,CAACa,OAAO,CAAC,CAAC;MAC3B,OAAOb,IAAI,IAAIA,IAAI,CAACW,IAAI,KAAK,OAAO;IACtC,CAAC;IAED;IACAQ,MAAMA,CAAA,EAAG;MACP,IAAI,CAACnB,IAAI,GAAG,IAAI;MAEhB,IAAI,OAAOM,MAAM,KAAK,WAAW,EAAE;QACjCC,YAAY,CAACa,UAAU,CAAC,SAAS,CAAC;QAClCb,YAAY,CAACa,UAAU,CAAC,MAAM,CAAC;QAC/Bb,YAAY,CAACa,UAAU,CAAC,MAAM,CAAC;QAC/BhB,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;MACtD;IACF;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}