{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { useUserStore } from '@/stores/userStore';\nimport axios from 'axios';\nexport default {\n  __name: 'VerificarCompra',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const pharmacy = parseInt(window.location.port);\n    const pharmacy_port = pharmacy - 30;\n    const route = useRoute();\n    const router = useRouter();\n    const userStore = useUserStore();\n    const ip = process.env.VUE_APP_IP || '192.168.0.21';\n    const apiPort = process.env.VUE_APP_API_PORT || '8081';\n\n    // Estados\n    const medicine = ref(null);\n    const quantity = ref(1);\n    const isLoading = ref(true);\n    const hasStock = ref(false);\n    const hasPrescription = ref(false);\n    const isPrescriptionPending = ref(false);\n    const hasInsurance = ref(false);\n    const coveragePercentage = ref(0);\n    const showConfirmationModal = ref(false);\n    const userRecipes = ref([]);\n    const selectedRecipe = ref(null);\n    const showDetailModal = ref(false);\n    const medicineMatch = ref(null);\n\n    // Verificar si el usuario puede realizar la compra\n    const canConfirmPurchase = computed(() => {\n      return hasStock.value;\n    });\n\n    // Verificar si se puede usar la receta seleccionada\n    const canUseSelectedRecipe = computed(() => {\n      if (!selectedRecipe.value || !medicine.value) return false;\n\n      // Verificar si la receta contiene el medicamento actual\n      const matchFound = selectedRecipe.value.medicines.find(med => med.principioActivo === medicine.value.activeMedicament);\n      return !!matchFound;\n    });\n\n    // Verificar stock disponible\n    function verificarStock() {\n      if (!medicine.value) {\n        console.error('No hay un medicamento para verificar stock');\n        hasStock.value = false;\n        return false;\n      }\n\n      // Verificar si hay suficiente stock (siempre para cantidad 1)\n      hasStock.value = medicine.value.stock >= 1;\n      console.log(`Verificación de stock: ${medicine.value.stock} disponibles, resultado: ${hasStock.value ? 'Disponible' : 'No disponible'}`);\n      return hasStock.value;\n    }\n\n    // Forzar la selección de receta con cálculo visible\n    function forceSelectRecipe(recipe) {\n      console.log('Forzando selección de receta:', recipe);\n      selectedRecipe.value = recipe;\n      if (!medicine.value) {\n        console.warn('No hay medicamento cargado');\n        return;\n      }\n\n      // Encuentra el medicamento que coincide\n      const matchingMedicine = recipe.medicines.find(med => med.principioActivo === medicine.value.activeMedicament);\n      if (matchingMedicine) {\n        medicineMatch.value = matchingMedicine;\n        hasPrescription.value = true;\n\n        // Calcular explícitamente\n        const dosis = parseInt(matchingMedicine.dosis) || 0;\n        const frecuencia = parseInt(matchingMedicine.frecuencia) || 0;\n        const duracion = parseInt(matchingMedicine.duracion) || 0;\n        const unidadesTotales = dosis * frecuencia * duracion;\n        const paquetesNecesarios = Math.ceil(unidadesTotales / medicine.value.presentacion);\n\n        // Actualizar cantidad\n        quantity.value = paquetesNecesarios || 1;\n        console.log('Resultado del cálculo:', {\n          dosis,\n          frecuencia,\n          duracion,\n          unidadesTotales,\n          unidadesPorPresentacion: medicine.value.presentacion,\n          paquetesNecesarios\n        });\n\n        // Aplicar seguro si existe\n        if (recipe.has_insurance && userStore.user && userStore.user.policy) {\n          hasInsurance.value = true;\n          coveragePercentage.value = 70;\n        } else {\n          hasInsurance.value = false;\n          coveragePercentage.value = 0;\n        }\n      } else {\n        medicineMatch.value = null;\n        hasPrescription.value = false;\n        quantity.value = 1;\n        alert('Esta receta no contiene el medicamento seleccionado');\n      }\n    }\n\n    // Seleccionar una receta\n    function selectRecipe(recipe) {\n      forceSelectRecipe(recipe);\n    }\n\n    // Cargar recetas\n    async function loadRecipes() {\n      isPrescriptionPending.value = true;\n      try {\n        if (userStore.user && userStore.user.idUser) {\n          // En un entorno real, deberías obtener las recetas del usuario desde el backend\n          console.log('Cargando recetas para el usuario:', userStore.user.idUser);\n\n          // Simulamos una llamada a la API\n          // En producción, aquí iría: const response = await axios.get(`http://${ip}:${apiPort}/api2/prescriptions/user/${userStore.user.idUser}`);\n\n          // Por ahora, usamos datos de ejemplo\n          setTimeout(() => {\n            const recetasEjemplo = [{\n              _id: \"680f14e94d748efc0c04188b\",\n              patient: userStore.user.idUser || \"user123\",\n              doctor: \"67dcd3224d8c7c0ed8f0c01fe\",\n              formatted_code: \"00256-20250427-3478\",\n              formatted_date: \"27/04/2025 23:40:57\",\n              has_insurance: userStore.user.policy ? true : false,\n              insurance_code: userStore.user.policy || null,\n              special_notes: \"2\",\n              created_at: \"2025-04-27T23:40:57.300+00:00\",\n              medicines: [{\n                _id: \"med-paracetamol-500\",\n                principioActivo: \"Paracetamol2\",\n                concentracion: \"500 MG\",\n                presentacion: 30,\n                dosis: \"2\",\n                frecuencia: \"1\",\n                duracion: \"4\",\n                diagnostico: \"2\"\n              }]\n            }];\n            userRecipes.value = recetasEjemplo;\n            console.log('Recetas cargadas:', userRecipes.value);\n            isPrescriptionPending.value = false;\n          }, 500);\n        } else {\n          console.warn('No hay usuario logueado para cargar recetas');\n          isPrescriptionPending.value = false;\n        }\n      } catch (error) {\n        console.error('Error al cargar recetas:', error);\n        isPrescriptionPending.value = false;\n      }\n    }\n\n    // Manejar carga de archivo\n    function handlePrescriptionUpload(event) {\n      const file = event.target.files[0];\n      if (file) {\n        console.log('Archivo de receta seleccionado:', file.name);\n      } else {\n        console.log('No se seleccionó ningún archivo');\n      }\n    }\n\n    // Calcular total a pagar\n    function calculateTotalToPay() {\n      if (!medicine.value) return 0;\n      const subtotal = medicine.value.price * quantity.value;\n      if (hasInsurance.value) {\n        const discount = subtotal * (coveragePercentage.value / 100);\n        return subtotal - discount;\n      }\n      return subtotal;\n    }\n\n    // Ver detalle de la compra (abre el modal)\n    function viewDetail() {\n      showDetailModal.value = true;\n    }\n\n    // Cerrar modal de detalle\n    function closeDetailModal() {\n      showDetailModal.value = false;\n    }\n\n    // Función para confirmar la compra\n    async function confirmPurchase() {\n      console.log('[VerificarCompra] Iniciando confirmPurchase...');\n      // ... (resto de la lógica de confirmPurchase como estaba antes, \n      //      asegurándose de usar selectedRecipe.value?._id para la factura)\n      try {\n        isLoading.value = true;\n        if (!medicine.value || !medicine.value.idMedicine) {\n          console.error('No hay un medicamento válido para la compra');\n          alert('No se pudo completar la compra: datos de medicamento incompletos');\n          isLoading.value = false;\n          return;\n        }\n        if (!userStore.user || !userStore.user.idUser) {\n          console.error('No hay información del usuario para la compra');\n          alert('Debe iniciar sesión para completar la compra');\n          isLoading.value = false;\n          return;\n        }\n\n        // Verificar stock nuevamente antes de procesar\n        if (!verificarStock()) {\n          alert('No hay suficiente stock para completar la compra');\n          isLoading.value = false;\n          return;\n        }\n        console.log('Iniciando proceso de compra:', {\n          medicineId: medicine.value.idMedicine,\n          userId: userStore.user.idUser,\n          quantity: quantity.value,\n          recipeId: selectedRecipe.value?._id // Incluir ID de receta si está seleccionada\n        });\n\n        // 1. Crear orden de compra\n        const orderData = {\n          user: {\n            idUser: userStore.user.idUser\n          },\n          status: 'Completado'\n        };\n        try {\n          const orderResponse = await axios.post(`http://${ip}:${apiPort}/api2/orders`, orderData);\n          const order = orderResponse.data;\n          console.log('Orden creada:', order);\n\n          // 2. Añadir medicamento a la orden\n          const orderMedicineData = {\n            orders: order,\n            medicine: {\n              idMedicine: medicine.value.idMedicine\n            },\n            quantity: quantity.value,\n            cost: medicine.value.price,\n            total: medicine.value.price * quantity.value\n          };\n          await axios.post(`http://${ip}:${apiPort}/api2/order_medicines`, orderMedicineData);\n          console.log('Medicamento añadido a la orden');\n\n          // 3. Actualizar el stock del medicamento\n          const updatedMedicine = {\n            ...medicine.value\n          };\n          updatedMedicine.stock = updatedMedicine.stock - quantity.value;\n          await axios.put(`http://${ip}:${apiPort}/api2/medicines/${medicine.value.idMedicine}`, updatedMedicine);\n          console.log('Stock actualizado');\n\n          // 4. Si hay seguro o receta, generar registro de factura\n          if (hasInsurance.value || selectedRecipe.value) {\n            const insuranceAmount = hasInsurance.value ? medicine.value.price * quantity.value * (coveragePercentage.value / 100) : 0;\n            const patientAmount = medicine.value.price * quantity.value - insuranceAmount;\n            const billData = {\n              prescription: selectedRecipe.value ? selectedRecipe.value._id : null,\n              // Correcto\n              total: medicine.value.price * quantity.value,\n              subtotal: medicine.value.price * quantity.value,\n              taxes: 0,\n              coveredAmount: insuranceAmount,\n              patientAmount: patientAmount,\n              copay: hasInsurance.value ? coveragePercentage.value : 0,\n              status: 'Pagado',\n              insuranceApprovalCode: hasInsurance.value ? 'AP' + Math.floor(Math.random() * 100000) : null\n            };\n            console.log('Creando factura con datos:', billData);\n            await axios.post(`http://${ip}:${apiPort}/api2/bills`, billData);\n            console.log('Factura creada');\n          }\n          console.log('Compra completada exitosamente');\n          isLoading.value = false;\n\n          // Cerrar cualquier modal abierto\n          closeDetailModal();\n\n          // Mostrar confirmación\n          showConfirmationModal.value = true;\n        } catch (error) {\n          console.error('Error en proceso de compra (llamadas API):', error);\n          if (error.response) {\n            console.error('Respuesta del servidor:', error.response.data);\n            alert(`Error del servidor: ${error.response.status} - ${error.response.data?.message || 'Error desconocido'}`);\n          } else {\n            alert('Ocurrió un error al procesar su compra (API). Por favor, inténtelo de nuevo.');\n          }\n          isLoading.value = false;\n        }\n      } catch (error) {\n        console.error('Error general procesando la compra:', error);\n        isLoading.value = false;\n        alert('Ocurrió un error al procesar su compra. Por favor, inténtelo de nuevo.');\n      }\n    }\n\n    // Finalizar proceso y redirigir\n    function finishPurchase() {\n      // Cerrar todos los modales\n      showConfirmationModal.value = false;\n      showDetailModal.value = false;\n\n      // Redireccionar al catálogo\n      router.push('/catalogo');\n    }\n\n    // Volver atrás\n    function goBack() {\n      router.back();\n    }\n\n    // Usar la receta seleccionada (marcarla como usada)\n    function useSelectedRecipe() {\n      if (selectedRecipe.value && canUseSelectedRecipe.value) {\n        hasPrescription.value = true; // Ya debería ser true por selectRecipe\n        console.log('Usando receta:', selectedRecipe.value._id);\n\n        // Mostrar confirmación visual (si es necesario)\n        // ... (código para cambiar estilo del botón si se desea)\n      } else {\n        alert('Esta receta no es válida para el medicamento actual.');\n      }\n    }\n\n    // Simular verificación de receta subida\n    function verifyPrescription() {\n      const fileInput = document.getElementById('prescription');\n      if (!fileInput || !fileInput.files || fileInput.files.length === 0) {\n        alert('Por favor, adjunte una receta médica.');\n        return;\n      }\n      isPrescriptionPending.value = true;\n      console.log('Simulando verificación de receta subida...');\n      setTimeout(() => {\n        // Generar cantidades aleatorias pero realistas para la receta\n        const dosis = Math.floor(Math.random() * 2) + 1; // 1 o 2 unidades por dosis\n        const frecuencia = Math.floor(Math.random() * 3) + 1; // 1 a 3 veces al día\n        const duracion = Math.floor(Math.random() * 7) + 3; // 3 a 10 días\n\n        const nuevaReceta = {\n          _id: \"receta-\" + Math.floor(Math.random() * 10000),\n          patient: userStore.user?.idUser || \"usuario-actual\",\n          doctor: \"Doctor Subido\",\n          formatted_code: \"SUBIDA-\" + new Date().toISOString().substring(0, 10),\n          formatted_date: new Date().toLocaleDateString(),\n          has_insurance: false,\n          special_notes: \"Receta subida manualmente\",\n          medicines: [{\n            _id: \"med-\" + Math.floor(Math.random() * 10000),\n            principioActivo: medicine.value?.activeMedicament || 'Desconocido',\n            concentracion: medicine.value?.concentration || \"N/A\",\n            presentacion: medicine.value?.presentacion || 'N/A',\n            dosis: dosis.toString(),\n            frecuencia: frecuencia.toString(),\n            duracion: duracion.toString(),\n            diagnostico: \"Subido manualmente\"\n          }]\n        };\n        userRecipes.value.unshift(nuevaReceta);\n        forceSelectRecipe(nuevaReceta); // Seleccionar y validar la nueva receta\n        isPrescriptionPending.value = false;\n        console.log('Receta subida y verificada (simulado) con cantidades:', {\n          dosis,\n          frecuencia,\n          duracion,\n          totalUnidades: dosis * frecuencia * duracion\n        });\n      }, 1500);\n    }\n\n    // Recargar recetas (simulación)\n    function recargarRecetas() {\n      isPrescriptionPending.value = true;\n      console.log('Recargando recetas...');\n      setTimeout(() => {\n        loadRecipes();\n        isPrescriptionPending.value = false;\n      }, 1000);\n    }\n\n    // Cargar datos del medicamento\n    onMounted(async () => {\n      isLoading.value = true;\n      try {\n        const activeMedicamentName = route.params.id;\n        console.log('Buscando medicamento con principio activo:', activeMedicamentName);\n        const searchUrl = `http://${ip}:${apiPort}/api2/medicines/search?activeMedicament=${activeMedicamentName}`;\n        console.log('URL de búsqueda:', searchUrl);\n        const response = await axios.get(searchUrl);\n        console.log('Respuesta de búsqueda:', response.data);\n        if (response.data && response.data.length > 0) {\n          medicine.value = response.data[0];\n          console.log('Medicamento encontrado:', medicine.value);\n\n          // Verificar stock\n          if (medicine.value.stock > 0) {\n            hasStock.value = true;\n          }\n\n          // Cargar recetas\n          await loadRecipes();\n\n          // Si hay receta, seleccionar\n          if (route.query.recipeId) {\n            const recipeToSelect = userRecipes.value.find(r => r._id === route.query.recipeId);\n            if (recipeToSelect) {\n              console.log('Seleccionando receta inicial:', recipeToSelect);\n              selectRecipe(recipeToSelect);\n            }\n          }\n        } else {\n          console.warn('No se encontró el medicamento');\n          medicine.value = null;\n        }\n      } catch (error) {\n        console.error('Error al buscar el medicamento:', error);\n        medicine.value = null;\n      } finally {\n        isLoading.value = false;\n      }\n    });\n    const __returned__ = {\n      pharmacy,\n      pharmacy_port,\n      route,\n      router,\n      userStore,\n      ip,\n      apiPort,\n      medicine,\n      quantity,\n      isLoading,\n      hasStock,\n      hasPrescription,\n      isPrescriptionPending,\n      hasInsurance,\n      coveragePercentage,\n      showConfirmationModal,\n      userRecipes,\n      selectedRecipe,\n      showDetailModal,\n      medicineMatch,\n      canConfirmPurchase,\n      canUseSelectedRecipe,\n      verificarStock,\n      forceSelectRecipe,\n      selectRecipe,\n      loadRecipes,\n      handlePrescriptionUpload,\n      calculateTotalToPay,\n      viewDetail,\n      closeDetailModal,\n      confirmPurchase,\n      finishPurchase,\n      goBack,\n      useSelectedRecipe,\n      verifyPrescription,\n      recargarRecetas,\n      ref,\n      computed,\n      onMounted,\n      get useRoute() {\n        return useRoute;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get useUserStore() {\n        return useUserStore;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useRoute","useRouter","useUserStore","axios","pharmacy","parseInt","window","location","port","pharmacy_port","route","router","userStore","ip","process","env","VUE_APP_IP","apiPort","VUE_APP_API_PORT","medicine","quantity","isLoading","hasStock","hasPrescription","isPrescriptionPending","hasInsurance","coveragePercentage","showConfirmationModal","userRecipes","selectedRecipe","showDetailModal","medicineMatch","canConfirmPurchase","value","canUseSelectedRecipe","matchFound","medicines","find","med","principioActivo","activeMedicament","verificarStock","console","error","stock","log","forceSelectRecipe","recipe","warn","matchingMedicine","dosis","frecuencia","duracion","unidadesTotales","paquetesNecesarios","Math","ceil","presentacion","unidadesPorPresentacion","has_insurance","user","policy","alert","selectRecipe","loadRecipes","idUser","setTimeout","recetasEjemplo","_id","patient","doctor","formatted_code","formatted_date","insurance_code","special_notes","created_at","concentracion","diagnostico","handlePrescriptionUpload","event","file","target","files","name","calculateTotalToPay","subtotal","price","discount","viewDetail","closeDetailModal","confirmPurchase","idMedicine","medicineId","userId","recipeId","orderData","status","orderResponse","post","order","data","orderMedicineData","orders","cost","total","updatedMedicine","put","insuranceAmount","patientAmount","billData","prescription","taxes","coveredAmount","copay","insuranceApprovalCode","floor","random","response","message","finishPurchase","push","goBack","back","useSelectedRecipe","verifyPrescription","fileInput","document","getElementById","length","nuevaReceta","Date","toISOString","substring","toLocaleDateString","concentration","toString","unshift","totalUnidades","recargarRecetas","activeMedicamentName","params","id","searchUrl","get","query","recipeToSelect","r"],"sources":["/Users/nohelestradap/Documents/VsCode/ensurancePharmacy/pharmacy/src/pages/VerificarCompra.vue"],"sourcesContent":["<template>\n  <div class=\"purchase-container\">\n    <div class=\"purchase-header\">\n      <h1 class=\"purchase-title\">Verificación de Compra</h1>\n      <p class=\"purchase-subtitle\">Revisando disponibilidad y requisitos</p>\n    </div>\n\n    <!-- Datos del medicamento -->\n    <div v-if=\"isLoading\" class=\"loading-section\">\n      <div class=\"loading-spinner\"></div>\n      <p>Verificando información...</p>\n    </div>\n\n    <div v-else-if=\"medicine\" class=\"medicine-details\">\n      <div class=\"medicine-header\">\n        <h2>{{ medicine.name }}</h2>\n        <span class=\"medicine-badge\" v-if=\"medicine.prescription\">Requiere receta médica</span>\n      </div>\n\n      <div class=\"medicine-data\">\n        <div class=\"data-grid\">\n          <div class=\"data-item\">\n            <span class=\"label\">Principio Activo:</span>\n            <span class=\"value\">{{ medicine.activeMedicament }}</span>\n          </div>\n          <div class=\"data-item\">\n            <span class=\"label\">Presentación:</span>\n            <span class=\"value\">{{ medicine.presentacion }}</span>\n          </div>\n          <div class=\"data-item\">\n            <span class=\"label\">Precio Unitario:</span>\n            <span class=\"value price\">Q{{ medicine.price.toFixed(2) }}</span>\n          </div>\n          <div class=\"data-item\">\n            <span class=\"label\">Cantidad (paquetes):</span>\n            <span class=\"value\">{{ quantity }}</span>\n          </div>\n          <div class=\"data-item\">\n            <span class=\"label\">Total:</span>\n            <span class=\"value total\">Q{{ (medicine.price * quantity).toFixed(2) }}</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- Verificación de stock -->\n      <div class=\"verification-card stock-card\" :class=\"{ 'status-success': hasStock, 'status-error': !hasStock }\">\n        <div class=\"card-icon\">{{ hasStock ? '✓' : '✗' }}</div>\n        <div class=\"card-content\">\n          <h3>Verificación de Stock</h3>\n          <p v-if=\"hasStock\">\n            Hay suficiente stock disponible ({{ medicine.stock }} unidades)\n          </p>\n          <p v-else>\n            No hay suficiente stock disponible. Solo quedan {{ medicine.stock }} unidades.\n          </p>\n        </div>\n      </div>\n\n      <!-- Verificación de receta médica -->\n      <div v-if=\"medicine.prescription\" class=\"prescription-section\">\n        <h3>Recetas Médicas Disponibles</h3>\n         <div class=\"prescription-container\">\n            <!-- Lista de recetas a la izquierda -->\n            <div class=\"prescription-list\">\n              <div v-if=\"isPrescriptionPending\" class=\"loading-recipes\">\n                <div class=\"loading-spinner-small\"></div>\n                <p>Cargando recetas...</p>\n              </div>\n              \n              <div v-else-if=\"!userRecipes || userRecipes.length === 0\" class=\"no-recipes\">\n                <p>No se encontraron recetas disponibles</p>\n                <button @click=\"recargarRecetas\" class=\"reload-button\">\n                  <span class=\"reload-icon\">⟳</span> Recargar recetas\n                </button>\n                <div class=\"prescription-input\">\n                  <label for=\"prescription\">Adjuntar nueva receta:</label>\n                  <input type=\"file\" id=\"prescription\" @change=\"handlePrescriptionUpload\" />\n                  <button @click=\"verifyPrescription\" class=\"verify-button\">Verificar receta</button>\n                </div>\n              </div>\n              \n              <div v-else>\n                <div class=\"recipe-actions top\">\n                  <button @click=\"recargarRecetas\" class=\"reload-button small\">\n                    <span class=\"reload-icon\">⟳</span> Actualizar\n                  </button>\n                </div>\n                <div \n                  v-for=\"recipe in userRecipes\" \n                  :key=\"recipe._id\" \n                  class=\"recipe-item\"\n                  :class=\"{ 'active': selectedRecipe && selectedRecipe._id === recipe._id }\"\n                  @click=\"forceSelectRecipe(recipe)\"\n                >\n                  <div class=\"recipe-header\">\n                    <span class=\"recipe-code\">{{ recipe.formatted_code }}</span>\n                    <span class=\"recipe-date\">{{ recipe.formatted_date }}</span>\n                  </div>\n                  <div class=\"recipe-doctor\">Dr. {{ recipe.doctor }}</div>\n                </div>\n              </div>\n            </div>\n            \n            <!-- Detalle de la receta a la derecha -->\n            <div class=\"prescription-detail\">\n              <div v-if=\"selectedRecipe\" class=\"recipe-detail-content\">\n                <h4>Detalle de la Receta</h4>\n                <div class=\"recipe-info\">\n                  <p><strong>Código:</strong> {{ selectedRecipe.formatted_code }}</p>\n                  <p><strong>Fecha:</strong> {{ selectedRecipe.formatted_date }}</p>\n                  <p><strong>Doctor:</strong> {{ selectedRecipe.doctor }}</p>\n                  <p v-if=\"selectedRecipe.special_notes\"><strong>Notas:</strong> {{ selectedRecipe.special_notes }}</p>\n                </div>\n                \n                <h4>Medicamentos recetados:</h4>\n                <div class=\"medicine-list\">\n                  <div v-for=\"(med, index) in selectedRecipe.medicines\" :key=\"index\" class=\"medicine-item\"\n                       :class=\"{'matching-medicine': medicine && med.principioActivo === medicine.activeMedicament}\">\n                    <p><strong>{{ med.principioActivo }}</strong> {{ med.concentracion }}</p>\n                    <p v-if=\"med.presentacion\">Presentación: {{ med.presentacion }}</p>\n                    <p>Dosis: {{ med.dosis }} unidades | Frecuencia: {{ med.frecuencia }} veces al día | Duración: {{ med.duracion }} días</p>\n                    <p v-if=\"med.diagnostico\">Diagnóstico: {{ med.diagnostico }}</p>\n                    <div v-if=\"medicine && med.principioActivo === medicine.activeMedicament\" class=\"calculation-details\">\n                      <p class=\"calculation-text\">\n                        <strong>Cálculo:</strong> \n                        {{ med.dosis }} unidades × \n                        {{ med.frecuencia }} veces/día × \n                        {{ med.duracion }} días = \n                        <strong>{{ parseInt(med.dosis) * parseInt(med.frecuencia) * parseInt(med.duracion) }} unidades totales</strong>\n                      </p>\n                      <p class=\"calculation-text\">\n                        <strong>Paquetes necesarios:</strong> \n                        ⌈{{ parseInt(med.dosis) * parseInt(med.frecuencia) * parseInt(med.duracion) }} \n                        ÷ {{ medicine.presentacion }}⌉ = \n                        <strong>{{ Math.ceil((parseInt(med.dosis) * parseInt(med.frecuencia) * parseInt(med.duracion)) / medicine.presentacion) }} paquete(s)</strong>\n                      </p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div class=\"recipe-actions\">\n                  <button \n                    @click=\"useSelectedRecipe\" \n                    class=\"use-recipe-button\"\n                    :disabled=\"!canUseSelectedRecipe\"\n                  >\n                    Usar esta receta\n                  </button>\n                </div>\n              </div>\n              \n              <div v-else class=\"no-recipe-selected\">\n                <p>Seleccione una receta para ver detalles</p>\n              </div>\n            </div>\n          </div>\n      </div>\n\n      <!-- Verificación de seguro -->\n      <div v-if=\"userStore.user\" class=\"verification-card insurance-card\" :class=\"{ 'status-success': hasInsurance, 'status-neutral': !hasInsurance }\">\n        <div class=\"card-icon\">{{ hasInsurance ? '✓' : 'ⓘ' }}</div>\n        <div class=\"card-content\">\n          <h3>Seguro Médico</h3>\n          <p v-if=\"hasInsurance\">\n            Su seguro médico cubrirá {{ coveragePercentage }}% del costo\n          </p>\n          <p v-else>\n            No se detectó seguro médico. Pagará el precio completo.\n          </p>\n        </div>\n      </div>\n\n      <!-- Resumen de pago -->\n      <div class=\"payment-summary\">\n        <h3>Resumen de Pago</h3>\n        <div class=\"summary-item\">\n          <span>Subtotal:</span>\n          <span>Q{{ (medicine.price * quantity).toFixed(2) }}</span>\n        </div>\n        <div v-if=\"hasInsurance\" class=\"summary-item discount\">\n          <span>Cobertura del seguro ({{ coveragePercentage }}%):</span>\n          <span>-Q{{ ((medicine.price * quantity) * (coveragePercentage / 100)).toFixed(2) }}</span>\n        </div>\n        <div class=\"summary-item total\">\n          <span>Total a pagar:</span>\n          <span>Q{{ calculateTotalToPay().toFixed(2) }}</span>\n        </div>\n      </div>\n\n      <!-- Botones de acción -->\n      <div class=\"action-buttons\">\n        <button @click=\"goBack\" class=\"cancel-button\">Cancelar</button>\n        <button @click=\"viewDetail\" class=\"detail-button\">Ver Detalle</button>\n        <button \n          @click=\"confirmPurchase\" \n          class=\"confirm-button\"\n          :disabled=\"!canConfirmPurchase\" \n        >\n          Confirmar Compra\n        </button>\n      </div>\n    </div>\n\n    <div v-else class=\"error-container\">\n      <h2>Producto no encontrado</h2>\n      <p>No se pudo encontrar el medicamento solicitado.</p>\n      <button @click=\"goBack\" class=\"back-button\">Volver al catálogo</button>\n    </div>\n\n    <!-- Modal de detalle de compra -->\n    <div v-if=\"showDetailModal\" class=\"modal-overlay\">\n      <div class=\"modal-content detail-modal\">\n          <div class=\"modal-header\">\n            <h3>Detalle de la Compra</h3>\n            <button @click=\"closeDetailModal\" class=\"close-icon\">&times;</button>\n          </div>\n          \n          <div class=\"detail-content\" v-if=\"medicine\"> \n            <div class=\"detail-section\">\n              <h4>Medicamento</h4>\n              <div class=\"detail-info\">\n                <p><strong>Nombre:</strong> {{ medicine.name }}</p>\n                <p><strong>Principio Activo:</strong> {{ medicine.activeMedicament }}</p>\n                <p><strong>Presentación:</strong> {{ medicine.presentacion }}</p>\n                <p><strong>Precio Unitario:</strong> Q{{ medicine.price.toFixed(2) }}</p>\n              </div>\n            </div>\n            \n            <div class=\"detail-section\">\n              <h4>Detalles de la Compra</h4>\n              <div class=\"detail-info\">\n                <p><strong>Cantidad (paquetes):</strong> {{ quantity }}</p>\n                <p><strong>Subtotal:</strong> Q{{ (medicine.price * quantity).toFixed(2) }}</p>\n                <p v-if=\"hasInsurance\"><strong>Descuento Seguro:</strong> Q{{ ((medicine.price * quantity) * (coveragePercentage / 100)).toFixed(2) }}</p>\n                <p><strong>Total a Pagar:</strong> Q{{ calculateTotalToPay().toFixed(2) }}</p>\n              </div>\n            </div>\n            \n            <div v-if=\"selectedRecipe\" class=\"detail-section\">\n              <h4>Receta Médica Utilizada</h4>\n              <div class=\"detail-info\">\n                <p><strong>Código:</strong> {{ selectedRecipe.formatted_code }}</p>\n                <p><strong>Fecha:</strong> {{ selectedRecipe.formatted_date }}</p>\n                <p><strong>Doctor:</strong> {{ selectedRecipe.doctor }}</p>\n                <div v-if=\"medicineMatch\" class=\"calculation-details\">\n                  <p class=\"calculation-text\">\n                    <strong>Cálculo:</strong> \n                    {{ medicineMatch.dosis }} unidades × \n                    {{ medicineMatch.frecuencia }} veces/día × \n                    {{ medicineMatch.duracion }} días = \n                    <strong>{{ parseInt(medicineMatch.dosis) * parseInt(medicineMatch.frecuencia) * parseInt(medicineMatch.duracion) }} unidades totales</strong>\n                  </p>\n                  <p class=\"calculation-text\">\n                    <strong>Paquetes necesarios:</strong> \n                    ⌈{{ parseInt(medicineMatch.dosis) * parseInt(medicineMatch.frecuencia) * parseInt(medicineMatch.duracion) }} \n                    ÷ {{ medicine.presentacion }}⌉ = \n                    <strong>{{ Math.ceil((parseInt(medicineMatch.dosis) * parseInt(medicineMatch.frecuencia) * parseInt(medicineMatch.duracion)) / medicine.presentacion) }} paquete(s)</strong>\n                  </p>\n                </div>\n              </div>\n            </div>\n             <div v-else-if=\"medicine.prescription\" class=\"detail-section\">\n                <h4>Receta Médica</h4>\n                 <div class=\"detail-info\">\n                    <p class=\"status-warning\">Se requiere receta, pero no se ha seleccionado ninguna.</p>\n                 </div>\n             </div>\n            \n            <div class=\"detail-section\">\n              <h4>Estado de la Compra</h4>\n              <div class=\"detail-info\">\n                <p><strong>Stock disponible:</strong> <span :class=\"hasStock ? 'status-ok' : 'status-error'\">{{ hasStock ? 'Sí' : 'No' }}</span></p>\n                <p v-if=\"medicine.prescription\"><strong>Receta médica:</strong> <span :class=\"hasPrescription ? 'status-ok' : 'status-pending'\">{{ hasPrescription ? 'Validada' : 'Pendiente/No seleccionada' }}</span></p>\n                <p><strong>Seguro médico:</strong> <span :class=\"hasInsurance ? 'status-ok' : 'status-info'\">{{ hasInsurance ? `Cobertura del ${coveragePercentage}%` : 'No disponible' }}</span></p>\n              </div>\n            </div>\n          </div>\n           <div v-else class=\"detail-content\">\n                <p>Cargando detalles...</p>\n           </div>\n          \n          <div class=\"modal-actions\">\n            <button @click=\"closeDetailModal\" class=\"cancel-button\">Cerrar</button>\n            <button \n              @click=\"confirmPurchase\" \n              class=\"confirm-button\"\n              :disabled=\"!canConfirmPurchase\"\n            >\n              Confirmar Compra\n            </button>\n          </div>\n        </div>\n    </div>\n\n    <!-- Modal de confirmación -->\n    <div v-if=\"showConfirmationModal\" class=\"modal-overlay\">\n      <div class=\"modal-content\">\n        <h3>¡Compra Exitosa!</h3>\n        <p>Su compra ha sido procesada correctamente.</p>\n        <div class=\"confirmation-details\">\n          <p><strong>Medicamento:</strong> {{ medicine?.name }}</p>\n          <p><strong>Cantidad:</strong> {{ quantity }}</p>\n          <p><strong>Total pagado:</strong> Q{{ calculateTotalToPay().toFixed(2) }}</p>\n        </div>\n        <button @click=\"finishPurchase\" class=\"finish-button\">Continuar</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { useUserStore } from '@/stores/userStore';\nimport axios from 'axios';\nconst pharmacy = parseInt(window.location.port);\nconst pharmacy_port = pharmacy-30;\nconst route = useRoute();\nconst router = useRouter();\nconst userStore = useUserStore();\nconst ip = process.env.VUE_APP_IP || '192.168.0.21';\nconst apiPort = process.env.VUE_APP_API_PORT || '8081';\n\n// Estados\nconst medicine = ref(null);\nconst quantity = ref(1);\nconst isLoading = ref(true);\nconst hasStock = ref(false);\nconst hasPrescription = ref(false);\nconst isPrescriptionPending = ref(false);\nconst hasInsurance = ref(false);\nconst coveragePercentage = ref(0);\nconst showConfirmationModal = ref(false);\nconst userRecipes = ref([]);\nconst selectedRecipe = ref(null);\nconst showDetailModal = ref(false);\nconst medicineMatch = ref(null);\n\n// Verificar si el usuario puede realizar la compra\nconst canConfirmPurchase = computed(() => {\n  return hasStock.value;\n});\n\n// Verificar si se puede usar la receta seleccionada\nconst canUseSelectedRecipe = computed(() => {\n  if (!selectedRecipe.value || !medicine.value) return false;\n  \n  // Verificar si la receta contiene el medicamento actual\n  const matchFound = selectedRecipe.value.medicines.find(med => \n    med.principioActivo === medicine.value.activeMedicament\n  );\n  \n  return !!matchFound;\n});\n\n// Verificar stock disponible\nfunction verificarStock() {\n  if (!medicine.value) {\n    console.error('No hay un medicamento para verificar stock');\n    hasStock.value = false;\n    return false;\n  }\n  \n  // Verificar si hay suficiente stock (siempre para cantidad 1)\n  hasStock.value = medicine.value.stock >= 1;\n  \n  console.log(`Verificación de stock: ${medicine.value.stock} disponibles, resultado: ${hasStock.value ? 'Disponible' : 'No disponible'}`);\n  \n  return hasStock.value;\n}\n\n// Forzar la selección de receta con cálculo visible\nfunction forceSelectRecipe(recipe) {\n  console.log('Forzando selección de receta:', recipe);\n  selectedRecipe.value = recipe;\n  \n  if (!medicine.value) {\n    console.warn('No hay medicamento cargado');\n    return;\n  }\n  \n  // Encuentra el medicamento que coincide\n  const matchingMedicine = recipe.medicines.find(med => \n    med.principioActivo === medicine.value.activeMedicament\n  );\n  \n  if (matchingMedicine) {\n    medicineMatch.value = matchingMedicine;\n    hasPrescription.value = true;\n    \n    // Calcular explícitamente\n    const dosis = parseInt(matchingMedicine.dosis) || 0;\n    const frecuencia = parseInt(matchingMedicine.frecuencia) || 0;\n    const duracion = parseInt(matchingMedicine.duracion) || 0;\n    const unidadesTotales = dosis * frecuencia * duracion;\n    const paquetesNecesarios = Math.ceil(unidadesTotales / medicine.value.presentacion);\n    \n    // Actualizar cantidad\n    quantity.value = paquetesNecesarios || 1;\n    \n    console.log('Resultado del cálculo:', {\n      dosis,\n      frecuencia, \n      duracion,\n      unidadesTotales,\n      unidadesPorPresentacion: medicine.value.presentacion,\n      paquetesNecesarios\n    });\n    \n    // Aplicar seguro si existe\n    if (recipe.has_insurance && userStore.user && userStore.user.policy) {\n      hasInsurance.value = true;\n      coveragePercentage.value = 70;\n    } else {\n      hasInsurance.value = false;\n      coveragePercentage.value = 0;\n    }\n  } else {\n    medicineMatch.value = null;\n    hasPrescription.value = false;\n    quantity.value = 1;\n    alert('Esta receta no contiene el medicamento seleccionado');\n  }\n}\n\n// Seleccionar una receta\nfunction selectRecipe(recipe) {\n  forceSelectRecipe(recipe);\n}\n\n// Cargar recetas\nasync function loadRecipes() {\n  isPrescriptionPending.value = true;\n  try {\n    if (userStore.user && userStore.user.idUser) {\n      // En un entorno real, deberías obtener las recetas del usuario desde el backend\n      console.log('Cargando recetas para el usuario:', userStore.user.idUser);\n      \n      // Simulamos una llamada a la API\n      // En producción, aquí iría: const response = await axios.get(`http://${ip}:${apiPort}/api2/prescriptions/user/${userStore.user.idUser}`);\n      \n      // Por ahora, usamos datos de ejemplo\n      setTimeout(() => {\n        const recetasEjemplo = [\n          {\n            _id: \"680f14e94d748efc0c04188b\",\n            patient: userStore.user.idUser || \"user123\",\n            doctor: \"67dcd3224d8c7c0ed8f0c01fe\",\n            formatted_code: \"00256-20250427-3478\",\n            formatted_date: \"27/04/2025 23:40:57\",\n            has_insurance: userStore.user.policy ? true : false,\n            insurance_code: userStore.user.policy || null,\n            special_notes: \"2\",\n            created_at: \"2025-04-27T23:40:57.300+00:00\",\n            medicines: [\n              {\n                _id: \"med-paracetamol-500\",\n                principioActivo: \"Paracetamol2\",\n                concentracion: \"500 MG\",\n                presentacion: 30,\n                dosis: \"2\",\n                frecuencia: \"1\",\n                duracion: \"4\",\n                diagnostico: \"2\"\n              }\n            ]\n          }\n        ];\n        \n        userRecipes.value = recetasEjemplo;\n        console.log('Recetas cargadas:', userRecipes.value);\n        isPrescriptionPending.value = false;\n      }, 500);\n    } else {\n      console.warn('No hay usuario logueado para cargar recetas');\n      isPrescriptionPending.value = false;\n    }\n  } catch (error) {\n    console.error('Error al cargar recetas:', error);\n    isPrescriptionPending.value = false;\n  }\n}\n\n// Manejar carga de archivo\nfunction handlePrescriptionUpload(event) {\n  const file = event.target.files[0];\n  if (file) {\n    console.log('Archivo de receta seleccionado:', file.name);\n  } else {\n    console.log('No se seleccionó ningún archivo');\n  }\n}\n\n// Calcular total a pagar\nfunction calculateTotalToPay() {\n  if (!medicine.value) return 0;\n  \n  const subtotal = medicine.value.price * quantity.value;\n  if (hasInsurance.value) {\n    const discount = subtotal * (coveragePercentage.value / 100);\n    return subtotal - discount;\n  }\n  return subtotal;\n}\n\n// Ver detalle de la compra (abre el modal)\nfunction viewDetail() {\n  showDetailModal.value = true;\n}\n\n// Cerrar modal de detalle\nfunction closeDetailModal() {\n  showDetailModal.value = false;\n}\n\n// Función para confirmar la compra\nasync function confirmPurchase() {\n  console.log('[VerificarCompra] Iniciando confirmPurchase...');\n  // ... (resto de la lógica de confirmPurchase como estaba antes, \n  //      asegurándose de usar selectedRecipe.value?._id para la factura)\n   try {\n    isLoading.value = true;\n    \n    if (!medicine.value || !medicine.value.idMedicine) {\n      console.error('No hay un medicamento válido para la compra');\n      alert('No se pudo completar la compra: datos de medicamento incompletos');\n      isLoading.value = false;\n      return;\n    }\n    \n    if (!userStore.user || !userStore.user.idUser) {\n      console.error('No hay información del usuario para la compra');\n      alert('Debe iniciar sesión para completar la compra');\n      isLoading.value = false;\n      return;\n    }\n    \n    // Verificar stock nuevamente antes de procesar\n    if (!verificarStock()) {\n      alert('No hay suficiente stock para completar la compra');\n      isLoading.value = false;\n      return;\n    }\n    \n    console.log('Iniciando proceso de compra:', {\n      medicineId: medicine.value.idMedicine,\n      userId: userStore.user.idUser,\n      quantity: quantity.value,\n      recipeId: selectedRecipe.value?._id // Incluir ID de receta si está seleccionada\n    });\n    \n    // 1. Crear orden de compra\n    const orderData = {\n      user: { idUser: userStore.user.idUser },\n      status: 'Completado'\n    };\n    \n    try {\n      const orderResponse = await axios.post(`http://${ip}:${apiPort}/api2/orders`, orderData);\n      const order = orderResponse.data;\n      console.log('Orden creada:', order);\n      \n      // 2. Añadir medicamento a la orden\n      const orderMedicineData = {\n        orders: order,\n        medicine: { idMedicine: medicine.value.idMedicine },\n        quantity: quantity.value,\n        cost: medicine.value.price,\n        total: medicine.value.price * quantity.value\n      };\n      \n      await axios.post(`http://${ip}:${apiPort}/api2/order_medicines`, orderMedicineData);\n      console.log('Medicamento añadido a la orden');\n      \n      // 3. Actualizar el stock del medicamento\n      const updatedMedicine = { ...medicine.value };\n      updatedMedicine.stock = updatedMedicine.stock - quantity.value;\n      await axios.put(`http://${ip}:${apiPort}/api2/medicines/${medicine.value.idMedicine}`, updatedMedicine);\n      console.log('Stock actualizado');\n      \n      // 4. Si hay seguro o receta, generar registro de factura\n      if (hasInsurance.value || selectedRecipe.value) {\n        const insuranceAmount = hasInsurance.value ? (medicine.value.price * quantity.value) * (coveragePercentage.value / 100) : 0;\n        const patientAmount = (medicine.value.price * quantity.value) - insuranceAmount;\n        \n        const billData = {\n          prescription: selectedRecipe.value ? selectedRecipe.value._id : null, // Correcto\n          total: medicine.value.price * quantity.value,\n          subtotal: medicine.value.price * quantity.value,\n          taxes: 0,\n          coveredAmount: insuranceAmount,\n          patientAmount: patientAmount,\n          copay: hasInsurance.value ? coveragePercentage.value : 0,\n          status: 'Pagado',\n          insuranceApprovalCode: hasInsurance.value ? 'AP' + Math.floor(Math.random() * 100000) : null\n        };\n        \n        console.log('Creando factura con datos:', billData);\n        await axios.post(`http://${ip}:${apiPort}/api2/bills`, billData);\n        console.log('Factura creada');\n      }\n      \n      console.log('Compra completada exitosamente');\n      isLoading.value = false;\n      \n      // Cerrar cualquier modal abierto\n      closeDetailModal();\n      \n      // Mostrar confirmación\n      showConfirmationModal.value = true;\n    } catch (error) {\n      console.error('Error en proceso de compra (llamadas API):', error);\n      if (error.response) {\n        console.error('Respuesta del servidor:', error.response.data);\n        alert(`Error del servidor: ${error.response.status} - ${error.response.data?.message || 'Error desconocido'}`);\n      } else {\n        alert('Ocurrió un error al procesar su compra (API). Por favor, inténtelo de nuevo.');\n      }\n      isLoading.value = false;\n    }\n  } catch (error) {\n    console.error('Error general procesando la compra:', error);\n    isLoading.value = false;\n    alert('Ocurrió un error al procesar su compra. Por favor, inténtelo de nuevo.');\n  }\n}\n\n// Finalizar proceso y redirigir\nfunction finishPurchase() {\n  // Cerrar todos los modales\n  showConfirmationModal.value = false;\n  showDetailModal.value = false;\n  \n  // Redireccionar al catálogo\n  router.push('/catalogo');\n}\n\n// Volver atrás\nfunction goBack() {\n  router.back();\n}\n\n// Usar la receta seleccionada (marcarla como usada)\nfunction useSelectedRecipe() {\n  if (selectedRecipe.value && canUseSelectedRecipe.value) {\n    hasPrescription.value = true; // Ya debería ser true por selectRecipe\n    console.log('Usando receta:', selectedRecipe.value._id);\n    \n    // Mostrar confirmación visual (si es necesario)\n    // ... (código para cambiar estilo del botón si se desea)\n  } else {\n    alert('Esta receta no es válida para el medicamento actual.');\n  }\n}\n\n// Simular verificación de receta subida\nfunction verifyPrescription() {\n  const fileInput = document.getElementById('prescription');\n  if (!fileInput || !fileInput.files || fileInput.files.length === 0) {\n    alert('Por favor, adjunte una receta médica.');\n    return;\n  }\n  \n  isPrescriptionPending.value = true;\n  console.log('Simulando verificación de receta subida...');\n  \n  setTimeout(() => {\n    // Generar cantidades aleatorias pero realistas para la receta\n    const dosis = Math.floor(Math.random() * 2) + 1; // 1 o 2 unidades por dosis\n    const frecuencia = Math.floor(Math.random() * 3) + 1; // 1 a 3 veces al día\n    const duracion = Math.floor(Math.random() * 7) + 3; // 3 a 10 días\n    \n    const nuevaReceta = {\n      _id: \"receta-\" + Math.floor(Math.random() * 10000),\n      patient: userStore.user?.idUser || \"usuario-actual\",\n      doctor: \"Doctor Subido\",\n      formatted_code: \"SUBIDA-\" + new Date().toISOString().substring(0, 10),\n      formatted_date: new Date().toLocaleDateString(),\n      has_insurance: false,\n      special_notes: \"Receta subida manualmente\",\n      medicines: [\n        {\n          _id: \"med-\" + Math.floor(Math.random() * 10000),\n          principioActivo: medicine.value?.activeMedicament || 'Desconocido',\n          concentracion: medicine.value?.concentration || \"N/A\",\n          presentacion: medicine.value?.presentacion || 'N/A',\n          dosis: dosis.toString(),\n          frecuencia: frecuencia.toString(),\n          duracion: duracion.toString(),\n          diagnostico: \"Subido manualmente\"\n        }\n      ]\n    };\n    \n    userRecipes.value.unshift(nuevaReceta);\n    forceSelectRecipe(nuevaReceta); // Seleccionar y validar la nueva receta\n    isPrescriptionPending.value = false;\n    console.log('Receta subida y verificada (simulado) con cantidades:', {\n      dosis,\n      frecuencia,\n      duracion,\n      totalUnidades: dosis * frecuencia * duracion\n    });\n  }, 1500);\n}\n\n// Recargar recetas (simulación)\nfunction recargarRecetas() {\n  isPrescriptionPending.value = true;\n  console.log('Recargando recetas...');\n  setTimeout(() => {\n    loadRecipes();\n    isPrescriptionPending.value = false;\n  }, 1000);\n}\n\n// Cargar datos del medicamento\nonMounted(async () => {\n  isLoading.value = true;\n  try {\n    const activeMedicamentName = route.params.id;\n    console.log('Buscando medicamento con principio activo:', activeMedicamentName);\n    \n    const searchUrl = `http://${ip}:${apiPort}/api2/medicines/search?activeMedicament=${activeMedicamentName}`;\n    console.log('URL de búsqueda:', searchUrl);\n    \n    const response = await axios.get(searchUrl);\n    console.log('Respuesta de búsqueda:', response.data);\n    \n    if (response.data && response.data.length > 0) {\n      medicine.value = response.data[0];\n      console.log('Medicamento encontrado:', medicine.value);\n      \n      // Verificar stock\n      if (medicine.value.stock > 0) {\n        hasStock.value = true;\n      }\n      \n      // Cargar recetas\n      await loadRecipes();\n      \n      // Si hay receta, seleccionar\n      if (route.query.recipeId) {\n        const recipeToSelect = userRecipes.value.find(r => r._id === route.query.recipeId);\n        if (recipeToSelect) {\n          console.log('Seleccionando receta inicial:', recipeToSelect);\n          selectRecipe(recipeToSelect);\n        }\n      }\n    } else {\n      console.warn('No se encontró el medicamento');\n      medicine.value = null;\n    }\n  } catch (error) {\n    console.error('Error al buscar el medicamento:', error);\n    medicine.value = null;\n  } finally {\n    isLoading.value = false;\n  }\n});\n\n</script>\n\n<style scoped>\n.purchase-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  background-color: #f8fafc;\n}\n\n.purchase-header {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.purchase-title {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #1e40af;\n  margin-bottom: 0.5rem;\n}\n\n.purchase-subtitle {\n  font-size: 1.1rem;\n  color: #64748b;\n}\n\n.loading-section {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 3rem;\n}\n\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border: 4px solid #e2e8f0;\n  border-top: 4px solid #1e40af;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin-bottom: 1rem;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.medicine-details {\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n  overflow: hidden;\n  margin-bottom: 2rem;\n}\n\n.medicine-header {\n  padding: 1.5rem;\n  border-bottom: 1px solid #e2e8f0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.medicine-header h2 {\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: #1e293b;\n  margin: 0;\n}\n\n.medicine-badge {\n  background-color: #ef4444;\n  color: white;\n  padding: 0.3rem 0.6rem;\n  border-radius: 4px;\n  font-size: 0.75rem;\n  font-weight: 600;\n}\n\n.medicine-data {\n  padding: 1.5rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.data-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 1rem;\n}\n\n.data-item {\n  display: flex;\n  flex-direction: column;\n}\n\n.data-item .label {\n  font-size: 0.85rem;\n  font-weight: 600;\n  color: #64748b;\n  margin-bottom: 0.3rem;\n}\n\n.data-item .value {\n  font-size: 1.1rem;\n  color: #1e293b;\n}\n\n.quantity-controls {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.quantity-btn {\n  width: 25px;\n  height: 25px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #e2e8f0;\n  border: none;\n  border-radius: 4px;\n  font-weight: bold;\n  cursor: pointer;\n}\n\n.quantity-btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.data-item .price,\n.data-item .total {\n  font-weight: 700;\n  color: #16a34a;\n}\n\n.verification-card {\n  display: flex;\n  padding: 1.5rem;\n  border-bottom: 1px solid #e2e8f0;\n  gap: 1rem;\n}\n\n.card-icon {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.2rem;\n  font-weight: bold;\n  flex-shrink: 0;\n}\n\n.status-success .card-icon {\n  background-color: #dcfce7;\n  color: #16a34a;\n}\n\n.status-error .card-icon {\n  background-color: #fee2e2;\n  color: #dc2626;\n}\n\n.status-pending .card-icon {\n  background-color: #fef3c7;\n  color: #d97706;\n}\n\n.status-neutral .card-icon {\n  background-color: #e0f2fe;\n  color: #0284c7;\n}\n\n.card-content {\n  flex: 1;\n}\n\n.card-content h3 {\n  font-size: 1.1rem;\n  font-weight: 600;\n  margin: 0 0 0.5rem 0;\n}\n\n/* Sección de recetas */\n.prescription-section {\n  padding: 1.5rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.prescription-section h3 {\n  font-size: 1.2rem;\n  font-weight: 600;\n  margin: 0 0 1rem 0;\n}\n\n.prescription-container {\n  display: flex;\n  gap: 1.5rem;\n  min-height: 300px;\n}\n\n.prescription-list {\n  flex: 1;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  overflow: hidden;\n  background-color: #f8fafc;\n}\n\n.loading-recipes {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 150px;\n}\n\n.loading-spinner-small {\n  width: 20px;\n  height: 20px;\n  border: 3px solid #e2e8f0;\n  border-top: 3px solid #1e40af;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin: 0 auto 0.5rem;\n}\n\n.no-recipes {\n  padding: 1.5rem;\n  text-align: center;\n}\n\n.reload-button {\n  background-color: #3b82f6;\n  color: white;\n  border: none;\n  padding: 0.6rem 1rem;\n  border-radius: 6px;\n  font-weight: 500;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.3rem;\n  margin: 0.75rem auto;\n}\n\n.reload-button.small {\n  padding: 0.3rem 0.6rem;\n  font-size: 0.8rem;\n}\n\n.reload-icon {\n  display: inline-block;\n  font-size: 1.2rem;\n}\n\n.reload-button:hover {\n  background-color: #2563eb;\n}\n\n.recipe-item {\n  padding: 1rem;\n  border-bottom: 1px solid #e2e8f0;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.recipe-item:hover {\n  background-color: #e0f2fe;\n}\n\n.recipe-item.active {\n  background-color: #bfdbfe;\n}\n\n.recipe-header {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 0.5rem;\n}\n\n.recipe-code {\n  font-weight: 600;\n  font-size: 0.9rem;\n}\n\n.recipe-date {\n  font-size: 0.8rem;\n  color: #64748b;\n}\n\n.recipe-doctor {\n  font-size: 0.9rem;\n  color: #0f172a;\n}\n\n.prescription-detail {\n  flex: 1.5;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background-color: white;\n  padding: 1.5rem;\n}\n\n.no-recipe-selected {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  color: #64748b;\n  font-style: italic;\n}\n\n.recipe-detail-content h4 {\n  font-size: 1.1rem;\n  font-weight: 600;\n  margin: 0 0 1rem 0;\n  color: #1e40af;\n}\n\n.recipe-info {\n  background-color: #f8fafc;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 1.5rem;\n}\n\n.recipe-info p {\n  margin: 0.5rem 0;\n}\n\n.medicine-list {\n  margin-top: 1rem;\n}\n\n.medicine-item {\n  padding: 1rem;\n  background-color: #f8fafc;\n  border-radius: 8px;\n  margin-bottom: 0.75rem;\n}\n\n.medicine-item.matching-medicine {\n  background-color: #e0f2fe;\n  border: 1px solid #60a5fa;\n}\n\n.medicine-item p {\n  margin: 0.3rem 0;\n}\n\n.calculation-details {\n  margin-top: 0.8rem;\n  padding: 0.8rem;\n  background-color: #f0f9ff;\n  border-radius: 6px;\n  border-left: 3px solid #3b82f6;\n}\n\n.calculation-text {\n  font-size: 0.9rem;\n  margin: 0.5rem 0;\n  color: #334155;\n  line-height: 1.5;\n}\n\n.recipe-actions {\n  margin-top: 1.5rem;\n  display: flex;\n  justify-content: flex-end;\n}\n\n.recipe-actions.top {\n  margin-bottom: 0.5rem;\n  padding: 0.5rem;\n  display: flex;\n  justify-content: flex-end;\n}\n\n.use-recipe-button {\n  background-color: #1e40af;\n  color: white;\n  border: none;\n  padding: 0.6rem 1.2rem;\n  border-radius: 6px;\n  font-weight: 600;\n  cursor: pointer;\n}\n\n.use-recipe-button:disabled {\n  background-color: #94a3b8;\n  cursor: not-allowed;\n}\n\n.prescription-input {\n  margin-top: 1rem;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.verify-button {\n  background-color: #0284c7;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 6px;\n  font-size: 0.9rem;\n  font-weight: 500;\n  cursor: pointer;\n  align-self: flex-start;\n}\n\n.payment-summary {\n  padding: 1.5rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.payment-summary h3 {\n  font-size: 1.2rem;\n  font-weight: 600;\n  margin: 0 0 1rem 0;\n}\n\n.summary-item {\n  display: flex;\n  justify-content: space-between;\n  padding: 0.5rem 0;\n}\n\n.summary-item.discount {\n  color: #16a34a;\n}\n\n.summary-item.total {\n  font-weight: 700;\n  font-size: 1.2rem;\n  padding-top: 1rem;\n  margin-top: 0.5rem;\n  border-top: 1px solid #e2e8f0;\n}\n\n.action-buttons {\n  padding: 1.5rem;\n  display: flex;\n  justify-content: flex-end;\n  gap: 1rem;\n}\n\n.cancel-button,\n.confirm-button,\n.back-button,\n.finish-button,\n.detail-button {\n  padding: 0.8rem 1.5rem;\n  border-radius: 6px;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  border: none;\n}\n\n.cancel-button,\n.back-button {\n  background-color: #f1f5f9;\n  color: #334155;\n}\n\n.confirm-button,\n.finish-button {\n  background-color: #1e40af;\n  color: white;\n}\n\n.detail-button {\n  background-color: #0284c7;\n  color: white;\n}\n\n.confirm-button:disabled {\n  background-color: #94a3b8;\n  cursor: not-allowed;\n}\n\n.error-container {\n  text-align: center;\n  padding: 3rem;\n}\n\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  backdrop-filter: blur(4px);\n}\n\n.modal-content {\n  background-color: white;\n  border-radius: 12px;\n  padding: 0; /* Ajustado para header/content/actions */\n  width: 90%;\n  max-width: 600px; /* Aumentado para más espacio */\n  text-align: center;\n  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);\n  overflow: hidden; /* Para border-radius */\n}\n\n.detail-modal .modal-header {\n  padding: 1rem 1.5rem;\n  background-color: #f8fafc;\n  border-bottom: 1px solid #e2e8f0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.detail-modal h3 {\n  margin: 0;\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.close-icon {\n  background: none;\n  border: none;\n  font-size: 1.75rem;\n  cursor: pointer;\n  color: #64748b;\n  line-height: 1;\n}\n\n.detail-modal .detail-content {\n  padding: 1.5rem;\n  text-align: left;\n  max-height: 60vh;\n  overflow-y: auto;\n}\n\n.detail-section {\n  margin-bottom: 1.5rem;\n}\n\n.detail-section h4 {\n  font-size: 1rem;\n  font-weight: 600;\n  color: #1e40af;\n  margin: 0 0 0.75rem 0;\n  border-bottom: 1px solid #e2e8f0;\n  padding-bottom: 0.5rem;\n}\n\n.detail-info {\n  background-color: #f8fafc;\n  padding: 0.75rem 1rem;\n  border-radius: 8px;\n}\n\n.detail-info p {\n  margin: 0.4rem 0;\n  font-size: 0.9rem;\n}\n\n.detail-info p strong {\n  color: #334155;\n}\n\n.status-ok {\n  color: #16a34a;\n  font-weight: 600;\n}\n\n.status-error {\n  color: #dc2626;\n  font-weight: 600;\n}\n\n.status-pending,\n.status-warning { /* Unificamos estilos */\n  color: #d97706;\n  font-weight: 600;\n}\n\n.status-info {\n  color: #0284c7;\n  font-weight: 600;\n}\n\n.detail-modal .modal-actions {\n  padding: 1rem 1.5rem;\n  background-color: #f8fafc;\n  border-top: 1px solid #e2e8f0;\n  display: flex;\n  justify-content: flex-end;\n  gap: 1rem;\n}\n\n.modal-content h3 {\n  /* Estilo para modal de confirmación (asegurar especificidad si es necesario) */\n  &.confirmation-title { /* Ejemplo de clase para especificidad */\n    font-size: 1.5rem;\n    font-weight: 700;\n    color: #16a34a;\n    margin-bottom: 1rem;\n  }\n}\n\n.confirmation-details {\n  background-color: #f8fafc;\n  border-radius: 8px;\n  padding: 1rem;\n  text-align: left;\n  margin: 1.5rem 0;\n}\n\n@media (max-width: 768px) {\n  .prescription-container {\n    flex-direction: column;\n  }\n\n  .prescription-list,\n  .prescription-detail {\n    width: 100%;\n  }\n}\n\n@media (max-width: 640px) {\n  .data-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .verification-card {\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n  }\n\n  .action-buttons {\n    flex-direction: column;\n  }\n\n  .cancel-button,\n  .confirm-button,\n  .detail-button {\n    width: 100%;\n  }\n}\n\n.quantity-controls.disabled {\n  opacity: 0.7;\n}\n\n.quantity-locked {\n  font-size: 0.8rem;\n  color: #64748b;\n  margin-left: 0.5rem;\n  font-style: italic;\n}\n\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}