-- ============================================================================
-- BACKV4 - Initial Schema Migration Script
-- ============================================================================
-- This script creates the initial database schema for the Ensurance system
-- Compatible with SQLite database
-- Version: 1.0
-- Date: 2025-08-27
-- ============================================================================

-- Users table - Core user management
CREATE TABLE IF NOT EXISTS USERS (
    ID_USER INTEGER PRIMARY KEY AUTOINCREMENT,
    ADDRESS VARCHAR(255),
    BIRTHDATE DATE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CUI BIGINT NOT NULL,
    EMAIL VARCHAR(255) NOT NULL UNIQUE,
    ENABLED INTEGER NOT NULL DEFAULT 1,
    EXPIRATION_DATE DATE,
    NAME VARCHAR(255) NOT NULL,
    PAID_SERVICE BOOLEAN DEFAULT 0,
    PASSWORD VARCHAR(255) NOT NULL,
    PHONE VARCHAR(255),
    ROL VARCHAR(255) NOT NULL,
    ID_POLICY BIGINT
);

-- Policy table - Insurance policies
CREATE TABLE IF NOT EXISTS POLICY (
    ID_POLICY INTEGER PRIMARY KEY AUTOINCREMENT,
    COST FLOAT,
    CREATION_DATE DATE DEFAULT CURRENT_DATE,
    ENABLED INTEGER DEFAULT 1,
    EXP_DATE DATE,
    PERCENTAGE FLOAT
);

-- Hospitals table
CREATE TABLE IF NOT EXISTS HOSPITALS (
    ID_HOSPITAL INTEGER PRIMARY KEY AUTOINCREMENT,
    ADDRESS VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(100) NOT NULL,
    ENABLED INTEGER NOT NULL DEFAULT 1,
    NAME VARCHAR(100) NOT NULL,
    PHONE BIGINT NOT NULL,
    PORT VARCHAR(10)
);

-- Pharmacy table
CREATE TABLE IF NOT EXISTS PHARMACY (
    ID_PHARMACY INTEGER PRIMARY KEY AUTOINCREMENT,
    ADDRESS VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255),
    ENABLED INTEGER NOT NULL DEFAULT 1,
    NAME VARCHAR(100) NOT NULL,
    PHONE BIGINT NOT NULL
);

-- Category table
CREATE TABLE IF NOT EXISTS CATEGORY (
    ID_CATEGORY INTEGER PRIMARY KEY AUTOINCREMENT,
    ENABLED INTEGER NOT NULL DEFAULT 1,
    NAME VARCHAR(100) NOT NULL
);

-- Subcategory table (missing from original schema)
CREATE TABLE IF NOT EXISTS SUBCATEGORY (
    ID_SUBCATEGORY INTEGER PRIMARY KEY AUTOINCREMENT,
    ENABLED INTEGER NOT NULL DEFAULT 1,
    NAME VARCHAR(100) NOT NULL,
    ID_CATEGORY BIGINT NOT NULL
);

-- Medicine table
CREATE TABLE IF NOT EXISTS MEDICINE (
    ID_MEDICINE INTEGER PRIMARY KEY AUTOINCREMENT,
    ACTIVE_PRINCIPLE VARCHAR(255),
    BRAND VARCHAR(100),
    COVERAGE INTEGER NOT NULL DEFAULT 0,
    DESCRIPTION VARCHAR(255) NOT NULL,
    ENABLED INTEGER NOT NULL DEFAULT 1,
    NAME VARCHAR(100) NOT NULL,
    PRESENTATION VARCHAR(255),
    PRICE NUMERIC(10,2) NOT NULL,
    STOCK INTEGER DEFAULT 0,
    ID_PHARMACY BIGINT NOT NULL
);

-- Insurance Services table
CREATE TABLE IF NOT EXISTS INSURANCE_SERVICES (
    ID_INSURANCE_SERVICE INTEGER PRIMARY KEY AUTOINCREMENT,
    COVERAGE_PERCENTAGE INTEGER NOT NULL,
    DESCRIPTION VARCHAR(255) NOT NULL,
    ENABLED INTEGER NOT NULL DEFAULT 1,
    EXTERNAL_ID VARCHAR(100),
    NAME VARCHAR(100) NOT NULL,
    PRICE FLOAT NOT NULL,
    ID_CATEGORY BIGINT NOT NULL,
    ID_SUBCATEGORY BIGINT NOT NULL
);

-- Services table
CREATE TABLE IF NOT EXISTS SERVICES (
    ID_SERVICE INTEGER PRIMARY KEY AUTOINCREMENT,
    COST FLOAT NOT NULL,
    DESCRIPTION VARCHAR(255) NOT NULL,
    ENABLED INTEGER NOT NULL DEFAULT 1,
    NAME VARCHAR(100) NOT NULL,
    ID_CATEGORY BIGINT NOT NULL,
    ID_HOSPITAL BIGINT NOT NULL,
    ID_SUBCATEGORY BIGINT NOT NULL
);

-- Prescription table
CREATE TABLE IF NOT EXISTS PRESCRIPTION (
    ID_PRESCRIPTION INTEGER PRIMARY KEY AUTOINCREMENT,
    AUTH VARCHAR(100) NOT NULL,
    COPAY NUMERIC(10,2) NOT NULL,
    PRESCRIPTION_COMMENT VARCHAR(255) NOT NULL,
    PRESCRIPTION_DATE DATE NOT NULL DEFAULT CURRENT_DATE,
    SECURED INTEGER NOT NULL DEFAULT 0,
    TOTAL NUMERIC(10,2) NOT NULL,
    ID_HOSPITAL BIGINT NOT NULL,
    ID_MEDICINE BIGINT NOT NULL,
    ID_PHARMACY BIGINT NOT NULL,
    ID_USER BIGINT NOT NULL
);

-- Prescription Approvals table
CREATE TABLE IF NOT EXISTS PRESCRIPTION_APPROVALS (
    ID_APPROVAL INTEGER PRIMARY KEY AUTOINCREMENT,
    APPROVAL_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    AUTHORIZATION_NUMBER VARCHAR(50) NOT NULL UNIQUE,
    ID_USER BIGINT NOT NULL,
    PRESCRIPTION_COST FLOAT NOT NULL,
    PRESCRIPTION_DETAILS VARCHAR(2000),
    PRESCRIPTION_ID_HOSPITAL VARCHAR(100),
    REJECTION_REASON VARCHAR(255),
    STATUS VARCHAR(20) NOT NULL DEFAULT 'PENDING'
);

-- Transactions table
CREATE TABLE IF NOT EXISTS TRANSACTIONS (
    ID_TRANSACTION INTEGER PRIMARY KEY AUTOINCREMENT,
    AUTH VARCHAR(100) NOT NULL,
    COPAY FLOAT NOT NULL,
    COVERED INTEGER NOT NULL DEFAULT 0,
    RESULT VARCHAR(100) NOT NULL,
    TOTAL FLOAT NOT NULL,
    TRANS_DATE DATE NOT NULL DEFAULT CURRENT_DATE,
    TRANSACTION_COMMENT VARCHAR(255) NOT NULL,
    ID_HOSPITAL BIGINT NOT NULL,
    ID_USER BIGINT NOT NULL
);

-- Appointments table
CREATE TABLE IF NOT EXISTS APPOINTMENT (
    ID_APPOINTMENT INTEGER PRIMARY KEY AUTOINCREMENT,
    APPOINTMENT_DATE DATE NOT NULL,
    ENABLED INTEGER NOT NULL DEFAULT 1,
    ID_HOSPITAL BIGINT NOT NULL,
    ID_USER BIGINT NOT NULL
);

-- Ensurance Appointments table
CREATE TABLE IF NOT EXISTS ENSURANCE_APPOINTMENT (
    ID_APPOINTMENT INTEGER PRIMARY KEY AUTOINCREMENT,
    APPOINTMENT_DATE DATE NOT NULL,
    DOCTOR_NAME VARCHAR(255),
    HOSPITAL_APPOINTMENT_ID VARCHAR(255) NOT NULL,
    ID_USER BIGINT NOT NULL,
    APPOINTMENT_REASON VARCHAR(500)
);

-- Appointment Made table
CREATE TABLE IF NOT EXISTS APPOINTMENT_MADE (
    ID_CITA BIGINT PRIMARY KEY,
    APPOINTMENT_MADE_DATE DATE NOT NULL DEFAULT CURRENT_DATE,
    ID_USER BIGINT NOT NULL
);

-- System Configuration table
CREATE TABLE IF NOT EXISTS SYSTEM_CONFIG (
    ID_CONFIG INTEGER PRIMARY KEY AUTOINCREMENT,
    CONFIG_DESCRIPTION VARCHAR(255),
    CONFIG_KEY VARCHAR(50) NOT NULL UNIQUE,
    CONFIG_VALUE VARCHAR(255) NOT NULL,
    CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP
);

-- Configurable Amount table
CREATE TABLE IF NOT EXISTS CONFIGURABLE_AMOUNT (
    ID_CONFIGURABLE_AMOUNT INTEGER PRIMARY KEY AUTOINCREMENT,
    PRESCRIPTION_AMOUNT NUMERIC(10,2) NOT NULL
);

-- Transaction Policy table
CREATE TABLE IF NOT EXISTS TRANSACTION_POLICY (
    ID_TRANSACTION_POLICY INTEGER PRIMARY KEY AUTOINCREMENT,
    PAY_DATE DATE NOT NULL DEFAULT CURRENT_DATE,
    TOTAL NUMERIC(10,2) NOT NULL,
    ID_POLICY BIGINT NOT NULL,
    ID_USER BIGINT NOT NULL
);

-- Total Hospital table
CREATE TABLE IF NOT EXISTS TOTAL_HOSPITAL (
    ID_TOTAL_HOSPITAL INTEGER PRIMARY KEY AUTOINCREMENT,
    TOTAL NUMERIC(10,2) NOT NULL,
    TOTAL_DATE DATE NOT NULL DEFAULT CURRENT_DATE,
    ID_HOSPITAL BIGINT NOT NULL
);

-- Total Pharmacy table
CREATE TABLE IF NOT EXISTS TOTAL_PHARMACY (
    ID_TOTAL_PHARMACY INTEGER PRIMARY KEY AUTOINCREMENT,
    TOTAL NUMERIC(10,2) NOT NULL,
    TOTAL_DATE DATE NOT NULL DEFAULT CURRENT_DATE,
    ID_PHARMACY BIGINT NOT NULL
);

-- Hospital Insurance Service table
CREATE TABLE IF NOT EXISTS HOSPITAL_INSURANCE_SERVICE (
    ID_HOSPITAL_SERVICE INTEGER PRIMARY KEY AUTOINCREMENT,
    APPROVAL_DATE TIMESTAMP,
    APPROVED INTEGER NOT NULL DEFAULT 0,
    NOTES VARCHAR(255),
    ID_HOSPITAL BIGINT NOT NULL,
    ID_INSURANCE_SERVICE BIGINT NOT NULL
);

-- Junction tables
CREATE TABLE IF NOT EXISTS MEDICINE_PRES (
    ID_MEDICINE BIGINT NOT NULL,
    ID_PRESCRIPTION BIGINT NOT NULL,
    PRIMARY KEY (ID_MEDICINE, ID_PRESCRIPTION)
);

CREATE TABLE IF NOT EXISTS SERVICE_CATEGORY (
    ID_CATEGORY BIGINT NOT NULL,
    ID_SERVICE BIGINT NOT NULL,
    PRIMARY KEY (ID_CATEGORY, ID_SERVICE)
);

-- ============================================================================
-- Indexes for performance optimization
-- ============================================================================

CREATE INDEX IF NOT EXISTS idx_users_email ON USERS(EMAIL);
CREATE INDEX IF NOT EXISTS idx_users_cui ON USERS(CUI);
CREATE INDEX IF NOT EXISTS idx_users_policy ON USERS(ID_POLICY);
CREATE INDEX IF NOT EXISTS idx_prescription_user ON PRESCRIPTION(ID_USER);
CREATE INDEX IF NOT EXISTS idx_prescription_date ON PRESCRIPTION(PRESCRIPTION_DATE);
CREATE INDEX IF NOT EXISTS idx_transactions_user ON TRANSACTIONS(ID_USER);
CREATE INDEX IF NOT EXISTS idx_transactions_date ON TRANSACTIONS(TRANS_DATE);
CREATE INDEX IF NOT EXISTS idx_medicine_pharmacy ON MEDICINE(ID_PHARMACY);
CREATE INDEX IF NOT EXISTS idx_system_config_key ON SYSTEM_CONFIG(CONFIG_KEY);

-- ============================================================================
-- Initial data
-- ============================================================================

-- Insert default system configurations
INSERT OR IGNORE INTO SYSTEM_CONFIG (CONFIG_KEY, CONFIG_VALUE, CONFIG_DESCRIPTION) VALUES
('MIN_PRESCRIPTION_AMOUNT', '50.00', 'Monto mínimo para prescripciones'),
('MAX_PRESCRIPTION_AMOUNT', '5000.00', 'Monto máximo para prescripciones'),
('DEFAULT_COPAY_PERCENTAGE', '20', 'Porcentaje de copago por defecto'),
('SYSTEM_MAINTENANCE_MODE', '0', 'Modo de mantenimiento del sistema'),
('MAX_DAILY_TRANSACTIONS', '100', 'Máximo de transacciones diarias por usuario');

-- Insert default categories
INSERT OR IGNORE INTO CATEGORY (NAME, ENABLED) VALUES
('Medicamentos', 1),
('Consultas', 1),
('Laboratorios', 1),
('Emergencias', 1);

-- Insert default pharmacy
INSERT OR IGNORE INTO PHARMACY (NAME, ADDRESS, EMAIL, PHONE, ENABLED) VALUES
('Farmacia Central', 'Zona 1, Guatemala', 'farmacia@ensurance.com', 22334455, 1);

-- ============================================================================
-- End of migration script
-- ============================================================================
