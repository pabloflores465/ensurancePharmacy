-- Script para actualizar la base de datos con los nuevos campos para gestión de servicios

-- Modificar tabla USERS para añadir los nuevos campos
ALTER TABLE USERS
ADD PAID_SERVICE NUMBER(1) DEFAULT NULL;

-- Añadir campo fecha de expiración
ALTER TABLE USERS
ADD EXPIRATION_DATE DATE;

-- Actualizar columna ID_POLICY para que acepte NULL (opcional)
ALTER TABLE USERS
MODIFY ID_POLICY NUMBER(10) NULL;

-- Comentarios para los nuevos campos
COMMENT ON COLUMN USERS.PAID_SERVICE IS 'Indica si el usuario tiene el servicio pagado (1=Sí, 0=No, NULL=No definido)';
COMMENT ON COLUMN USERS.EXPIRATION_DATE IS 'Fecha en la que expira el servicio pagado';

-- Actualizar valores por defecto para usuarios existentes
UPDATE USERS SET PAID_SERVICE = 0 WHERE PAID_SERVICE IS NULL;

-- Configurar valores de expiración para usuarios con póliza
UPDATE USERS SET PAID_SERVICE = 1, EXPIRATION_DATE = ADD_MONTHS(SYSDATE, 3)
WHERE ID_POLICY IS NOT NULL;

-- Crear tabla para aprobaciones de recetas
CREATE TABLE PRESCRIPTION_APPROVALS (
    ID_APPROVAL NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    AUTHORIZATION_NUMBER VARCHAR2(50) NOT NULL UNIQUE,
    ID_USER NUMBER(10) NOT NULL,
    PRESCRIPTION_ID_HOSPITAL VARCHAR2(100),
    PRESCRIPTION_DETAILS CLOB, -- Usar CLOB para JSON o texto largo
    PRESCRIPTION_COST NUMBER(10, 2) NOT NULL,
    APPROVAL_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    STATUS VARCHAR2(20) NOT NULL, -- APPROVED, REJECTED
    REJECTION_REASON VARCHAR2(255),
    CONSTRAINT FK_APPROVAL_USER FOREIGN KEY (ID_USER) REFERENCES USERS(ID_USER)
);

COMMENT ON COLUMN PRESCRIPTION_APPROVALS.PRESCRIPTION_ID_HOSPITAL IS 'ID opcional de la receta en el sistema del hospital';
COMMENT ON COLUMN PRESCRIPTION_APPROVALS.PRESCRIPTION_DETAILS IS 'Detalles de la receta, posiblemente en formato JSON';
COMMENT ON COLUMN PRESCRIPTION_APPROVALS.STATUS IS 'Estado de la aprobación: APPROVED, REJECTED';

-- Asegurar que la tabla CONFIGURABLE_AMOUNT exista y tenga el campo
-- (Crear si no existe)
DECLARE
  table_exists number;
BEGIN
  SELECT count(*) INTO table_exists FROM user_tables WHERE table_name = 'CONFIGURABLE_AMOUNT';
  IF table_exists = 0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE CONFIGURABLE_AMOUNT (
      ID_CONFIGURABLE_AMOUNT NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
      PRESCRIPTION_AMOUNT NUMBER(10, 2) DEFAULT 250.00 NOT NULL
    )';
    EXECUTE IMMEDIATE 'INSERT INTO CONFIGURABLE_AMOUNT (PRESCRIPTION_AMOUNT) VALUES (250.00)'; 
    dbms_output.put_line('Tabla CONFIGURABLE_AMOUNT creada.');
  ELSE
     -- Verificar si la columna existe
     SELECT count(*) INTO table_exists FROM user_tab_columns WHERE table_name = 'CONFIGURABLE_AMOUNT' AND column_name = 'PRESCRIPTION_AMOUNT';
     IF table_exists = 0 THEN
        EXECUTE IMMEDIATE 'ALTER TABLE CONFIGURABLE_AMOUNT ADD PRESCRIPTION_AMOUNT NUMBER(10, 2) DEFAULT 250.00 NOT NULL';
        dbms_output.put_line('Columna PRESCRIPTION_AMOUNT añadida a CONFIGURABLE_AMOUNT.');
     END IF;
     -- Asegurarse que haya al menos una fila
     SELECT count(*) INTO table_exists FROM CONFIGURABLE_AMOUNT;
     IF table_exists = 0 THEN
        EXECUTE IMMEDIATE 'INSERT INTO CONFIGURABLE_AMOUNT (PRESCRIPTION_AMOUNT) VALUES (250.00)'; 
     END IF;
  END IF;
END;
/

COMMIT; 